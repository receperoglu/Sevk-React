{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getClassNames } from './ActivityItem.classNames';\nimport { getStyles } from './ActivityItem.styles';\nimport { PersonaSize, PersonaCoin } from '../../Persona';\n/**\n * {@docCategory ActivityItem}\n */\n\nvar ActivityItem =\n/** @class */\nfunction (_super) {\n  __extends(ActivityItem, _super);\n\n  function ActivityItem(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderIcon = function (props) {\n      if (props.activityPersonas) {\n        return _this._onRenderPersonaArray(props);\n      } else {\n        return _this.props.activityIcon;\n      }\n    };\n\n    _this._onRenderActivityDescription = function (props) {\n      var classNames = _this._getClassNames(props); // eslint-disable-next-line deprecation/deprecation\n\n\n      var activityDescription = props.activityDescription || props.activityDescriptionText;\n\n      if (activityDescription) {\n        return React.createElement(\"span\", {\n          className: classNames.activityText\n        }, activityDescription);\n      }\n\n      return null;\n    };\n\n    _this._onRenderComments = function (props) {\n      var classNames = _this._getClassNames(props); // eslint-disable-next-line deprecation/deprecation\n\n\n      var comments = props.comments || props.commentText;\n\n      if (!props.isCompact && comments) {\n        return React.createElement(\"div\", {\n          className: classNames.commentText\n        }, comments);\n      }\n\n      return null;\n    };\n\n    _this._onRenderTimeStamp = function (props) {\n      var classNames = _this._getClassNames(props);\n\n      if (!props.isCompact && props.timeStamp) {\n        return React.createElement(\"div\", {\n          className: classNames.timeStamp\n        }, props.timeStamp);\n      }\n\n      return null;\n    }; // If activityPersonas is an array of persona props, build the persona cluster element.\n\n\n    _this._onRenderPersonaArray = function (props) {\n      var classNames = _this._getClassNames(props);\n\n      var personaElement = null;\n      var activityPersonas = props.activityPersonas;\n\n      if (activityPersonas[0].imageUrl || activityPersonas[0].imageInitials) {\n        var personaList_1 = [];\n        var showSize16Personas_1 = activityPersonas.length > 1 || props.isCompact;\n        var personaLimit_1 = props.isCompact ? 3 : 4;\n        var style_1 = undefined;\n\n        if (props.isCompact) {\n          style_1 = {\n            display: 'inline-block',\n            width: '10px',\n            minWidth: '10px',\n            overflow: 'visible'\n          };\n        }\n\n        activityPersonas.filter(function (person, index) {\n          return index < personaLimit_1;\n        }).forEach(function (person, index) {\n          personaList_1.push(React.createElement(PersonaCoin, __assign({}, person, {\n            key: person.key || index,\n            className: classNames.activityPersona,\n            // eslint-disable-next-line deprecation/deprecation\n            size: showSize16Personas_1 ? PersonaSize.size16 : PersonaSize.size32,\n            style: style_1\n          })));\n        });\n        personaElement = React.createElement(\"div\", {\n          className: classNames.personaContainer\n        }, personaList_1);\n      }\n\n      return personaElement;\n    };\n\n    return _this;\n  }\n\n  ActivityItem.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.onRenderIcon,\n        onRenderIcon = _b === void 0 ? this._onRenderIcon : _b,\n        _c = _a.onRenderActivityDescription,\n        onRenderActivityDescription = _c === void 0 ? this._onRenderActivityDescription : _c,\n        _d = _a.onRenderComments,\n        onRenderComments = _d === void 0 ? this._onRenderComments : _d,\n        _e = _a.onRenderTimeStamp,\n        onRenderTimeStamp = _e === void 0 ? this._onRenderTimeStamp : _e,\n        animateBeaconSignal = _a.animateBeaconSignal,\n        isCompact = _a.isCompact;\n\n    var classNames = this._getClassNames(this.props);\n\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      style: this.props.style\n    }, (this.props.activityPersonas || this.props.activityIcon || this.props.onRenderIcon) && React.createElement(\"div\", {\n      className: classNames.activityTypeIcon\n    }, animateBeaconSignal && isCompact && React.createElement(\"div\", {\n      className: classNames.pulsingBeacon\n    }), onRenderIcon(this.props)), React.createElement(\"div\", {\n      className: classNames.activityContent\n    }, onRenderActivityDescription(this.props, this._onRenderActivityDescription), onRenderComments(this.props, this._onRenderComments), onRenderTimeStamp(this.props, this._onRenderTimeStamp)));\n  };\n\n  ActivityItem.prototype._getClassNames = function (props) {\n    return getClassNames(getStyles(undefined, props.styles, props.animateBeaconSignal, props.beaconColorOne, props.beaconColorTwo, props.isCompact), props.className, props.activityPersonas, props.isCompact);\n  };\n\n  return ActivityItem;\n}(React.Component);\n\nexport { ActivityItem };","map":null,"metadata":{},"sourceType":"module"}