{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport { Icon } from '../../../Icon';\nimport { PersonaPresence as PersonaPresenceEnum } from '../Persona.types';\nimport { sizeBoolean } from '../PersonaConsts';\nvar coinSizeFontScaleFactor = 6;\nvar coinSizePresenceScaleFactor = 3;\nvar presenceMaxSize = 40;\nvar presenceFontMaxSize = 20;\nvar getClassNames = classNamesFunction({\n  // There can be many PersonaPresence rendered with different sizes.\n  // Therefore setting a larger cache size.\n  cacheSize: 100\n});\n/**\n * PersonaPresence with no default styles.\n * [Use the `getStyles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar PersonaPresenceBase =\n/** @class */\nfunction (_super) {\n  __extends(PersonaPresenceBase, _super);\n\n  function PersonaPresenceBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderIcon = function (className, style) {\n      return React.createElement(Icon, {\n        className: className,\n        iconName: determineIcon(_this.props.presence, _this.props.isOutOfOffice),\n        style: style\n      });\n    };\n\n    return _this;\n  }\n\n  PersonaPresenceBase.prototype.render = function () {\n    var _a = this.props,\n        coinSize = _a.coinSize,\n        isOutOfOffice = _a.isOutOfOffice,\n        styles = _a.styles,\n        // Use getStyles from props.\n    presence = _a.presence,\n        theme = _a.theme,\n        presenceTitle = _a.presenceTitle,\n        presenceColors = _a.presenceColors;\n    var size = sizeBoolean(this.props.size); // Render Presence Icon if Persona is above size 32.\n\n    var renderIcon = !(size.isSize8 || size.isSize10 || size.isSize16 || size.isSize24 || size.isSize28 || size.isSize32) && (coinSize ? coinSize > 32 : true);\n    var presenceHeightWidth = coinSize ? coinSize / coinSizePresenceScaleFactor < presenceMaxSize ? coinSize / coinSizePresenceScaleFactor + 'px' : presenceMaxSize + 'px' : '';\n    var presenceFontSize = coinSize ? coinSize / coinSizeFontScaleFactor < presenceFontMaxSize ? coinSize / coinSizeFontScaleFactor + 'px' : presenceFontMaxSize + 'px' : '';\n    var coinSizeWithPresenceIconStyle = coinSize ? {\n      fontSize: presenceFontSize,\n      lineHeight: presenceHeightWidth\n    } : undefined;\n    var coinSizeWithPresenceStyle = coinSize ? {\n      width: presenceHeightWidth,\n      height: presenceHeightWidth\n    } : undefined; // Use getStyles from props, or fall back to getStyles from styles file.\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      presence: presence,\n      size: this.props.size,\n      isOutOfOffice: isOutOfOffice,\n      presenceColors: presenceColors\n    });\n\n    if (presence === PersonaPresenceEnum.none) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      role: \"presentation\",\n      className: classNames.presence,\n      style: coinSizeWithPresenceStyle,\n      title: presenceTitle\n    }, renderIcon && this._onRenderIcon(classNames.presenceIcon, coinSizeWithPresenceIconStyle));\n  };\n\n  return PersonaPresenceBase;\n}(React.Component);\n\nexport { PersonaPresenceBase };\n\nfunction determineIcon(presence, isOutOfOffice) {\n  if (!presence) {\n    return undefined;\n  }\n\n  var oofIcon = 'SkypeArrow';\n\n  switch (PersonaPresenceEnum[presence]) {\n    case 'online':\n      return 'SkypeCheck';\n\n    case 'away':\n      return isOutOfOffice ? oofIcon : 'SkypeClock';\n\n    case 'dnd':\n      return 'SkypeMinus';\n\n    case 'offline':\n      return isOutOfOffice ? oofIcon : '';\n  }\n\n  return '';\n}","map":null,"metadata":{},"sourceType":"module"}