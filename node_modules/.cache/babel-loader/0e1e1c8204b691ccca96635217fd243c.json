{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getId, getRTL, getRTLSafeKeyCode, warnMutuallyExclusive, initializeComponentRef, Async, on, FocusRects } from '../../Utilities';\nimport { classNamesFunction, getNativeProps, divProperties } from '../../Utilities';\nimport { Label } from '../../Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SliderBase';\nexport var ONKEYDOWN_TIMEOUT_DURATION = 1000;\n\nvar SliderBase =\n/** @class */\nfunction (_super) {\n  __extends(SliderBase, _super);\n\n  function SliderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._disposables = [];\n    _this._sliderLine = React.createRef();\n    _this._thumb = React.createRef();\n    _this._onKeyDownTimer = -1;\n\n    _this._getAriaValueText = function (value) {\n      var ariaValueText = _this.props.ariaValueText;\n\n      if (value !== undefined) {\n        return ariaValueText ? ariaValueText(value) : value.toString();\n      }\n\n      return undefined;\n    };\n\n    _this._onMouseDownOrTouchStart = function (event) {\n      if (event.type === 'mousedown') {\n        _this._disposables.push(on(window, 'mousemove', _this._onMouseMoveOrTouchMove, true), on(window, 'mouseup', _this._onMouseUpOrTouchEnd, true));\n      } else if (event.type === 'touchstart') {\n        _this._disposables.push(on(window, 'touchmove', _this._onMouseMoveOrTouchMove, true), on(window, 'touchend', _this._onMouseUpOrTouchEnd, true));\n      }\n\n      _this._onMouseMoveOrTouchMove(event, true);\n    };\n\n    _this._onMouseMoveOrTouchMove = function (event, suppressEventCancelation) {\n      if (!_this._sliderLine.current) {\n        return;\n      }\n\n      var _a = _this.props,\n          max = _a.max,\n          min = _a.min,\n          step = _a.step;\n      var steps = (max - min) / step;\n\n      var sliderPositionRect = _this._sliderLine.current.getBoundingClientRect();\n\n      var sliderLength = !_this.props.vertical ? sliderPositionRect.width : sliderPositionRect.height;\n      var stepLength = sliderLength / steps;\n      var currentSteps;\n      var distance;\n\n      if (!_this.props.vertical) {\n        var left = _this._getPosition(event, _this.props.vertical);\n\n        distance = getRTL(_this.props.theme) ? sliderPositionRect.right - left : left - sliderPositionRect.left;\n        currentSteps = distance / stepLength;\n      } else {\n        var bottom = _this._getPosition(event, _this.props.vertical);\n\n        distance = sliderPositionRect.bottom - bottom;\n        currentSteps = distance / stepLength;\n      }\n\n      var currentValue;\n      var renderedValue; // The value shouldn't be bigger than max or be smaller than min.\n\n      if (currentSteps > Math.floor(steps)) {\n        renderedValue = currentValue = max;\n      } else if (currentSteps < 0) {\n        renderedValue = currentValue = min;\n      } else {\n        renderedValue = min + step * currentSteps;\n        currentValue = min + step * Math.round(currentSteps);\n      }\n\n      _this._updateValue(currentValue, renderedValue);\n\n      if (!suppressEventCancelation) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n    _this._onMouseUpOrTouchEnd = function (event) {\n      // Disable renderedValue override.\n      _this.setState({\n        renderedValue: undefined\n      });\n\n      if (_this.props.onChanged) {\n        _this.props.onChanged(event, _this.state.value);\n      }\n\n      _this._disposeListeners();\n    };\n\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n\n      _this._disposables = [];\n    };\n\n    _this._onKeyDown = function (event) {\n      var value = _this.state.value;\n      var _a = _this.props,\n          max = _a.max,\n          min = _a.min,\n          step = _a.step;\n      var diff = 0; // eslint-disable-next-line deprecation/deprecation\n\n      switch (event.which) {\n        case getRTLSafeKeyCode(KeyCodes.left, _this.props.theme):\n        case KeyCodes.down:\n          diff = -step;\n\n          _this._clearOnKeyDownTimer();\n\n          _this._setOnKeyDownTimer(event);\n\n          break;\n\n        case getRTLSafeKeyCode(KeyCodes.right, _this.props.theme):\n        case KeyCodes.up:\n          diff = step;\n\n          _this._clearOnKeyDownTimer();\n\n          _this._setOnKeyDownTimer(event);\n\n          break;\n\n        case KeyCodes.home:\n          value = min;\n          break;\n\n        case KeyCodes.end:\n          value = max;\n          break;\n\n        default:\n          return;\n      }\n\n      var newValue = Math.min(max, Math.max(min, value + diff));\n\n      _this._updateValue(newValue, newValue);\n\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this._clearOnKeyDownTimer = function () {\n      _this._async.clearTimeout(_this._onKeyDownTimer);\n    };\n\n    _this._setOnKeyDownTimer = function (event) {\n      _this._onKeyDownTimer = _this._async.setTimeout(function () {\n        if (_this.props.onChanged) {\n          _this.props.onChanged(event, _this.state.value);\n        }\n      }, ONKEYDOWN_TIMEOUT_DURATION);\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, _this.props, {\n      value: 'defaultValue'\n    });\n    _this._id = getId('Slider');\n    var value = props.value !== undefined ? props.value : props.defaultValue !== undefined ? props.defaultValue : props.min;\n    _this.state = {\n      value: value,\n      renderedValue: undefined\n    };\n    return _this;\n  }\n\n  SliderBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._disposeListeners();\n  };\n\n  SliderBase.prototype.render = function () {\n    var _a, _b, _c, _d, _e;\n\n    var _f = this.props,\n        ariaLabel = _f.ariaLabel,\n        className = _f.className,\n        disabled = _f.disabled,\n        label = _f.label,\n        max = _f.max,\n        min = _f.min,\n        showValue = _f.showValue,\n        buttonProps = _f.buttonProps,\n        vertical = _f.vertical,\n        valueFormat = _f.valueFormat,\n        styles = _f.styles,\n        theme = _f.theme,\n        originFromZero = _f.originFromZero;\n    var value = this.value;\n    var renderedValue = this.renderedValue;\n    var thumbOffsetPercent = min === max ? 0 : (renderedValue - min) / (max - min) * 100;\n    var zeroOffsetPercent = min >= 0 ? 0 : -min / (max - min) * 100;\n    var lengthString = vertical ? 'height' : 'width';\n    var onMouseDownProp = disabled ? {} : {\n      onMouseDown: this._onMouseDownOrTouchStart\n    };\n    var onTouchStartProp = disabled ? {} : {\n      onTouchStart: this._onMouseDownOrTouchStart\n    };\n    var onKeyDownProp = disabled ? {} : {\n      onKeyDown: this._onKeyDown\n    };\n    var classNames = getClassNames(styles, {\n      className: className,\n      disabled: disabled,\n      vertical: vertical,\n      showTransitions: renderedValue === value,\n      showValue: showValue,\n      theme: theme\n    });\n    var divButtonProps = buttonProps ? getNativeProps(buttonProps, divProperties) : undefined;\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label && React.createElement(Label, __assign({\n      className: classNames.titleLabel\n    }, ariaLabel ? {} : {\n      htmlFor: this._id\n    }, {\n      disabled: disabled\n    }), label), React.createElement(\"div\", {\n      className: classNames.container\n    }, React.createElement(\"div\", __assign({\n      id: this._id,\n      \"aria-valuenow\": value,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuetext\": this._getAriaValueText(value),\n      \"aria-label\": ariaLabel || label,\n      \"aria-disabled\": disabled\n    }, onMouseDownProp, onTouchStartProp, onKeyDownProp, divButtonProps, {\n      className: css(classNames.slideBox, buttonProps.className),\n      role: \"slider\",\n      tabIndex: disabled ? undefined : 0,\n      \"data-is-focusable\": !disabled\n    }), React.createElement(\"div\", {\n      ref: this._sliderLine,\n      className: classNames.line\n    }, originFromZero && React.createElement(\"span\", {\n      className: css(classNames.zeroTick),\n      style: this._getStyleUsingOffsetPercent(vertical, zeroOffsetPercent)\n    }), React.createElement(\"span\", {\n      ref: this._thumb,\n      className: classNames.thumb,\n      style: this._getStyleUsingOffsetPercent(vertical, thumbOffsetPercent)\n    }), originFromZero ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_a = {}, _a[lengthString] = Math.min(thumbOffsetPercent, zeroOffsetPercent) + '%', _a)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.activeSection),\n      style: (_b = {}, _b[lengthString] = Math.abs(zeroOffsetPercent - thumbOffsetPercent) + '%', _b)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_c = {}, _c[lengthString] = Math.min(100 - thumbOffsetPercent, 100 - zeroOffsetPercent) + '%', _c)\n    })) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.activeSection),\n      style: (_d = {}, _d[lengthString] = thumbOffsetPercent + '%', _d)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_e = {}, _e[lengthString] = 100 - thumbOffsetPercent + '%', _e)\n    })))), showValue && React.createElement(Label, {\n      className: classNames.valueLabel,\n      disabled: disabled\n    }, valueFormat ? valueFormat(value) : value)), React.createElement(FocusRects, null));\n  };\n\n  SliderBase.prototype.focus = function () {\n    if (this._thumb.current) {\n      this._thumb.current.focus();\n    }\n  };\n\n  Object.defineProperty(SliderBase.prototype, \"value\", {\n    get: function get() {\n      var _a = this.props.value,\n          value = _a === void 0 ? this.state.value : _a;\n\n      if (this.props.min === undefined || this.props.max === undefined || value === undefined) {\n        return undefined;\n      } else {\n        return Math.max(this.props.min, Math.min(this.props.max, value));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SliderBase.prototype, \"renderedValue\", {\n    get: function get() {\n      // renderedValue is expected to be defined while user is interacting with control, otherwise `undefined`.\n      // Fall back to `value`.\n      var _a = this.state.renderedValue,\n          renderedValue = _a === void 0 ? this.value : _a;\n      return renderedValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SliderBase.prototype._getStyleUsingOffsetPercent = function (vertical, thumbOffsetPercent) {\n    var _a;\n\n    var direction = vertical ? 'bottom' : getRTL(this.props.theme) ? 'right' : 'left';\n    return _a = {}, _a[direction] = thumbOffsetPercent + '%', _a;\n  };\n\n  SliderBase.prototype._getPosition = function (event, vertical) {\n    var currentPosition;\n\n    switch (event.type) {\n      case 'mousedown':\n      case 'mousemove':\n        currentPosition = !vertical ? event.clientX : event.clientY;\n        break;\n\n      case 'touchstart':\n      case 'touchmove':\n        currentPosition = !vertical ? event.touches[0].clientX : event.touches[0].clientY;\n        break;\n    }\n\n    return currentPosition;\n  };\n\n  SliderBase.prototype._updateValue = function (value, renderedValue) {\n    var _this = this;\n\n    var _a = this.props,\n        step = _a.step,\n        snapToStep = _a.snapToStep;\n    var numDec = 0;\n\n    if (isFinite(step)) {\n      while (Math.round(step * Math.pow(10, numDec)) / Math.pow(10, numDec) !== step) {\n        numDec++;\n      }\n    } // Make sure value has correct number of decimal places based on number of decimals in step\n\n\n    var roundedValue = parseFloat(value.toFixed(numDec));\n    var valueChanged = roundedValue !== this.state.value;\n\n    if (snapToStep) {\n      renderedValue = roundedValue;\n    }\n\n    this.setState({\n      value: roundedValue,\n      renderedValue: renderedValue\n    }, function () {\n      if (valueChanged && _this.props.onChange) {\n        _this.props.onChange(_this.state.value);\n      }\n    });\n  };\n\n  SliderBase.defaultProps = {\n    step: 1,\n    min: 0,\n    max: 10,\n    showValue: true,\n    disabled: false,\n    vertical: false,\n    buttonProps: {},\n    originFromZero: false\n  };\n  return SliderBase;\n}(React.Component);\n\nexport { SliderBase };","map":null,"metadata":{},"sourceType":"module"}