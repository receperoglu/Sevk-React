{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\n\nexport function mergeSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nexport function mergeScopedSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings) {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings) {\n  return function (settings) {\n    return newSettings ? __assign(__assign({}, settings), newSettings) : settings;\n  };\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n  if (scopedSettingsFromProps === void 0) {\n    scopedSettingsFromProps = {};\n  }\n\n  return function (oldScopedSettings) {\n    var newScopedSettings = __assign({}, oldScopedSettings);\n\n    for (var scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n      }\n    }\n\n    return newScopedSettings;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}