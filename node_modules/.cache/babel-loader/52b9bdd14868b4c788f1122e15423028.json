{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizer, getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, FocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function getDir(theme, dir) {\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nvar FabricBase =\n/** @class */\nfunction (_super) {\n  __extends(FabricBase, _super);\n\n  function FabricBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._rootElement = React.createRef();\n    _this._removeClassNameFromBody = undefined;\n    return _this;\n  }\n\n  FabricBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.as,\n        Root = _b === void 0 ? 'div' : _b,\n        theme = _a.theme,\n        dir = _a.dir;\n\n    var classNames = this._getClassNames();\n\n    var divProps = getNativeProps(this.props, divProperties, ['dir']);\n\n    var _c = getDir(theme, dir),\n        rootDir = _c.rootDir,\n        needsTheme = _c.needsTheme;\n\n    var renderedContent = React.createElement(Root, __assign({\n      dir: rootDir\n    }, divProps, {\n      className: classNames.root,\n      ref: this._rootElement\n    }));\n\n    if (needsTheme) {\n      renderedContent = React.createElement(Customizer, {\n        settings: {\n          theme: getFabricTheme(theme, dir === 'rtl')\n        }\n      }, renderedContent);\n    }\n\n    return React.createElement(React.Fragment, null, renderedContent, React.createElement(FocusRects, {\n      rootRef: this._rootElement\n    }));\n  };\n\n  FabricBase.prototype.componentDidMount = function () {\n    this._addClassNameToBody();\n  };\n\n  FabricBase.prototype.componentWillUnmount = function () {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  };\n\n  FabricBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        applyTheme = _a.applyTheme,\n        styles = _a.styles;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      applyTheme: applyTheme,\n      className: className\n    });\n    return classNames;\n  };\n\n  FabricBase.prototype._addClassNameToBody = function () {\n    if (this.props.applyThemeToBody) {\n      var classNames_1 = this._getClassNames();\n\n      var currentDoc_1 = getDocument(this._rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(classNames_1.bodyThemed);\n\n        this._removeClassNameFromBody = function () {\n          currentDoc_1.body.classList.remove(classNames_1.bodyThemed);\n        };\n      }\n    }\n  };\n\n  return FabricBase;\n}(React.Component);\n\nexport { FabricBase };","map":null,"metadata":{},"sourceType":"module"}