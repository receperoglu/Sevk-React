{"ast":null,"code":"/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport var ColumnActionsMode;\n\n(function (ColumnActionsMode) {\n  /** Renders the column header as disabled. */\n  ColumnActionsMode[ColumnActionsMode[\"disabled\"] = 0] = \"disabled\";\n  /** Renders the column header as clickable. Default value. */\n\n  ColumnActionsMode[ColumnActionsMode[\"clickable\"] = 1] = \"clickable\";\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n\n  ColumnActionsMode[ColumnActionsMode[\"hasDropdown\"] = 2] = \"hasDropdown\";\n})(ColumnActionsMode || (ColumnActionsMode = {}));\n/**\n * {@docCategory DetailsList}\n */\n\n\nexport var ConstrainMode;\n\n(function (ConstrainMode) {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  ConstrainMode[ConstrainMode[\"unconstrained\"] = 0] = \"unconstrained\";\n  /** Constrains the list to the given layout space. */\n\n  ConstrainMode[ConstrainMode[\"horizontalConstrained\"] = 1] = \"horizontalConstrained\";\n})(ConstrainMode || (ConstrainMode = {}));\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\n\n\nexport var ColumnDragEndLocation;\n\n(function (ColumnDragEndLocation) {\n  /** Drag ended outside of current list */\n  ColumnDragEndLocation[ColumnDragEndLocation[\"outside\"] = 0] = \"outside\";\n  /** Drag ended within current list */\n\n  ColumnDragEndLocation[ColumnDragEndLocation[\"surface\"] = 1] = \"surface\";\n  /** Drag ended on header */\n\n  ColumnDragEndLocation[ColumnDragEndLocation[\"header\"] = 2] = \"header\";\n})(ColumnDragEndLocation || (ColumnDragEndLocation = {}));\n/**\n * {@docCategory DetailsList}\n */\n\n\nexport var DetailsListLayoutMode;\n\n(function (DetailsListLayoutMode) {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  DetailsListLayoutMode[DetailsListLayoutMode[\"fixedColumns\"] = 0] = \"fixedColumns\";\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n\n  DetailsListLayoutMode[DetailsListLayoutMode[\"justified\"] = 1] = \"justified\";\n})(DetailsListLayoutMode || (DetailsListLayoutMode = {}));\n/**\n * {@docCategory DetailsList}\n */\n\n\nexport var CheckboxVisibility;\n\n(function (CheckboxVisibility) {\n  /** Visible on hover. */\n  CheckboxVisibility[CheckboxVisibility[\"onHover\"] = 0] = \"onHover\";\n  /** Visible always. */\n\n  CheckboxVisibility[CheckboxVisibility[\"always\"] = 1] = \"always\";\n  /** Hide checkboxes. */\n\n  CheckboxVisibility[CheckboxVisibility[\"hidden\"] = 2] = \"hidden\";\n})(CheckboxVisibility || (CheckboxVisibility = {}));","map":null,"metadata":{},"sourceType":"module"}