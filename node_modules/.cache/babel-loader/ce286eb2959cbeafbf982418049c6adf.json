{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { getGlobalClassNames, HighContrastSelector, AnimationVariables, getFocusStyle, getEdgeChromiumNoHighContrastAdjustSelector } from '../../Styling';\nimport { getRTL } from '@uifabric/utilities';\nvar GlobalClassNames = {\n  root: 'ms-Slider',\n  enabled: 'ms-Slider-enabled',\n  disabled: 'ms-Slider-disabled',\n  row: 'ms-Slider-row',\n  column: 'ms-Slider-column',\n  container: 'ms-Slider-container',\n  slideBox: 'ms-Slider-slideBox',\n  line: 'ms-Slider-line',\n  thumb: 'ms-Slider-thumb',\n  activeSection: 'ms-Slider-active',\n  inactiveSection: 'ms-Slider-inactive',\n  valueLabel: 'ms-Slider-value',\n  showValue: 'ms-Slider-showValue',\n  showTransitions: 'ms-Slider-showTransitions',\n  zeroTick: 'ms-Slider-zeroTick'\n};\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n  var className = props.className,\n      titleLabelClassName = props.titleLabelClassName,\n      theme = props.theme,\n      vertical = props.vertical,\n      disabled = props.disabled,\n      showTransitions = props.showTransitions,\n      showValue = props.showValue;\n  var semanticColors = theme.semanticColors;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  /** Tokens:\n   *   The word \"active\" in the token refers to the selected section of the slider\n   *   The word \"inactive\" in the token refers to the unselected section of the slider */\n\n  var pressedActiveSectionColor = semanticColors.inputBackgroundCheckedHovered;\n  var hoveredActiveSectionColor = semanticColors.inputBackgroundChecked;\n  var hoveredPressedinactiveSectionColor = semanticColors.inputPlaceholderBackgroundChecked;\n  var restActiveSectionColor = semanticColors.smallInputBorder;\n  var restInactiveSectionColor = semanticColors.disabledBorder;\n  var disabledActiveSectionColor = semanticColors.disabledText;\n  var disabledInactiveSectionColor = semanticColors.disabledBackground;\n  var thumbBackgroundColor = semanticColors.inputBackground;\n  var thumbBorderColor = semanticColors.smallInputBorder;\n  var thumbDisabledBorderColor = semanticColors.disabledBorder;\n  var slideBoxActiveSectionStyles = !disabled && {\n    backgroundColor: pressedActiveSectionColor,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      backgroundColor: 'Highlight'\n    }, _a)\n  };\n  var slideBoxInactiveSectionStyles = !disabled && {\n    backgroundColor: hoveredPressedinactiveSectionColor,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _b)\n  };\n  var slideHoverSectionStyles = !disabled && {\n    backgroundColor: hoveredActiveSectionColor,\n    selectors: (_c = {}, _c[HighContrastSelector] = {\n      backgroundColor: 'Highlight'\n    }, _c)\n  };\n  var slideBoxActiveThumbStyles = !disabled && {\n    border: \"2px solid \" + pressedActiveSectionColor,\n    selectors: (_d = {}, _d[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _d)\n  };\n  var slideBoxActiveZeroTickStyles = !props.disabled && {\n    backgroundColor: semanticColors.inputPlaceholderBackgroundChecked,\n    selectors: (_e = {}, _e[HighContrastSelector] = {\n      backgroundColor: 'Highlight'\n    }, _e)\n  };\n  return {\n    root: __spreadArrays([classNames.root, theme.fonts.medium, {\n      userSelect: 'none'\n    }, vertical && {\n      marginRight: 8\n    }], [!disabled ? classNames.enabled : undefined], [disabled ? classNames.disabled : undefined], [!vertical ? classNames.row : undefined], [vertical ? classNames.column : undefined], [className]),\n    titleLabel: [{\n      padding: 0\n    }, titleLabelClassName],\n    container: [classNames.container, {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      alignItems: 'center'\n    }, vertical && {\n      flexDirection: 'column',\n      height: '100%',\n      textAlign: 'center',\n      margin: '8px 0'\n    }],\n    slideBox: __spreadArrays([classNames.slideBox, getFocusStyle(theme), {\n      background: 'transparent',\n      border: 'none',\n      flexGrow: 1,\n      lineHeight: 28,\n      display: 'flex',\n      alignItems: 'center',\n      selectors: __assign((_f = {}, _f[\":active .\" + classNames.activeSection] = slideBoxActiveSectionStyles, _f[\":hover .\" + classNames.activeSection] = slideHoverSectionStyles, _f[\":active .\" + classNames.inactiveSection] = slideBoxInactiveSectionStyles, _f[\":hover .\" + classNames.inactiveSection] = slideBoxInactiveSectionStyles, _f[\":active .\" + classNames.thumb] = slideBoxActiveThumbStyles, _f[\":hover .\" + classNames.thumb] = slideBoxActiveThumbStyles, _f[\":active .\" + classNames.zeroTick] = slideBoxActiveZeroTickStyles, _f[\":hover .\" + classNames.zeroTick] = slideBoxActiveZeroTickStyles, _f), getEdgeChromiumNoHighContrastAdjustSelector())\n    }, vertical ? {\n      height: '100%',\n      width: 28,\n      padding: '8px 0'\n    } : {\n      height: 28,\n      width: 'auto',\n      padding: '0 8px'\n    }], [showValue ? classNames.showValue : undefined], [showTransitions ? classNames.showTransitions : undefined]),\n    thumb: [classNames.thumb, {\n      borderWidth: 2,\n      borderStyle: 'solid',\n      borderColor: thumbBorderColor,\n      borderRadius: 10,\n      boxSizing: 'border-box',\n      background: thumbBackgroundColor,\n      display: 'block',\n      width: 16,\n      height: 16,\n      position: 'absolute'\n    }, vertical ? {\n      left: -6,\n      margin: '0 auto',\n      transform: 'translateY(8px)'\n    } : {\n      top: -6,\n      transform: getRTL(theme) ? 'translateX(50%)' : 'translateX(-50%)'\n    }, showTransitions && {\n      transition: \"left \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n    }, disabled && {\n      borderColor: thumbDisabledBorderColor,\n      selectors: (_g = {}, _g[HighContrastSelector] = {\n        borderColor: 'GrayText'\n      }, _g)\n    }],\n    line: [classNames.line, {\n      display: 'flex',\n      position: 'relative'\n    }, vertical ? {\n      height: '100%',\n      width: 4,\n      margin: '0 auto',\n      flexDirection: 'column-reverse'\n    } : {\n      width: '100%'\n    }],\n    lineContainer: [{\n      borderRadius: 4,\n      boxSizing: 'border-box'\n    }, vertical ? {\n      width: 4,\n      height: '100%'\n    } : {\n      height: 4,\n      width: '100%'\n    }],\n    activeSection: [classNames.activeSection, {\n      background: restActiveSectionColor,\n      selectors: (_h = {}, _h[HighContrastSelector] = {\n        backgroundColor: 'WindowText'\n      }, _h)\n    }, showTransitions && {\n      transition: \"width \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n    }, disabled && {\n      background: disabledActiveSectionColor,\n      selectors: (_j = {}, _j[HighContrastSelector] = {\n        backgroundColor: 'GrayText',\n        borderColor: 'GrayText'\n      }, _j)\n    }],\n    inactiveSection: [classNames.inactiveSection, {\n      background: restInactiveSectionColor,\n      selectors: (_k = {}, _k[HighContrastSelector] = {\n        border: '1px solid WindowText'\n      }, _k)\n    }, showTransitions && {\n      transition: \"width \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n    }, disabled && {\n      background: disabledInactiveSectionColor,\n      selectors: (_l = {}, _l[HighContrastSelector] = {\n        borderColor: 'GrayText'\n      }, _l)\n    }],\n    zeroTick: [classNames.zeroTick, {\n      position: 'absolute',\n      background: semanticColors.disabledBorder,\n      selectors: (_m = {}, _m[HighContrastSelector] = {\n        backgroundColor: 'WindowText'\n      }, _m)\n    }, props.disabled && {\n      background: semanticColors.disabledBackground,\n      selectors: (_o = {}, _o[HighContrastSelector] = {\n        backgroundColor: 'GrayText'\n      }, _o)\n    }, props.vertical ? {\n      width: '16px',\n      height: '1px',\n      transform: getRTL(theme) ? 'translateX(6px)' : 'translateX(-6px)'\n    } : {\n      width: '1px',\n      height: '16px',\n      transform: 'translateY(-6px)'\n    }],\n    valueLabel: [classNames.valueLabel, {\n      flexShrink: 1,\n      width: 30,\n      lineHeight: '1'\n    }, vertical ? {\n      margin: '0 auto',\n      whiteSpace: 'nowrap',\n      width: 40\n    } : {\n      margin: '0 8px',\n      whiteSpace: 'nowrap',\n      width: 40\n    }]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}