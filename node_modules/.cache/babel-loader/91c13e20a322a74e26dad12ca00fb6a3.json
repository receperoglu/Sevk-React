{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar getClassNames = classNamesFunction();\nvar TRANSITION_DURATION_DRAG = 200; // ms\n\nvar TRANSITION_DURATION_DROP = 1500; // ms\n\nvar CLASSNAME_ADD_INTERVAL = 20; // ms\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\nvar DetailsColumnBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsColumnBase, _super);\n\n  function DetailsColumnBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n\n    _this._onColumnClick = function (ev) {\n      var _a = _this.props,\n          onColumnClick = _a.onColumnClick,\n          column = _a.column;\n\n      if (column.columnActionsMode === ColumnActionsMode.disabled) {\n        return;\n      }\n\n      if (column.onColumnClick) {\n        column.onColumnClick(ev, column);\n      }\n\n      if (onColumnClick) {\n        onColumnClick(ev, column);\n      }\n    };\n\n    _this._onDragStart = function (item, itemIndex, selectedItems, event) {\n      var classNames = _this._classNames;\n\n      if (itemIndex) {\n        _this._updateHeaderDragInfo(itemIndex);\n\n        _this._root.current.classList.add(classNames.borderWhileDragging);\n\n        _this._async.setTimeout(function () {\n          if (_this._root.current) {\n            _this._root.current.classList.add(classNames.noBorderWhileDragging);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n    };\n\n    _this._onDragEnd = function (item, event) {\n      var classNames = _this._classNames;\n\n      if (event) {\n        _this._updateHeaderDragInfo(-1, event);\n      }\n\n      _this._root.current.classList.remove(classNames.borderWhileDragging);\n\n      _this._root.current.classList.remove(classNames.noBorderWhileDragging);\n    };\n\n    _this._updateHeaderDragInfo = function (itemIndex, event) {\n      /* eslint-disable deprecation/deprecation */\n      if (_this.props.setDraggedItemIndex) {\n        _this.props.setDraggedItemIndex(itemIndex);\n      }\n      /* eslint-enable deprecation/deprecation */\n\n\n      if (_this.props.updateDragInfo) {\n        _this.props.updateDragInfo({\n          itemIndex: itemIndex\n        }, event);\n      }\n    };\n\n    _this._onColumnContextMenu = function (ev) {\n      var _a = _this.props,\n          onColumnContextMenu = _a.onColumnContextMenu,\n          column = _a.column;\n\n      if (column.onColumnContextMenu) {\n        column.onColumnContextMenu(column, ev);\n        ev.preventDefault();\n      }\n\n      if (onColumnContextMenu) {\n        onColumnContextMenu(column, ev);\n        ev.preventDefault();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var isDraggable = _this.props.isDraggable; // Ignore anything except the primary button.\n\n      if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n        ev.stopPropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n\n  DetailsColumnBase.prototype.render = function () {\n    var _a = this.props,\n        column = _a.column,\n        columnIndex = _a.columnIndex,\n        parentId = _a.parentId,\n        isDraggable = _a.isDraggable,\n        styles = _a.styles,\n        theme = _a.theme,\n        _b = _a.cellStyleProps,\n        cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b,\n        _c = _a.useFastIcons,\n        useFastIcons = _c === void 0 ? true : _c;\n    var _d = this.props.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps: cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      key: column.key,\n      ref: this._root,\n      role: 'columnheader',\n      \"aria-sort\": column.isSorted ? column.isSortedDescending ? 'descending' : 'ascending' : 'none',\n      \"aria-colindex\": columnIndex,\n      className: classNames.root,\n      \"data-is-draggable\": isDraggable,\n      draggable: isDraggable,\n      style: {\n        width: column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n      },\n      \"data-automationid\": 'ColumnsHeaderColumn',\n      \"data-item-key\": column.key\n    }, isDraggable && React.createElement(IconComponent, {\n      iconName: \"GripperBarVertical\",\n      className: classNames.gripperBarVerticalStyle\n    }), onRenderColumnHeaderTooltip({\n      hostClassName: classNames.cellTooltip,\n      id: parentId + \"-\" + column.key + \"-tooltip\",\n      setAriaDescribedBy: false,\n      column: column,\n      content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n      children: React.createElement(\"span\", {\n        id: parentId + \"-\" + column.key,\n        \"aria-label\": column.isIconOnly ? column.name : undefined,\n        \"aria-labelledby\": column.isIconOnly ? undefined : parentId + \"-\" + column.key + \"-name\",\n        className: classNames.cellTitle,\n        \"data-is-focusable\": column.columnActionsMode !== ColumnActionsMode.disabled,\n        role: column.columnActionsMode !== ColumnActionsMode.disabled && (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined) ? 'button' : undefined,\n        \"aria-describedby\": !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel() ? parentId + \"-\" + column.key + \"-tooltip\" : undefined,\n        onContextMenu: this._onColumnContextMenu,\n        onClick: this._onColumnClick,\n        \"aria-haspopup\": column.columnActionsMode === ColumnActionsMode.hasDropdown,\n        \"aria-expanded\": column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n      }, React.createElement(\"span\", {\n        id: parentId + \"-\" + column.key + \"-name\",\n        className: classNames.cellName\n      }, (column.iconName || column.iconClassName) && React.createElement(IconComponent, {\n        className: classNames.iconClassName,\n        iconName: column.iconName\n      }), column.isIconOnly ? React.createElement(\"span\", {\n        className: classNames.accessibleLabel\n      }, column.name) : column.name), column.isFiltered && React.createElement(IconComponent, {\n        className: classNames.nearIcon,\n        iconName: \"Filter\"\n      }), column.isSorted && React.createElement(IconComponent, {\n        className: classNames.sortIcon,\n        iconName: column.isSortedDescending ? 'SortDown' : 'SortUp'\n      }), column.isGrouped && React.createElement(IconComponent, {\n        className: classNames.nearIcon,\n        iconName: \"GroupedDescending\"\n      }), column.columnActionsMode === ColumnActionsMode.hasDropdown && !column.isIconOnly && React.createElement(IconComponent, {\n        \"aria-hidden\": true,\n        className: classNames.filterChevron,\n        iconName: \"ChevronDown\"\n      }))\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null);\n  };\n\n  DetailsColumnBase.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    var classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(function () {\n          if (_this._root.current) {\n            _this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(function () {\n        if (_this._root.current) {\n          _this._root.current.classList.remove(classNames.borderAfterDropping);\n\n          _this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  DetailsColumnBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n\n      delete this._dragDropSubscription;\n    }\n\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  DetailsColumnBase.prototype.componentDidUpdate = function () {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n\n      this._events.off(this._root.current, 'mousedown');\n\n      delete this._dragDropSubscription;\n    }\n  };\n\n  DetailsColumnBase.prototype._getColumnDragDropOptions = function () {\n    var _this = this;\n\n    var columnIndex = this.props.columnIndex;\n    var options = {\n      selectionIndex: columnIndex,\n      context: {\n        data: columnIndex,\n        index: columnIndex\n      },\n      canDrag: function canDrag() {\n        return _this.props.isDraggable;\n      },\n      canDrop: function canDrop() {\n        return false;\n      },\n      onDragStart: this._onDragStart,\n      updateDropState: function updateDropState() {\n        return undefined;\n      },\n      onDrop: function onDrop() {\n        return undefined;\n      },\n      onDragEnd: this._onDragEnd\n    };\n    return options;\n  };\n\n  DetailsColumnBase.prototype._hasAccessibleLabel = function () {\n    var column = this.props.column;\n    return !!(column.ariaLabel || column.filterAriaLabel || column.sortAscendingAriaLabel || column.sortDescendingAriaLabel || column.groupAriaLabel);\n  };\n\n  DetailsColumnBase.prototype._renderAccessibleLabel = function () {\n    var _a = this.props,\n        column = _a.column,\n        parentId = _a.parentId;\n    var classNames = this._classNames;\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? React.createElement(\"label\", {\n      key: column.key + \"_label\",\n      id: parentId + \"-\" + column.key + \"-tooltip\",\n      className: classNames.accessibleLabel\n    }, column.ariaLabel, column.isFiltered && column.filterAriaLabel || null, column.isSorted && (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel) || null, column.isGrouped && column.groupAriaLabel || null) : null;\n  };\n\n  DetailsColumnBase.prototype._addDragDropHandling = function () {\n    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions()); // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  };\n\n  return DetailsColumnBase;\n}(React.Component);\n\nexport { DetailsColumnBase };","map":null,"metadata":{},"sourceType":"module"}