{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\n\nexport function initializeFocusRects(window) {\n  var _a;\n\n  var win = window || getWindow();\n\n  if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown, true);\n  }\n}\n\nfunction _onMouseDown(ev) {\n  setFocusVisibility(false, ev.target);\n}\n\nfunction _onPointerDown(ev) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target);\n  }\n}\n\nfunction _onKeyDown(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target);\n}","map":null,"metadata":{},"sourceType":"module"}