{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\n\nvar Customizer =\n/** @class */\nfunction (_super) {\n  __extends(Customizer, _super);\n\n  function Customizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onCustomizationChange = function () {\n      return _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  Customizer.prototype.componentDidMount = function () {\n    Customizations.observe(this._onCustomizationChange);\n  };\n\n  Customizer.prototype.componentWillUnmount = function () {\n    Customizations.unobserve(this._onCustomizationChange);\n  };\n\n  Customizer.prototype.render = function () {\n    var _this = this;\n\n    var contextTransform = this.props.contextTransform;\n    return React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n      var newContext = mergeCustomizations(_this.props, parentContext);\n\n      if (contextTransform) {\n        newContext = contextTransform(newContext);\n      }\n\n      return React.createElement(CustomizerContext.Provider, {\n        value: newContext\n      }, _this.props.children);\n    });\n  };\n\n  return Customizer;\n}(React.Component);\n\nexport { Customizer };","map":null,"metadata":{},"sourceType":"module"}