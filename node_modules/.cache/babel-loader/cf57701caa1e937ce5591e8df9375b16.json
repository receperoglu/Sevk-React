{"ast":null,"code":"import { __assign } from \"tslib\";\n/** Generates all the semantic slot colors based on the theme so far\n * We'll use these as fallbacks for semantic slots that the passed in theme did not define.\n * The caller must still mix in the customized semantic slots at the end.\n */\n\nexport function makeSemanticColors(p, e, s, isInverted, depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  var semanticColors = __assign({\n    primaryButtonBorder: 'transparent',\n    errorText: !isInverted ? '#a4262c' : '#F1707B',\n    messageText: !isInverted ? '#323130' : '#F3F2F1',\n    messageLink: !isInverted ? '#005A9E' : '#6CB8F6',\n    messageLinkHovered: !isInverted ? '#004578' : '#82C7FF',\n    infoIcon: !isInverted ? '#605e5c' : '#C8C6C4',\n    errorIcon: !isInverted ? '#A80000' : '#F1707B',\n    blockingIcon: !isInverted ? '#FDE7E9' : '#442726',\n    warningIcon: !isInverted ? '#797775' : '#C8C6C4',\n    severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100',\n    successIcon: !isInverted ? '#107C10' : '#92C353',\n    infoBackground: !isInverted ? '#f3f2f1' : '#323130',\n    errorBackground: !isInverted ? '#FDE7E9' : '#442726',\n    blockingBackground: !isInverted ? '#FDE7E9' : '#442726',\n    warningBackground: !isInverted ? '#FFF4CE' : '#433519',\n    severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F',\n    successBackground: !isInverted ? '#DFF6DD' : '#393D1B',\n    // deprecated\n    warningHighlight: !isInverted ? '#ffb900' : '#fff100',\n    successText: !isInverted ? '#107C10' : '#92c353'\n  }, s);\n\n  var fullSemanticColors = getSemanticColors(p, e, semanticColors, isInverted);\n  return _fixDeprecatedSlots(fullSemanticColors, depComments);\n}\n/**\n * Map partial platte and effects to partial semantic colors.\n */\n\nexport function getSemanticColors(p, e, s, isInverted, depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  var _a, _b, _c;\n\n  var result = {}; // map palette\n\n  var _d = p || {},\n      white = _d.white,\n      black = _d.black,\n      themePrimary = _d.themePrimary,\n      themeDark = _d.themeDark,\n      themeDarker = _d.themeDarker,\n      themeDarkAlt = _d.themeDarkAlt,\n      themeLighter = _d.themeLighter,\n      neutralLight = _d.neutralLight,\n      neutralLighter = _d.neutralLighter,\n      neutralDark = _d.neutralDark,\n      neutralQuaternary = _d.neutralQuaternary,\n      neutralQuaternaryAlt = _d.neutralQuaternaryAlt,\n      neutralPrimary = _d.neutralPrimary,\n      neutralSecondary = _d.neutralSecondary,\n      neutralSecondaryAlt = _d.neutralSecondaryAlt,\n      neutralTertiary = _d.neutralTertiary,\n      neutralTertiaryAlt = _d.neutralTertiaryAlt,\n      neutralLighterAlt = _d.neutralLighterAlt,\n      accent = _d.accent;\n\n  if (white) {\n    result.bodyBackground = white;\n    result.bodyFrameBackground = white;\n    result.accentButtonText = white;\n    result.buttonBackground = white;\n    result.primaryButtonText = white;\n    result.primaryButtonTextHovered = white;\n    result.primaryButtonTextPressed = white;\n    result.inputBackground = white;\n    result.inputForegroundChecked = white;\n    result.listBackground = white;\n    result.menuBackground = white;\n    result.cardStandoutBackground = white;\n  }\n\n  if (black) {\n    result.bodyTextChecked = black;\n    result.buttonTextCheckedHovered = black;\n  }\n\n  if (themePrimary) {\n    result.link = themePrimary;\n    result.primaryButtonBackground = themePrimary;\n    result.inputBackgroundChecked = themePrimary;\n    result.inputIcon = themePrimary;\n    result.inputFocusBorderAlt = themePrimary;\n    result.menuIcon = themePrimary;\n    result.menuHeader = themePrimary;\n    result.accentButtonBackground = themePrimary;\n  }\n\n  if (themeDark) {\n    result.primaryButtonBackgroundPressed = themeDark;\n    result.inputBackgroundCheckedHovered = themeDark;\n    result.inputIconHovered = themeDark;\n  }\n\n  if (themeDarker) {\n    result.linkHovered = themeDarker;\n  }\n\n  if (themeDarkAlt) {\n    result.primaryButtonBackgroundHovered = themeDarkAlt;\n  }\n\n  if (themeLighter) {\n    result.inputPlaceholderBackgroundChecked = themeLighter;\n  }\n\n  if (neutralLight) {\n    result.bodyBackgroundChecked = neutralLight;\n    result.bodyFrameDivider = neutralLight;\n    result.bodyDivider = neutralLight;\n    result.variantBorder = neutralLight;\n    result.buttonBackgroundCheckedHovered = neutralLight;\n    result.buttonBackgroundPressed = neutralLight;\n    result.listItemBackgroundChecked = neutralLight;\n    result.listHeaderBackgroundPressed = neutralLight;\n    result.menuItemBackgroundPressed = neutralLight; // eslint-disable-next-line deprecation/deprecation\n\n    result.menuItemBackgroundChecked = neutralLight;\n  }\n\n  if (neutralLighter) {\n    result.bodyBackgroundHovered = neutralLighter;\n    result.buttonBackgroundHovered = neutralLighter;\n    result.buttonBackgroundDisabled = neutralLighter;\n    result.buttonBorderDisabled = neutralLighter;\n    result.primaryButtonBackgroundDisabled = neutralLighter;\n    result.disabledBackground = neutralLighter;\n    result.listItemBackgroundHovered = neutralLighter;\n    result.listHeaderBackgroundHovered = neutralLighter;\n    result.menuItemBackgroundHovered = neutralLighter;\n  }\n\n  if (neutralQuaternary) {\n    result.primaryButtonTextDisabled = neutralQuaternary;\n    result.disabledSubtext = neutralQuaternary;\n  }\n\n  if (neutralQuaternaryAlt) {\n    result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;\n  }\n\n  if (neutralTertiary) {\n    result.disabledBodyText = neutralTertiary;\n    result.variantBorderHovered = ((_a = s) === null || _a === void 0 ? void 0 : _a.variantBorderHovered) || neutralTertiary;\n    result.buttonTextDisabled = neutralTertiary;\n    result.inputIconDisabled = neutralTertiary;\n    result.disabledText = neutralTertiary;\n  }\n\n  if (neutralPrimary) {\n    result.bodyText = neutralPrimary;\n    result.actionLink = neutralPrimary;\n    result.buttonText = neutralPrimary;\n    result.inputBorderHovered = neutralPrimary;\n    result.inputText = neutralPrimary;\n    result.listText = neutralPrimary;\n    result.menuItemText = neutralPrimary;\n  }\n\n  if (neutralLighterAlt) {\n    result.bodyStandoutBackground = neutralLighterAlt;\n    result.defaultStateBackground = neutralLighterAlt;\n  }\n\n  if (neutralDark) {\n    result.actionLinkHovered = neutralDark;\n    result.buttonTextHovered = neutralDark;\n    result.buttonTextChecked = neutralDark;\n    result.buttonTextPressed = neutralDark;\n    result.inputTextHovered = neutralDark;\n    result.menuItemTextHovered = neutralDark;\n  }\n\n  if (neutralSecondary) {\n    result.bodySubtext = neutralSecondary;\n    result.focusBorder = neutralSecondary;\n    result.inputBorder = neutralSecondary;\n    result.smallInputBorder = neutralSecondary;\n    result.inputPlaceholderText = neutralSecondary;\n  }\n\n  if (neutralSecondaryAlt) {\n    result.buttonBorder = neutralSecondaryAlt;\n  }\n\n  if (neutralTertiaryAlt) {\n    result.disabledBodySubtext = neutralTertiaryAlt;\n    result.disabledBorder = neutralTertiaryAlt;\n    result.buttonBackgroundChecked = neutralTertiaryAlt;\n    result.menuDivider = neutralTertiaryAlt;\n  }\n\n  if (accent) {\n    result.accentButtonBackground = accent;\n  } // map effects\n\n\n  if ((_b = e) === null || _b === void 0 ? void 0 : _b.elevation4) {\n    result.cardShadow = e.elevation4;\n  }\n\n  if (!isInverted && ((_c = e) === null || _c === void 0 ? void 0 : _c.elevation8)) {\n    result.cardShadowHovered = e.elevation8;\n  } else if (result.variantBorderHovered) {\n    result.cardShadowHovered = '0 0 1px ' + result.variantBorderHovered;\n  }\n\n  result = __assign(__assign({}, result), s);\n  return result;\n}\n\nfunction _fixDeprecatedSlots(s, depComments) {\n  // Add @deprecated tag as comment if enabled\n  var dep = '';\n\n  if (depComments === true) {\n    dep = ' /* @deprecated */';\n  }\n  /* eslint-disable deprecation/deprecation */\n\n\n  s.listTextColor = s.listText + dep;\n  s.menuItemBackgroundChecked += dep;\n  s.warningHighlight += dep;\n  s.warningText = s.messageText + dep;\n  s.successText += dep;\n  /* eslint-enable deprecation/deprecation */\n\n  return s;\n}","map":null,"metadata":{},"sourceType":"module"}