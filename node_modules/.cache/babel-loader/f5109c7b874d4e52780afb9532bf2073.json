{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Fabric } from '../../Fabric';\nimport { classNamesFunction, customizable, getDocument, setPortalAttribute, setVirtualParent, warnDeprecations } from '../../Utilities';\nimport { registerLayer, getDefaultTarget, unregisterLayer } from './Layer.notification';\nvar getClassNames = classNamesFunction();\n\nvar LayerBase =\n/** @class */\nfunction (_super) {\n  __extends(LayerBase, _super);\n\n  function LayerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootRef = React.createRef();\n\n    _this._createLayerElement = function () {\n      var hostId = _this.props.hostId;\n      var doc = getDocument(_this._rootRef.current);\n\n      var host = _this._getHost();\n\n      if (!doc || !host) {\n        return;\n      } // If one was already existing, remove.\n\n\n      _this._removeLayerElement();\n\n      var layerElement = doc.createElement('div');\n\n      var classNames = _this._getClassNames();\n\n      layerElement.className = classNames.root;\n      setPortalAttribute(layerElement);\n      setVirtualParent(layerElement, _this._rootRef.current);\n      _this.props.insertFirst ? host.insertBefore(layerElement, host.firstChild) : host.appendChild(layerElement);\n\n      _this.setState({\n        hostId: hostId,\n        layerElement: layerElement\n      }, function () {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = _this.props,\n            onLayerDidMount = _a.onLayerDidMount,\n            onLayerMounted = _a.onLayerMounted;\n\n        if (onLayerMounted) {\n          onLayerMounted();\n        }\n\n        if (onLayerDidMount) {\n          onLayerDidMount();\n        }\n      });\n    };\n\n    _this.state = {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Layer', props, {\n        onLayerMounted: 'onLayerDidMount'\n      });\n    }\n\n    return _this;\n  }\n\n  LayerBase.prototype.componentDidMount = function () {\n    var hostId = this.props.hostId;\n\n    this._createLayerElement();\n\n    if (hostId) {\n      registerLayer(hostId, this._createLayerElement);\n    }\n  };\n\n  LayerBase.prototype.render = function () {\n    var layerElement = this.state.layerElement;\n\n    var classNames = this._getClassNames();\n\n    var eventBubblingEnabled = this.props.eventBubblingEnabled;\n    return React.createElement(\"span\", {\n      className: \"ms-layer\",\n      ref: this._rootRef\n    }, layerElement && ReactDOM.createPortal(React.createElement(Fabric, __assign({}, !eventBubblingEnabled && _getFilteredEvents(), {\n      className: classNames.content\n    }), this.props.children), layerElement));\n  };\n\n  LayerBase.prototype.componentDidUpdate = function () {\n    if (this.props.hostId !== this.state.hostId) {\n      this._createLayerElement();\n    }\n  };\n\n  LayerBase.prototype.componentWillUnmount = function () {\n    var hostId = this.props.hostId;\n\n    this._removeLayerElement();\n\n    if (hostId) {\n      unregisterLayer(hostId, this._createLayerElement);\n    }\n  };\n\n  LayerBase.prototype._removeLayerElement = function () {\n    var onLayerWillUnmount = this.props.onLayerWillUnmount;\n    var layerElement = this.state.layerElement;\n\n    if (layerElement) {\n      setVirtualParent(layerElement, null);\n    }\n\n    if (onLayerWillUnmount) {\n      onLayerWillUnmount();\n    }\n\n    if (layerElement && layerElement.parentNode) {\n      var parentNode = layerElement.parentNode;\n\n      if (parentNode) {\n        parentNode.removeChild(layerElement);\n      }\n    }\n  };\n\n  LayerBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        className = _a.className,\n        styles = _a.styles,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isNotHost: !this.props.hostId\n    });\n    return classNames;\n  };\n\n  LayerBase.prototype._getHost = function () {\n    var hostId = this.props.hostId;\n    var doc = getDocument(this._rootRef.current);\n\n    if (!doc) {\n      return undefined;\n    }\n\n    if (hostId) {\n      return doc.getElementById(hostId);\n    } else {\n      var defaultHostSelector = getDefaultTarget();\n      return defaultHostSelector ? doc.querySelector(defaultHostSelector) : doc.body;\n    }\n  };\n\n  LayerBase.defaultProps = {\n    onLayerDidMount: function onLayerDidMount() {\n      return undefined;\n    },\n    onLayerWillUnmount: function onLayerWillUnmount() {\n      return undefined;\n    }\n  };\n  LayerBase = __decorate([customizable('Layer', ['theme', 'hostId'])], LayerBase);\n  return LayerBase;\n}(React.Component);\n\nexport { LayerBase };\n\nvar _onFilterEvent = function _onFilterEvent(ev) {\n  // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though\n  // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on\n  // event name rather than ev.bubble.\n  if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== 'mouseenter' && ev.type !== 'mouseleave' && ev.type !== 'touchstart' && ev.type !== 'touchend') {\n    ev.stopPropagation();\n  }\n};\n\nvar _filteredEventProps;\n\nfunction _getFilteredEvents() {\n  if (!_filteredEventProps) {\n    _filteredEventProps = {};\n    ['onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOver', 'onMouseOut', 'onMouseUp', 'onTouchMove', 'onTouchStart', 'onTouchCancel', 'onTouchEnd', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onFocus', 'onBlur', 'onChange', 'onInput', 'onInvalid', 'onSubmit'].forEach(function (name) {\n      return _filteredEventProps[name] = _onFilterEvent;\n    });\n  }\n\n  return _filteredEventProps;\n}","map":null,"metadata":{},"sourceType":"module"}