{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\n\n\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\n\n\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\n\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\n\n\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n\nvar now = function now() {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\n\nfunction measure(func) {\n  var start = now();\n  func();\n  var end = now();\n  _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\n\n\nfunction initializeThemeState() {\n  var state = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n\n  if (!state.runState) {\n    state = __assign(__assign({}, state), {\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: 0\n        /* sync */\n        ,\n        buffer: []\n      }\n    });\n  }\n\n  if (!state.registeredThemableStyles) {\n    state = __assign(__assign({}, state), {\n      registeredThemableStyles: []\n    });\n  }\n\n  _root.__themeState__ = state;\n  return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\n\n\nexport function loadStyles(styles, loadAsync) {\n  if (loadAsync === void 0) {\n    loadAsync = false;\n  }\n\n  measure(function () {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    var _a = _themeState.runState,\n        mode = _a.mode,\n        buffer = _a.buffer,\n        flushTimer = _a.flushTimer;\n\n    if (loadAsync || mode === 1\n    /* async */\n    ) {\n        buffer.push(styleParts);\n\n        if (!flushTimer) {\n          _themeState.runState.flushTimer = asyncLoadStyles();\n        }\n      } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\n\nexport function configureLoadStyles(loadStylesFn) {\n  _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\n\nexport function configureRunMode(mode) {\n  _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\n\nexport function flush() {\n  measure(function () {\n    var styleArrays = _themeState.runState.buffer.slice();\n\n    _themeState.runState.buffer = [];\n    var mergedStyleArray = [].concat.apply([], styleArrays);\n\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n/**\n * register async loadStyles\n */\n\nfunction asyncLoadStyles() {\n  return setTimeout(function () {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\n\n\nfunction applyThemableStyles(stylesArray, styleRecord) {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\n\n\nexport function loadTheme(theme) {\n  _themeState.theme = theme; // reload styles.\n\n  reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\n\nexport function clearStyles(option) {\n  if (option === void 0) {\n    option = 3\n    /* all */\n    ;\n  }\n\n  if (option === 3\n  /* all */\n  || option === 2\n  /* onlyNonThemable */\n  ) {\n      clearStylesInternal(_themeState.registeredStyles);\n      _themeState.registeredStyles = [];\n    }\n\n  if (option === 3\n  /* all */\n  || option === 1\n  /* onlyThemable */\n  ) {\n      clearStylesInternal(_themeState.registeredThemableStyles);\n      _themeState.registeredThemableStyles = [];\n    }\n}\n\nfunction clearStylesInternal(records) {\n  records.forEach(function (styleRecord) {\n    var styleElement = styleRecord && styleRecord.styleElement;\n\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n/**\n * Reloads styles.\n */\n\n\nfunction reloadStyles() {\n  if (_themeState.theme) {\n    var themableStyles = [];\n\n    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n      var styleRecord = _a[_i];\n      themableStyles.push(styleRecord.themableStyle);\n    }\n\n    if (themableStyles.length > 0) {\n      clearStyles(1\n      /* onlyThemable */\n      );\n      applyThemableStyles([].concat.apply([], themableStyles));\n    }\n  }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\n\n\nexport function detokenize(styles) {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n\n  return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\n\nfunction resolveThemableArray(splitStyleArray) {\n  var theme = _themeState.theme;\n  var themable = false; // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n\n  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n    var themeSlot = currentValue.theme;\n\n    if (themeSlot) {\n      themable = true; // A theming annotation. Resolve it.\n\n      var themedValue = theme ? theme[themeSlot] : undefined;\n      var defaultValue = currentValue.defaultValue || 'inherit'; // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n      // Allow the themedValue to be undefined to explicitly request the default value.\n\n      if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== 'undefined' && DEBUG) {\n        console.warn(\"Theming value not provided for \\\"\" + themeSlot + \"\\\". Falling back to \\\"\" + defaultValue + \"\\\".\");\n      }\n\n      return themedValue || defaultValue;\n    } else {\n      // A non-themable string. Preserve it.\n      return currentValue.rawString;\n    }\n  });\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\n\n\nexport function splitStyles(styles) {\n  var result = [];\n\n  if (styles) {\n    var pos = 0; // Current position in styles.\n\n    var tokenMatch = void 0;\n\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      var matchIndex = tokenMatch.index;\n\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n\n      }); // index of the first character after the current match\n\n      pos = _themeTokenRegex.lastIndex;\n    } // Push the rest of the string after the last match.\n\n\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\n\nfunction registerStyles(styleArray) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.getElementsByTagName('head')[0];\n  var styleElement = document.createElement('style');\n\n  var _a = resolveThemableArray(styleArray),\n      styleString = _a.styleString,\n      themable = _a.themable;\n\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n  var ev = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true\n  /* bubbleEvent */\n  , false\n  /* cancelable */\n  );\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n  var record = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}