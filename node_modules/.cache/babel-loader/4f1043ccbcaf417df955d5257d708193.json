{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async } from './Async';\nimport { EventGroup } from './EventGroup';\nimport { warnConditionallyRequiredProps } from './warn/warnConditionallyRequiredProps';\nimport { warnMutuallyExclusive } from './warn/warnMutuallyExclusive';\nimport { warnDeprecations } from './warn/warnDeprecations';\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\n\nvar BaseComponent =\n/** @class */\nfunction (_super) {\n  __extends(BaseComponent, _super);\n  /**\n   * BaseComponent constructor\n   * @param props - The props for the component.\n   * @param context - The context for the component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  function BaseComponent(props, context) {\n    var _this = _super.call(this, props, context) || this; // eslint-disable-next-line deprecation/deprecation\n\n\n    _makeAllSafe(_this, BaseComponent.prototype, ['componentDidMount', 'shouldComponentUpdate', 'getSnapshotBeforeUpdate', 'render', 'componentDidUpdate', 'componentWillUnmount']);\n\n    return _this;\n  }\n  /**\n   * When the component receives props, make sure the componentRef is updated.\n   */\n\n\n  BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._updateComponentRef(prevProps, this.props);\n  };\n  /**\n   * When the component has mounted, update the componentRef.\n   */\n\n\n  BaseComponent.prototype.componentDidMount = function () {\n    this._setComponentRef(this.props.componentRef, this);\n  };\n  /**\n   * If we have disposables, dispose them automatically on unmount.\n   */\n\n\n  BaseComponent.prototype.componentWillUnmount = function () {\n    this._setComponentRef(this.props.componentRef, null);\n\n    if (this.__disposables) {\n      for (var i = 0, len = this._disposables.length; i < len; i++) {\n        var disposable = this.__disposables[i];\n\n        if (disposable.dispose) {\n          disposable.dispose();\n        }\n      }\n\n      this.__disposables = null;\n    }\n  };\n\n  Object.defineProperty(BaseComponent.prototype, \"className\", {\n    /**\n     * Gets the object's class name.\n     */\n    get: function get() {\n      if (!this.__className) {\n        var funcNameRegex = /function (.{1,})\\(/;\n        var results = funcNameRegex.exec(this.constructor.toString());\n        this.__className = results && results.length > 1 ? results[1] : '';\n      }\n\n      return this.__className;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_disposables\", {\n    /**\n     * Allows subclasses to push things to this._disposables to be auto disposed.\n     */\n    get: function get() {\n      if (!this.__disposables) {\n        this.__disposables = [];\n      }\n\n      return this.__disposables;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_async\", {\n    /**\n     * Gets the async instance associated with the component, created on demand. The async instance gives\n     * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n     * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n     * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n     */\n    get: function get() {\n      if (!this.__async) {\n        this.__async = new Async(this);\n\n        this._disposables.push(this.__async);\n      }\n\n      return this.__async;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_events\", {\n    /**\n     * Gets the event group instance assocaited with the component, created on demand. The event instance\n     * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n     * will be automatically disconnected after unmounting. The helpers within the events object also\n     * preserve the this reference so that you don't need to \"bind\" the callbacks.\n     */\n    get: function get() {\n      if (!this.__events) {\n        this.__events = new EventGroup(this);\n\n        this._disposables.push(this.__events);\n      }\n\n      return this.__events;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Helper to return a memoized ref resolver function.\n   * @param refName - Name of the member to assign the ref to.\n   * @returns A function instance keyed from the given refname.\n   * @deprecated Use `createRef` from React.createRef.\n   */\n\n  BaseComponent.prototype._resolveRef = function (refName) {\n    var _this = this;\n\n    if (!this.__resolves) {\n      this.__resolves = {};\n    }\n\n    if (!this.__resolves[refName]) {\n      this.__resolves[refName] = function (ref) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return _this[refName] = ref;\n      };\n    }\n\n    return this.__resolves[refName];\n  };\n  /**\n   * Updates the componentRef (by calling it with \"this\" when necessary.)\n   */\n\n\n  BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {\n    if (newProps === void 0) {\n      newProps = {};\n    } // currentProps *should* always be defined, but verify that just in case a subclass is manually\n    // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n\n\n    if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n      this._setComponentRef(currentProps.componentRef, null);\n\n      this._setComponentRef(newProps.componentRef, this);\n    }\n  };\n  /**\n   * Warns when a deprecated props are being used.\n   *\n   * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n   * either null or a replacement prop name.\n   */\n\n\n  BaseComponent.prototype._warnDeprecations = function (deprecationMap) {\n    warnDeprecations(this.className, this.props, deprecationMap);\n  };\n  /**\n   * Warns when props which are mutually exclusive with each other are both used.\n   *\n   * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n   */\n\n\n  BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {\n    warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n  };\n  /**\n   * Warns when props are required if a condition is met.\n   *\n   * @param requiredProps - The name of the props that are required when the condition is met.\n   * @param conditionalPropName - The name of the prop that the condition is based on.\n   * @param condition - Whether the condition is met.\n   */\n\n\n  BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {\n    warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n  };\n\n  BaseComponent.prototype._setComponentRef = function (ref, value) {\n    if (!this._skipComponentRefResolution && ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      }\n\n      if (typeof ref === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ref.current = value;\n      }\n    }\n  };\n\n  return BaseComponent;\n}(React.Component);\n\nexport { BaseComponent };\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\n\nfunction _makeAllSafe(obj, prototype, methodNames) {\n  for (var i = 0, len = methodNames.length; i < len; i++) {\n    _makeSafe(obj, prototype, methodNames[i]);\n  }\n} // eslint-disable-next-line deprecation/deprecation\n\n\nfunction _makeSafe(obj, prototype, methodName) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  var classMethod = obj[methodName];\n  var prototypeMethod = prototype[methodName];\n\n  if (classMethod || prototypeMethod) {\n    obj[methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n\n\n      var retVal;\n\n      if (prototypeMethod) {\n        retVal = prototypeMethod.apply(this, args);\n      }\n\n      if (classMethod !== prototypeMethod) {\n        retVal = classMethod.apply(this, args);\n      }\n\n      return retVal;\n    };\n  }\n}\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\n\n\nexport function nullRender() {\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}