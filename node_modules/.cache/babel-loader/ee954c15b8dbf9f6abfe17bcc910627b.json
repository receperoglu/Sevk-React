{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar LinkBase =\n/** @class */\nfunction (_super) {\n  __extends(LinkBase, _super);\n\n  function LinkBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._link = React.createRef();\n\n    _this._renderContent = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          children = _a.children,\n          className = _a.className,\n          href = _a.href,\n          theme = _a.theme,\n          styles = _a.styles;\n      var classNames = getClassNames(styles, {\n        className: className,\n        isButton: !href,\n        isDisabled: disabled,\n        theme: theme\n      });\n\n      var RootType = _this._getRootType(_this.props);\n\n      return React.createElement(RootType, __assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), {\n        className: classNames.root,\n        onClick: _this._onClick,\n        ref: _this._link,\n        \"aria-disabled\": disabled\n      }), children);\n    };\n\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled;\n\n      if (disabled) {\n        ev.preventDefault();\n      } else if (onClick) {\n        onClick(ev);\n      }\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  LinkBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps;\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        ariaDescribedBy: this.props['aria-describedby'],\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(keytipAttributes);\n      });\n    }\n\n    return this._renderContent();\n  };\n\n  LinkBase.prototype.focus = function () {\n    var current = this._link.current;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  };\n\n  LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    var children = props.children,\n        as = props.as,\n        disabled = props.disabled,\n        target = props.target,\n        href = props.href,\n        theme = props.theme,\n        getStyles = props.getStyles,\n        styles = props.styles,\n        componentRef = props.componentRef,\n        keytipProps = props.keytipProps,\n        restProps = __rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"keytipProps\"]); // RootType will be a string if we're dealing with an html component\n\n\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return __assign({\n          target: target,\n          href: disabled ? undefined : href\n        }, restProps);\n      } // Add the type='button' prop for button elements\n\n\n      if (RootType === 'button') {\n        return __assign({\n          type: 'button',\n          disabled: disabled\n        }, restProps);\n      } // Remove the target and href props for all other non anchor elements\n\n\n      return __assign(__assign({}, restProps), {\n        disabled: disabled\n      });\n    } // Retain all props except 'as' for ReactComponents\n\n\n    return __assign({\n      target: target,\n      href: href,\n      disabled: disabled\n    }, restProps);\n  };\n\n  LinkBase.prototype._getRootType = function (props) {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  };\n\n  return LinkBase;\n}(React.Component);\n\nexport { LinkBase };","map":null,"metadata":{},"sourceType":"module"}