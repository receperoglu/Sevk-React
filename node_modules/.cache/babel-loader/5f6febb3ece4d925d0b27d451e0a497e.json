{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSetsWithProps } from '@uifabric/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\nvar DefaultFields = ['theme', 'styles'];\nexport function styled(Component, baseStyles, getProps, customizable, pure) {\n  customizable = customizable || {\n    scope: '',\n    fields: undefined\n  };\n  var scope = customizable.scope,\n      _a = customizable.fields,\n      fields = _a === void 0 ? DefaultFields : _a;\n  var Wrapped = React.forwardRef(function (props, forwardedRef) {\n    var styles = React.useRef();\n    var settings = useCustomizationSettings(fields, scope);\n\n    var customizedStyles = settings.styles,\n        dir = settings.dir,\n        rest = __rest(settings, [\"styles\", \"dir\"]);\n\n    var additionalProps = getProps ? getProps(props) : undefined; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var cache = styles.current && styles.current.__cachedInputs__ || [];\n\n    if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      var concatenatedStyles = function concatenatedStyles(styleProps) {\n        return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n      }; // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n\n\n      concatenatedStyles.__cachedInputs__ = [baseStyles, customizedStyles, props.styles];\n      concatenatedStyles.__noStyleOverride__ = !customizedStyles && !props.styles;\n      styles.current = concatenatedStyles;\n    }\n\n    return React.createElement(Component, __assign({\n      ref: forwardedRef\n    }, rest, additionalProps, props, {\n      styles: styles.current\n    }));\n  }); // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  Wrapped.displayName = \"Styled\" + (Component.displayName || Component.name); // This preserves backwards compatibility.\n\n  var pureComponent = pure ? React.memo(Wrapped) : Wrapped; // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n\n  return pureComponent;\n}","map":null,"metadata":{},"sourceType":"module"}