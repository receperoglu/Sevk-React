{"ast":null,"code":"import { getFocusStyle, focusClear, getGlobalClassNames, HighContrastSelector, hiddenContentStyle } from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\nvar GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check'\n};\nexport var HEADER_HEIGHT = 42;\nexport var getCellStyles = function getCellStyles(props) {\n  var theme = props.theme,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  var semanticColors = theme.semanticColors;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return [classNames.cell, getFocusStyle(theme), {\n    color: semanticColors.bodyText,\n    position: 'relative',\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    padding: \"0 \" + cellStyleProps.cellRightPadding + \"px 0 \" + cellStyleProps.cellLeftPadding + \"px\",\n    lineHeight: 'inherit',\n    margin: '0',\n    height: HEADER_HEIGHT,\n    verticalAlign: 'top',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    textAlign: 'left'\n  }];\n};\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d;\n\n  var theme = props.theme,\n      className = props.className,\n      isAllSelected = props.isAllSelected,\n      isResizingColumn = props.isResizingColumn,\n      isSizing = props.isSizing,\n      isAllCollapsed = props.isAllCollapsed,\n      _e = props.cellStyleProps,\n      cellStyleProps = _e === void 0 ? DEFAULT_CELL_STYLE_PROPS : _e;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralTertiary,\n    resizerColor: palette.neutralTertiaryAlt\n  };\n  var cellSizerFadeInStyles = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear'\n  };\n  var cellStyles = getCellStyles(props);\n  return {\n    root: [classNames.root, fonts.small, {\n      display: 'inline-block',\n      background: colors.headerBackgroundColor,\n      position: 'relative',\n      minWidth: '100%',\n      verticalAlign: 'top',\n      height: HEADER_HEIGHT,\n      lineHeight: HEADER_HEIGHT,\n      whiteSpace: 'nowrap',\n      boxSizing: 'content-box',\n      paddingBottom: '1px',\n      paddingTop: '16px',\n      borderBottom: \"1px solid \" + semanticColors.bodyDivider,\n      cursor: 'default',\n      userSelect: 'none',\n      selectors: (_a = {}, _a[\"&:hover .\" + classNames.check] = {\n        opacity: 1\n      }, _a[\"& .\" + classNames.tooltipHost + \" .\" + classNames.checkTooltip] = {\n        display: 'block'\n      }, _a)\n    }, isAllSelected && classNames.isAllSelected, isResizingColumn && classNames.isResizingColumn, className],\n    check: [classNames.check, {\n      height: HEADER_HEIGHT\n    }, {\n      selectors: (_b = {}, _b[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n        opacity: 1\n      }, _b)\n    }],\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding\n    },\n    cellIsCheck: [cellStyles, classNames.cellIsCheck, {\n      position: 'relative',\n      padding: 0,\n      margin: 0,\n      display: 'inline-flex',\n      alignItems: 'center',\n      border: 'none'\n    }, isAllSelected && {\n      opacity: 1\n    }],\n    cellIsGroupExpander: [cellStyles, {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: fonts.small.fontSize,\n      padding: 0,\n      border: 'none',\n      width: GROUP_EXPANDER_WIDTH,\n      color: palette.neutralSecondary,\n      selectors: {\n        ':hover': {\n          backgroundColor: palette.neutralLighter\n        },\n        ':active': {\n          backgroundColor: palette.neutralLight\n        }\n      }\n    }],\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed\n        }\n      }\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip'\n    },\n    cellSizer: [classNames.cellSizer, focusClear(), {\n      display: 'inline-block',\n      position: 'relative',\n      cursor: 'ew-resize',\n      bottom: 0,\n      top: 0,\n      overflow: 'hidden',\n      height: 'inherit',\n      background: 'transparent',\n      zIndex: 1,\n      width: 16,\n      selectors: (_c = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          width: 1,\n          background: colors.resizerColor,\n          opacity: 0,\n          left: '50%'\n        },\n        ':focus:after': cellSizerFadeInStyles,\n        ':hover:after': cellSizerFadeInStyles\n      }, _c[\"&.\" + classNames.isResizing + \":after\"] = [cellSizerFadeInStyles, {\n        boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)'\n      }], _c)\n    }],\n    cellIsResizing: classNames.isResizing,\n    cellSizerStart: {\n      margin: '0 -8px'\n    },\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16\n    },\n    collapseButton: [classNames.collapseButton, {\n      transformOrigin: '50% 50%',\n      transition: 'transform .1s linear'\n    }, isAllCollapsed ? [classNames.isCollapsed, {\n      transform: 'rotate(0deg)'\n    }] : {\n      transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)'\n    }],\n    checkTooltip: classNames.checkTooltip,\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        background: 'transparent',\n        MsHighContrastAdjust: 'none'\n      }, _d)\n    },\n    accessibleLabel: hiddenContentStyle,\n    dropHintCircleStyle: [classNames.dropHintCircleStyle, {\n      display: 'inline-block',\n      visibility: 'hidden',\n      position: 'absolute',\n      bottom: 0,\n      height: 9,\n      width: 9,\n      borderRadius: '50%',\n      marginLeft: -5,\n      top: 34,\n      overflow: 'visible',\n      zIndex: 10,\n      border: \"1px solid \" + palette.themePrimary,\n      background: palette.white\n    }],\n    dropHintCaretStyle: [classNames.dropHintCaretStyle, {\n      display: 'none',\n      position: 'absolute',\n      top: -28,\n      left: -6.5,\n      fontSize: fonts.medium.fontSize,\n      color: palette.themePrimary,\n      overflow: 'visible',\n      zIndex: 10\n    }],\n    dropHintLineStyle: [classNames.dropHintLineStyle, {\n      display: 'none',\n      position: 'absolute',\n      bottom: 0,\n      top: 0,\n      overflow: 'hidden',\n      height: 42,\n      width: 1,\n      background: palette.themePrimary,\n      zIndex: 10\n    }],\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute'\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}