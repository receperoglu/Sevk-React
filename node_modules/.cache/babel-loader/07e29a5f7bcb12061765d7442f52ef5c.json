{"ast":null,"code":"import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\nvar warningsMap;\n\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {}\n  };\n}\n/** Reset controlled usage warnings for testing purposes. */\n\n\nexport function resetControlledWarnings() {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\n\nexport function warnControlledUsage(params) {\n  if (process.env.NODE_ENV !== 'production') {\n    var componentId = params.componentId,\n        componentName = params.componentName,\n        defaultValueProp = params.defaultValueProp,\n        props = params.props,\n        oldProps = params.oldProps,\n        onChangeProp = params.onChangeProp,\n        readOnlyProp = params.readOnlyProp,\n        valueProp = params.valueProp; // This warning logic closely follows what React does for native <input> elements.\n\n    var oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    var newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      var hasOnChange = !!props[onChangeProp];\n      var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\"Warning: You provided a '\" + valueProp + \"' prop to a \" + componentName + \" without an '\" + onChangeProp + \"' handler. \" + (\"This will render a read-only field. If the field should be mutable use '\" + defaultValueProp + \"'. \") + (\"Otherwise, set '\" + onChangeProp + \"'\" + (readOnlyProp ? \" or '\" + readOnlyProp + \"'\" : '') + \".\"));\n      } // value and defaultValue are mutually exclusive\n\n\n      var defaultValue = props[defaultValueProp];\n\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\"Warning: You provided both '\" + valueProp + \"' and '\" + defaultValueProp + \"' to a \" + componentName + \". \" + (\"Form fields must be either controlled or uncontrolled (specify either the '\" + valueProp + \"' prop, \") + (\"or the '\" + defaultValueProp + \"' prop, but not both). Decide between using a controlled or uncontrolled \") + (componentName + \" and remove one of these props. More info: https://fb.me/react-controlled-components\"));\n      }\n    } // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n\n\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      var newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\"Warning: A component is changing \" + oldType + \" \" + componentName + \" to be \" + newType + \". \" + (componentName + \"s should not switch from controlled to uncontrolled (or vice versa). \") + \"Decide between using controlled or uncontrolled for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}