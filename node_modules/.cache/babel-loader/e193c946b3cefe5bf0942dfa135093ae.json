{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getRTL, initializeComponentRef, format } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear } from './CalendarYear';\nvar styles = stylesImport;\nvar MONTHS_PER_ROW = 4;\n\nvar CalendarMonth =\n/** @class */\nfunction (_super) {\n  __extends(CalendarMonth, _super);\n\n  function CalendarMonth(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._navigatedMonthRef = React.createRef();\n\n    _this._onCalendarYearRef = function (ref) {\n      _this._calendarYearRef = ref;\n    };\n\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter) {\n        callback();\n      }\n    };\n\n    _this._onSelectYear = function (selectedYear) {\n      _this._focusOnUpdate = true;\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          maxDate = _a.maxDate,\n          minDate = _a.minDate;\n      var navYear = navigatedDate.getFullYear();\n\n      if (navYear !== selectedYear) {\n        var newNavigationDate = new Date(navigatedDate.getTime());\n        newNavigationDate.setFullYear(selectedYear); // for min and max dates, adjust the new navigation date - perhaps this should be\n        // checked on the master navigation date handler (i.e. in Calendar)\n\n        if (maxDate && newNavigationDate > maxDate) {\n          newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n        } else if (minDate && newNavigationDate < minDate) {\n          newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n        }\n\n        onNavigateDate(newNavigationDate, true);\n      }\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._yearToString = function (year) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          dateTimeFormatter = _a.dateTimeFormatter;\n\n      if (dateTimeFormatter) {\n        // create a date based on the current nav date\n        var yearFormattingDate = new Date(navigatedDate.getTime());\n        yearFormattingDate.setFullYear(year);\n        return dateTimeFormatter.formatYear(yearFormattingDate);\n      }\n\n      return String(year);\n    };\n\n    _this._yearRangeToString = function (yearRange) {\n      return _this._yearToString(yearRange.fromYear) + \" - \" + _this._yearToString(yearRange.toYear);\n    };\n\n    _this._yearRangeToNextDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._yearRangeToPrevDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._onRenderYear = function (year) {\n      return _this._yearToString(year);\n    };\n\n    _this._onSelectNextYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n\n    _this._onSelectNextYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextYear, ev);\n      }\n    };\n\n    _this._onSelectPrevYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n\n    _this._onSelectPrevYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevYear, ev);\n      }\n    };\n\n    _this._onSelectMonthKeyDown = function (index) {\n      return function (ev) {\n        return _this._onKeyDown(function () {\n          return _this._onSelectMonth(index);\n        }, ev);\n      };\n    };\n\n    _this._onSelectMonth = function (newMonth) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          onHeaderSelect = _a.onHeaderSelect; // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n\n      onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n\n    _this._onHeaderSelect = function () {\n      var _a = _this.props,\n          onHeaderSelect = _a.onHeaderSelect,\n          yearPickerHidden = _a.yearPickerHidden;\n\n      if (!yearPickerHidden) {\n        _this._focusOnUpdate = true;\n\n        _this.setState({\n          isYearPickerVisible: true\n        });\n      } else if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n\n    _this._onYearPickerHeaderSelect = function (focus) {\n      _this._focusOnUpdate = focus;\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      if (_this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        _this._onHeaderSelect();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach(function (month, index) {\n      _this._selectMonthCallbacks[index] = _this._onSelectMonth.bind(_this, index);\n    });\n    _this._isCurrentMonth = _this._isCurrentMonth.bind(_this);\n    _this._onSelectNextYear = _this._onSelectNextYear.bind(_this);\n    _this._onSelectPrevYear = _this._onSelectPrevYear.bind(_this);\n    _this._onSelectMonth = _this._onSelectMonth.bind(_this);\n    _this.state = {\n      isYearPickerVisible: false\n    };\n    return _this;\n  }\n\n  CalendarMonth.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  CalendarMonth.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        navigatedDate = _c.navigatedDate,\n        selectedDate = _c.selectedDate,\n        strings = _c.strings,\n        today = _c.today,\n        highlightCurrentMonth = _c.highlightCurrentMonth,\n        highlightSelectedMonth = _c.highlightSelectedMonth,\n        navigationIcons = _c.navigationIcons,\n        dateTimeFormatter = _c.dateTimeFormatter,\n        minDate = _c.minDate,\n        maxDate = _c.maxDate,\n        yearPickerHidden = _c.yearPickerHidden;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      var currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return React.createElement(CalendarYear, {\n        key: 'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString()),\n        minYear: minDate ? minDate.getFullYear() : undefined,\n        maxYear: maxDate ? maxDate.getFullYear() : undefined,\n        onSelectYear: this._onSelectYear,\n        navigationIcons: navigationIcons,\n        onHeaderSelect: this._onYearPickerHeaderSelect,\n        selectedYear: currentSelectedDate,\n        onRenderYear: this._onRenderYear,\n        strings: {\n          rangeAriaLabel: this._yearRangeToString,\n          prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n          nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n          headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n        },\n        ref: this._onCalendarYearRef\n      });\n    }\n\n    var rowIndexes = [];\n\n    for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation; // determine if previous/next years are in bounds\n\n    var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n    var yearString = dateTimeFormatter.formatYear(navigatedDate);\n    var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthPicker', styles.monthPicker)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, this.props.onHeaderSelect || !yearPickerHidden ? React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear, styles.headerToggleView),\n      onClick: this._onHeaderSelect,\n      onKeyDown: this._onHeaderKeyDown,\n      \"aria-label\": headerAriaLabel,\n      role: \"button\",\n      \"aria-atomic\": true,\n      \"aria-live\": \"polite\",\n      tabIndex: 0\n    }, dateTimeFormatter.formatYear(navigatedDate)) : React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)\n    }, dateTimeFormatter.formatYear(navigatedDate)), React.createElement(\"div\", {\n      className: css('ms-DatePicker-yearComponents', styles.yearComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, (_a = {}, _a['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled] = !isPrevYearInBounds, _a)),\n      disabled: !isPrevYearInBounds,\n      onClick: isPrevYearInBounds ? this._onSelectPrevYear : undefined,\n      onKeyDown: isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined,\n      title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n    })), React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, (_b = {}, _b['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled] = !isNextYearInBounds, _b)),\n      disabled: !isNextYearInBounds,\n      onClick: isNextYearInBounds ? this._onSelectNextYear : undefined,\n      onKeyDown: isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined,\n      title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n    }))))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n      className: css('ms-DatePicker-optionGrid', styles.optionGrid),\n      role: \"grid\",\n      \"aria-readonly\": \"true\"\n    }, rowIndexes.map(function (rowNum) {\n      var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n      return React.createElement(\"div\", {\n        key: 'monthRow_' + rowNum,\n        role: \"row\"\n      }, monthsForRow.map(function (month, index) {\n        var _a;\n\n        var monthIndex = rowNum * MONTHS_PER_ROW + index;\n        var indexedMonth = setMonth(navigatedDate, monthIndex);\n\n        var isCurrentMonth = _this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today);\n\n        var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n        var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n        var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n        var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n        return React.createElement(\"button\", {\n          role: 'gridcell',\n          className: css('ms-DatePicker-monthOption', styles.monthOption, (_a = {}, _a['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth] = highlightCurrentMonth && isCurrentMonth, _a['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted] = (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear, _a['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled] = !isInBounds, _a)),\n          disabled: !isInBounds,\n          key: monthIndex,\n          onClick: isInBounds ? _this._selectMonthCallbacks[monthIndex] : undefined,\n          onKeyDown: isInBounds ? _this._onSelectMonthKeyDown(monthIndex) : undefined,\n          \"aria-label\": dateTimeFormatter.formatMonthYear(indexedMonth, strings),\n          \"aria-selected\": isNavigatedMonth,\n          \"data-is-focusable\": isInBounds ? true : undefined,\n          ref: isNavigatedMonth ? _this._navigatedMonthRef : undefined,\n          type: \"button\"\n        }, month);\n      }));\n    }))));\n  };\n\n  CalendarMonth.prototype.focus = function () {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n\n      this._navigatedMonthRef.current.focus();\n    }\n  };\n\n  CalendarMonth.prototype._isCurrentMonth = function (month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n  };\n\n  return CalendarMonth;\n}(React.Component);\n\nexport { CalendarMonth };","map":null,"metadata":{},"sourceType":"module"}