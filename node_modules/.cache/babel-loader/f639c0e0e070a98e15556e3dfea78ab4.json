{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\n\nexport function useMergedRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  var mergedCallback = React.useCallback(function (value) {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n\n    for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n      var ref = refs_1[_i];\n\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  }, __spreadArrays(refs));\n  return mergedCallback;\n}","map":null,"metadata":{},"sourceType":"module"}