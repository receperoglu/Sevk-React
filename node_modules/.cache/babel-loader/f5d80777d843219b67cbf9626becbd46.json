{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\nvar getClassNames = classNamesFunction();\n\nvar ExpandingCardBase =\n/** @class */\nfunction (_super) {\n  __extends(ExpandingCardBase, _super);\n\n  function ExpandingCardBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._expandedElem = React.createRef();\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.escape) {\n        _this.props.onLeave && _this.props.onLeave(ev);\n      }\n    };\n\n    _this._onRenderCompactCard = function () {\n      return React.createElement(\"div\", {\n        className: _this._classNames.compactCard\n      }, _this.props.onRenderCompactCard(_this.props.renderData));\n    };\n\n    _this._onRenderExpandedCard = function () {\n      // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n      // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n      !_this.state.firstFrameRendered && _this._async.requestAnimationFrame(function () {\n        _this.setState({\n          firstFrameRendered: true\n        });\n      });\n      return React.createElement(\"div\", {\n        className: _this._classNames.expandedCard,\n        ref: _this._expandedElem\n      }, React.createElement(\"div\", {\n        className: _this._classNames.expandedCardScroll\n      }, _this.props.onRenderExpandedCard && _this.props.onRenderExpandedCard(_this.props.renderData)));\n    };\n\n    _this._checkNeedsScroll = function () {\n      var expandedCardHeight = _this.props.expandedCardHeight;\n\n      _this._async.requestAnimationFrame(function () {\n        if (_this._expandedElem.current && _this._expandedElem.current.scrollHeight >= expandedCardHeight) {\n          _this.setState({\n            needsScroll: true\n          });\n        }\n      });\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    _this.state = {\n      firstFrameRendered: false,\n      needsScroll: false\n    };\n    return _this;\n  }\n\n  ExpandingCardBase.prototype.componentDidMount = function () {\n    this._checkNeedsScroll();\n  };\n\n  ExpandingCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  ExpandingCardBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        compactCardHeight = _a.compactCardHeight,\n        expandedCardHeight = _a.expandedCardHeight,\n        theme = _a.theme,\n        mode = _a.mode,\n        className = _a.className;\n    var _b = this.state,\n        needsScroll = _b.needsScroll,\n        firstFrameRendered = _b.firstFrameRendered;\n    var finalHeight = compactCardHeight + expandedCardHeight;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      compactCardHeight: compactCardHeight,\n      className: className,\n      expandedCardHeight: expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered\n    });\n    var content = React.createElement(\"div\", {\n      onMouseEnter: this.props.onEnter,\n      onMouseLeave: this.props.onLeave,\n      onKeyDown: this._onKeyDown\n    }, this._onRenderCompactCard(), this._onRenderExpandedCard());\n    return React.createElement(CardCallout, __assign({}, this.props, {\n      content: content,\n      finalHeight: finalHeight,\n      className: this._classNames.root\n    }));\n  };\n\n  ExpandingCardBase.defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true\n  };\n  return ExpandingCardBase;\n}(React.Component);\n\nexport { ExpandingCardBase };","map":null,"metadata":{},"sourceType":"module"}