{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { TextField } from '../TextField';\nimport { initializeComponentRef, KeyCodes } from '../../../Utilities';\nimport { clearNext, clearPrev, clearRange, DEFAULT_MASK_FORMAT_CHARS, getLeftFormatIndex, getMaskDisplay, getRightFormatIndex, insertString, parseMask } from './inputMask';\nexport var DEFAULT_MASK_CHAR = '_';\n\nvar MaskedTextField =\n/** @class */\nfunction (_super) {\n  __extends(MaskedTextField, _super);\n\n  function MaskedTextField(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textField = React.createRef();\n\n    _this._onFocus = function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n\n      _this._isFocused = true; // Move the cursor position to the leftmost unfilled position\n\n      for (var i = 0; i < _this._maskCharData.length; i++) {\n        if (!_this._maskCharData[i].value) {\n          _this.setState({\n            maskCursorPosition: _this._maskCharData[i].displayIndex\n          });\n\n          break;\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n\n      _this._isFocused = false;\n      _this._moveCursorOnMouseUp = true;\n    };\n\n    _this._onMouseDown = function (event) {\n      if (_this.props.onMouseDown) {\n        _this.props.onMouseDown(event);\n      }\n\n      if (!_this._isFocused) {\n        _this._moveCursorOnMouseUp = true;\n      }\n    };\n\n    _this._onMouseUp = function (event) {\n      if (_this.props.onMouseUp) {\n        _this.props.onMouseUp(event);\n      } // Move the cursor on mouseUp after focusing the textField\n\n\n      if (_this._moveCursorOnMouseUp) {\n        _this._moveCursorOnMouseUp = false; // Move the cursor position to the rightmost unfilled position\n\n        for (var i = 0; i < _this._maskCharData.length; i++) {\n          if (!_this._maskCharData[i].value) {\n            _this.setState({\n              maskCursorPosition: _this._maskCharData[i].displayIndex\n            });\n\n            break;\n          }\n        }\n      }\n    };\n\n    _this._onInputChange = function (ev, value) {\n      var textField = _this._textField.current;\n\n      if (_this._changeSelectionData === null && textField) {\n        _this._changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.selectionStart !== null ? textField.selectionStart : -1,\n          selectionEnd: textField.selectionEnd !== null ? textField.selectionEnd : -1\n        };\n      }\n\n      if (!_this._changeSelectionData) {\n        return;\n      }\n\n      var displayValue = _this.state.displayValue; // The initial value of cursorPos does not matter\n\n      var cursorPos = 0;\n      var _a = _this._changeSelectionData,\n          changeType = _a.changeType,\n          selectionStart = _a.selectionStart,\n          selectionEnd = _a.selectionEnd;\n\n      if (changeType === 'textPasted') {\n        var charsSelected = selectionEnd - selectionStart;\n        var charCount = value.length + charsSelected - displayValue.length;\n        var startPos = selectionStart;\n        var pastedString = value.substr(startPos, charCount); // Clear any selected characters\n\n        if (charsSelected) {\n          _this._maskCharData = clearRange(_this._maskCharData, selectionStart, charsSelected);\n        }\n\n        cursorPos = insertString(_this._maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        var isDel = changeType === 'delete';\n        var charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          _this._maskCharData = clearRange(_this._maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(_this._maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            _this._maskCharData = clearNext(_this._maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(_this._maskCharData, selectionStart);\n          } else {\n            _this._maskCharData = clearPrev(_this._maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(_this._maskCharData, selectionStart);\n          }\n        }\n      } else if (value.length > displayValue.length) {\n        // This case is if the user added characters\n        var charCount = value.length - displayValue.length;\n        var startPos = selectionEnd - charCount;\n        var enteredString = value.substr(startPos, charCount);\n        cursorPos = insertString(_this._maskCharData, startPos, enteredString);\n      } else if (value.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        var charCount = 1;\n        var selectCount = displayValue.length + charCount - value.length;\n        var startPos = selectionEnd - charCount;\n        var enteredString = value.substr(startPos, charCount); // Clear the selected range\n\n        _this._maskCharData = clearRange(_this._maskCharData, startPos, selectCount); // Insert the printed character\n\n        cursorPos = insertString(_this._maskCharData, startPos, enteredString);\n      }\n\n      _this._changeSelectionData = null;\n      var newValue = getMaskDisplay(_this.props.mask, _this._maskCharData, _this.props.maskChar);\n\n      _this.setState({\n        displayValue: newValue,\n        maskCursorPosition: cursorPos\n      }); // Perform onChange after input has been processed. Return value is expected to be the displayed text\n\n\n      if (_this.props.onChange) {\n        _this.props.onChange(ev, newValue);\n      }\n    };\n\n    _this._onKeyDown = function (event) {\n      var current = _this._textField.current;\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n\n      _this._changeSelectionData = null;\n\n      if (current && current.value) {\n        var keyCode = event.keyCode,\n            ctrlKey = event.ctrlKey,\n            metaKey = event.metaKey; // Ignore ctrl and meta keydown\n\n        if (ctrlKey || metaKey) {\n          return;\n        } // On backspace or delete, store the selection and the keyCode\n\n\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          var selectionStart = event.target.selectionStart;\n          var selectionEnd = event.target.selectionEnd; // Check if backspace or delete press is valid.\n\n          if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < current.value.length)) {\n            return;\n          }\n\n          _this._changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1\n          };\n        }\n      }\n    };\n\n    _this._onPaste = function (event) {\n      if (_this.props.onPaste) {\n        _this.props.onPaste(event);\n      }\n\n      var selectionStart = event.target.selectionStart;\n      var selectionEnd = event.target.selectionEnd; // Store the paste selection range\n\n      _this._changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1\n      };\n    };\n\n    initializeComponentRef(_this); // Translate mask into charData\n\n    _this._maskCharData = parseMask(props.mask, props.maskFormat); // If an initial value is provided, use it to populate the format chars\n\n    props.value !== undefined && _this.setValue(props.value);\n    _this._isFocused = false;\n    _this._moveCursorOnMouseUp = false;\n    _this.state = {\n      displayValue: getMaskDisplay(props.mask, _this._maskCharData, props.maskChar)\n    };\n    return _this;\n  }\n\n  MaskedTextField.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.mask !== this.props.mask || newProps.value !== this.props.value) {\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\n      newProps.value !== undefined && this.setValue(newProps.value);\n      this.setState({\n        displayValue: getMaskDisplay(newProps.mask, this._maskCharData, newProps.maskChar)\n      });\n    }\n  };\n\n  MaskedTextField.prototype.componentDidUpdate = function () {\n    // Move the cursor to the start of the mask format on update\n    if (this._isFocused && this.state.maskCursorPosition !== undefined && this._textField.current) {\n      this._textField.current.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\n    }\n  };\n\n  MaskedTextField.prototype.render = function () {\n    return React.createElement(TextField, __assign({}, this.props, {\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onChange: this._onInputChange,\n      onKeyDown: this._onKeyDown,\n      onPaste: this._onPaste,\n      value: this.state.displayValue || '',\n      componentRef: this._textField\n    }));\n  };\n\n  Object.defineProperty(MaskedTextField.prototype, \"value\", {\n    /**\n     * @returns The value of all filled format characters or undefined if not all format characters are filled\n     */\n    get: function get() {\n      var value = '';\n\n      for (var i = 0; i < this._maskCharData.length; i++) {\n        if (!this._maskCharData[i].value) {\n          return undefined;\n        }\n\n        value += this._maskCharData[i].value;\n      }\n\n      return value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MaskedTextField.prototype.setValue = function (newValue) {\n    var valueIndex = 0;\n    var charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < this._maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      var testVal = newValue[valueIndex];\n\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\n        this._maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n\n      valueIndex++;\n    }\n  };\n\n  MaskedTextField.prototype.focus = function () {\n    var current = this._textField.current;\n    current && current.focus();\n  };\n\n  MaskedTextField.prototype.blur = function () {\n    var current = this._textField.current;\n    current && current.blur();\n  };\n\n  MaskedTextField.prototype.select = function () {\n    var current = this._textField.current;\n    current && current.select();\n  };\n\n  MaskedTextField.prototype.setSelectionStart = function (value) {\n    var current = this._textField.current;\n    current && current.setSelectionStart(value);\n  };\n\n  MaskedTextField.prototype.setSelectionEnd = function (value) {\n    var current = this._textField.current;\n    current && current.setSelectionEnd(value);\n  };\n\n  MaskedTextField.prototype.setSelectionRange = function (start, end) {\n    var current = this._textField.current;\n    current && current.setSelectionRange(start, end);\n  };\n\n  Object.defineProperty(MaskedTextField.prototype, \"selectionStart\", {\n    get: function get() {\n      var current = this._textField.current;\n      return current && current.selectionStart !== null ? current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextField.prototype, \"selectionEnd\", {\n    get: function get() {\n      var current = this._textField.current;\n      return current && current.selectionEnd ? current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MaskedTextField.defaultProps = {\n    maskChar: DEFAULT_MASK_CHAR,\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS\n  };\n  return MaskedTextField;\n}(React.Component);\n\nexport { MaskedTextField };","map":null,"metadata":{},"sourceType":"module"}