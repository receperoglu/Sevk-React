{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\n\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\n\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }],\n    labelWrapper: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    labelWrapperStart: {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    },\n    labelWrapperEnd: {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    },\n    labelWrapperTop: {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    },\n    labelWrapperBottom: {},\n    icon: {\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    labelDisabled: {},\n    spinButtonWrapper: {\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      selectors: (_a = {\n        ':after': {\n          borderColor: SpinButtonRootBorderColorHovered\n        }\n      }, _a[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }, _a)\n    },\n    spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n});","map":null,"metadata":{},"sourceType":"module"}