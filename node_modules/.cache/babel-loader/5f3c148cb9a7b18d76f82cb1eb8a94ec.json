{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { warn, warnControlledUsage, warnConditionallyRequiredProps, warnDeprecations, warnMutuallyExclusive } from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nvar warningId = 0;\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\n\nexport function useWarnings(options) {\n  if (process.env.NODE_ENV !== 'production') {\n    var name_1 = options.name,\n        props = options.props,\n        _a = options.other,\n        other = _a === void 0 ? [] : _a,\n        conditionallyRequired = options.conditionallyRequired,\n        deprecations = options.deprecations,\n        mutuallyExclusive = options.mutuallyExclusive,\n        controlledUsage = options.controlledUsage;\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n\n    var hasWarnedRef = React.useRef(false);\n    var componentId = useConst(function () {\n      return \"useWarnings_\" + warningId++;\n    });\n    var oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {\n        var warning = other_1[_i];\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {\n          var req = conditionallyRequired_1[_b];\n          warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name_1, props, deprecations);\n      mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);\n    } // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n\n\n    controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), {\n      componentId: componentId,\n      props: props,\n      componentName: name_1,\n      oldProps: oldProps\n    }));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}