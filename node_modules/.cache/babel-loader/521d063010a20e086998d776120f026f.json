{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nvar getClassNames = classNamesFunction();\n\nvar ColorCell =\n/** @class */\nfunction (_super) {\n  __extends(ColorCell, _super);\n\n  function ColorCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ColorCell;\n}(ButtonGridCell);\n\nvar ColorPickerGridCellBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerGridCellBase, _super);\n\n  function ColorPickerGridCellBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Render the core of a color cell\n     * @returns - Element representing the core of the item\n     */\n\n\n    _this._onRenderColorOption = function (colorOption) {\n      // Build an SVG for the cell with the given shape and color properties\n      return React.createElement(\"svg\", {\n        className: _this._classNames.svg,\n        viewBox: \"0 0 20 20\",\n        fill: getColorFromString(colorOption.color).str\n      }, _this.props.circle ? React.createElement(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"50%\"\n      }) : React.createElement(\"rect\", {\n        width: \"100%\",\n        height: \"100%\"\n      }));\n    };\n\n    return _this;\n  }\n\n  ColorPickerGridCellBase.prototype.render = function () {\n    var _a = this.props,\n        item = _a.item,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.idPrefix,\n        // eslint-disable-next-line deprecation/deprecation\n    idPrefix = _b === void 0 ? this.props.id : _b,\n        selected = _a.selected,\n        disabled = _a.disabled,\n        styles = _a.styles,\n        theme = _a.theme,\n        circle = _a.circle,\n        color = _a.color,\n        onClick = _a.onClick,\n        onHover = _a.onHover,\n        onFocus = _a.onFocus,\n        onMouseEnter = _a.onMouseEnter,\n        onMouseMove = _a.onMouseMove,\n        onMouseLeave = _a.onMouseLeave,\n        onWheel = _a.onWheel,\n        onKeyDown = _a.onKeyDown,\n        height = _a.height,\n        width = _a.width,\n        borderWidth = _a.borderWidth;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      circle: circle,\n      isWhite: this._isWhiteCell(color),\n      height: height,\n      width: width,\n      borderWidth: borderWidth\n    });\n    return React.createElement(ColorCell, {\n      item: item,\n      id: idPrefix + \"-\" + item.id + \"-\" + item.index,\n      key: item.id,\n      disabled: disabled,\n      role: 'gridcell',\n      onRenderItem: this._onRenderColorOption,\n      selected: selected,\n      onClick: onClick,\n      onHover: onHover,\n      onFocus: onFocus,\n      label: item.label,\n      className: this._classNames.colorCell,\n      getClassNames: getColorPickerGridCellButtonClassNames,\n      index: item.index,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onWheel: onWheel,\n      onKeyDown: onKeyDown\n    });\n  };\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n\n\n  ColorPickerGridCellBase.prototype._isWhiteCell = function (inputColor) {\n    var color = getColorFromString(inputColor);\n    return color.hex === 'ffffff';\n  };\n\n  ColorPickerGridCellBase.defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  };\n  return ColorPickerGridCellBase;\n}(React.PureComponent);\n\nexport { ColorPickerGridCellBase };","map":null,"metadata":{},"sourceType":"module"}