{"ast":null,"code":"var _a, _b, _c;\n\nimport { __assign, __spreadArrays } from \"tslib\";\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { RectangleEdge } from '../../utilities/positioning';\nimport { FontWeights, HighContrastSelector, getGlobalClassNames, normalize, HighContrastSelectorWhite, getScreenSelector, ScreenWidthMinMedium, getEdgeChromiumNoHighContrastAdjustSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-Dropdown-container',\n  label: 'ms-Dropdown-label',\n  dropdown: 'ms-Dropdown',\n  title: 'ms-Dropdown-title',\n  caretDownWrapper: 'ms-Dropdown-caretDownWrapper',\n  caretDown: 'ms-Dropdown-caretDown',\n  callout: 'ms-Dropdown-callout',\n  panel: 'ms-Dropdown-panel',\n  dropdownItems: 'ms-Dropdown-items',\n  dropdownItem: 'ms-Dropdown-item',\n  dropdownDivider: 'ms-Dropdown-divider',\n  dropdownOptionText: 'ms-Dropdown-optionText',\n  dropdownItemHeader: 'ms-Dropdown-header',\n  titleIsPlaceHolder: 'ms-Dropdown-titleIsPlaceHolder',\n  titleHasError: 'ms-Dropdown-title--hasError'\n};\nvar DROPDOWN_HEIGHT = 32;\nvar DROPDOWN_ITEM_HEIGHT = 36;\nvar highContrastAdjustMixin = (_a = {}, _a[HighContrastSelector + \", \" + HighContrastSelectorWhite.replace('@media ', '')] = {\n  MsHighContrastAdjust: 'none'\n}, _a);\nvar highContrastItemAndTitleStateMixin = {\n  selectors: __assign((_b = {}, _b[HighContrastSelector] = {\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText'\n  }, _b), highContrastAdjustMixin)\n};\nvar highContrastBorderState = {\n  selectors: (_c = {}, _c[HighContrastSelector] = {\n    borderColor: 'Highlight'\n  }, _c)\n};\nvar MinimumScreenSelector = getScreenSelector(0, ScreenWidthMinMedium);\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n  var theme = props.theme,\n      hasError = props.hasError,\n      hasLabel = props.hasLabel,\n      className = props.className,\n      isOpen = props.isOpen,\n      disabled = props.disabled,\n      required = props.required,\n      isRenderingPlaceholder = props.isRenderingPlaceholder,\n      panelClassName = props.panelClassName,\n      calloutClassName = props.calloutClassName,\n      calloutRenderEdge = props.calloutRenderEdge;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base Dropdown getStyles function.');\n  }\n\n  var globalClassnames = getGlobalClassNames(GlobalClassNames, theme);\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var rootHoverFocusActiveSelectorNeutralDarkMixin = {\n    color: semanticColors.menuItemTextHovered\n  };\n  var rootHoverFocusActiveSelectorNeutralPrimaryMixin = {\n    color: semanticColors.menuItemText\n  };\n  var borderColorError = {\n    borderColor: semanticColors.errorText\n  };\n  var dropdownItemStyle = [globalClassnames.dropdownItem, {\n    backgroundColor: 'transparent',\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    width: '100%',\n    minHeight: DROPDOWN_ITEM_HEIGHT,\n    lineHeight: 20,\n    height: 0,\n    position: 'relative',\n    border: '1px solid transparent',\n    borderRadius: 0,\n    wordWrap: 'break-word',\n    overflowWrap: 'break-word',\n    textAlign: 'left',\n    '.ms-Button-flexContainer': {\n      width: '100%'\n    }\n  }];\n  var selectedItemBackgroundColor = semanticColors.menuItemBackgroundPressed;\n\n  var itemSelectors = function itemSelectors(isSelected) {\n    var _a;\n\n    if (isSelected === void 0) {\n      isSelected = false;\n    }\n\n    return {\n      selectors: (_a = {\n        '&:hover:focus': [{\n          color: semanticColors.menuItemTextHovered,\n          backgroundColor: !isSelected ? semanticColors.menuItemBackgroundHovered : selectedItemBackgroundColor\n        }, highContrastItemAndTitleStateMixin],\n        '&:focus': [{\n          backgroundColor: !isSelected ? 'transparent' : selectedItemBackgroundColor\n        }, highContrastItemAndTitleStateMixin],\n        '&:active': [{\n          color: semanticColors.menuItemTextHovered,\n          backgroundColor: !isSelected ? semanticColors.menuBackground : semanticColors.menuItemBackgroundHovered\n        }, highContrastItemAndTitleStateMixin]\n      }, _a[\".\" + IsFocusVisibleClassName + \" &:focus:after\"] = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      }, _a[HighContrastSelector] = {\n        border: 'none'\n      }, _a)\n    };\n  };\n\n  var dropdownItemSelected = __spreadArrays(dropdownItemStyle, [{\n    backgroundColor: selectedItemBackgroundColor,\n    color: semanticColors.menuItemTextHovered\n  }, itemSelectors(true), highContrastItemAndTitleStateMixin]);\n\n  var dropdownItemDisabled = __spreadArrays(dropdownItemStyle, [{\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText',\n      border: 'none'\n    }, _a)\n  }]);\n\n  var titleOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom ? effects.roundedCorner2 + \" \" + effects.roundedCorner2 + \" 0 0\" : \"0 0 \" + effects.roundedCorner2 + \" \" + effects.roundedCorner2;\n  var calloutOpenBorderRadius = calloutRenderEdge === RectangleEdge.bottom ? \"0 0 \" + effects.roundedCorner2 + \" \" + effects.roundedCorner2 : effects.roundedCorner2 + \" \" + effects.roundedCorner2 + \" 0 0\";\n  return {\n    root: [globalClassnames.root, className],\n    label: globalClassnames.label,\n    dropdown: [globalClassnames.dropdown, normalize, fonts.medium, {\n      color: semanticColors.menuItemText,\n      borderColor: semanticColors.focusBorder,\n      position: 'relative',\n      outline: 0,\n      userSelect: 'none',\n      selectors: (_b = {}, _b['&:hover .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        borderColor: isOpen ? palette.neutralSecondary : palette.neutralPrimary\n      }, highContrastBorderState], _b['&:focus .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          color: 'Highlight'\n        }, _c)\n      }], _b['&:focus:after'] = [{\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        boxSizing: 'border-box',\n        top: '0px',\n        left: '0px',\n        width: '100%',\n        height: '100%',\n        // see https://github.com/microsoft/fluentui/pull/9182 for semantic color disc\n        border: !disabled ? \"2px solid \" + palette.themePrimary : 'none',\n        borderRadius: '2px',\n        selectors: (_d = {}, _d[HighContrastSelector] = {\n          color: 'Highlight'\n        }, _d)\n      }], _b['&:active .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        borderColor: palette.themePrimary\n      }, highContrastBorderState], _b['&:hover .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _b['&:focus .' + globalClassnames.caretDown] = [!disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, {\n        selectors: (_e = {}, _e[HighContrastSelector] = {\n          color: 'Highlight'\n        }, _e)\n      }], _b['&:active .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _b['&:hover .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _b['&:focus .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _b['&:active .' + globalClassnames.titleIsPlaceHolder] = !disabled && rootHoverFocusActiveSelectorNeutralPrimaryMixin, _b['&:hover .' + globalClassnames.titleHasError] = borderColorError, _b['&:active .' + globalClassnames.titleHasError] = borderColorError, _b)\n    }, isOpen && 'is-open', disabled && 'is-disabled', required && 'is-required', required && !hasLabel && {\n      selectors: (_f = {\n        ':before': {\n          content: \"'*'\",\n          color: semanticColors.errorText,\n          position: 'absolute',\n          top: -5,\n          right: -10\n        }\n      }, _f[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            right: -14\n          }\n        }\n      }, _f)\n    }],\n    title: [globalClassnames.title, normalize, {\n      backgroundColor: semanticColors.inputBackground,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: semanticColors.inputBorder,\n      borderRadius: isOpen ? titleOpenBorderRadius : effects.roundedCorner2,\n      cursor: 'pointer',\n      display: 'block',\n      height: DROPDOWN_HEIGHT,\n      lineHeight: DROPDOWN_HEIGHT - 2,\n      padding: \"0 28px 0 8px\",\n      position: 'relative',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis'\n    }, isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, {\n      color: semanticColors.inputPlaceholderText\n    }], hasError && [globalClassnames.titleHasError, borderColorError], disabled && {\n      backgroundColor: semanticColors.disabledBackground,\n      border: 'none',\n      color: semanticColors.disabledText,\n      cursor: 'default',\n      selectors: __assign((_g = {}, _g[HighContrastSelector] = {\n        border: '1px solid GrayText',\n        color: 'GrayText',\n        backgroundColor: 'Window'\n      }, _g), getEdgeChromiumNoHighContrastAdjustSelector())\n    }],\n    caretDownWrapper: [globalClassnames.caretDownWrapper, {\n      position: 'absolute',\n      top: 1,\n      right: 8,\n      height: DROPDOWN_HEIGHT,\n      lineHeight: DROPDOWN_HEIGHT - 2\n    }, !disabled && {\n      cursor: 'pointer'\n    }],\n    caretDown: [globalClassnames.caretDown, {\n      color: palette.neutralSecondary,\n      fontSize: fonts.small.fontSize,\n      pointerEvents: 'none'\n    }, disabled && {\n      color: semanticColors.disabledText,\n      selectors: __assign((_h = {}, _h[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _h), getEdgeChromiumNoHighContrastAdjustSelector())\n    }],\n    errorMessage: __assign(__assign({\n      color: semanticColors.errorText\n    }, theme.fonts.small), {\n      paddingTop: 5\n    }),\n    callout: [globalClassnames.callout, {\n      boxShadow: effects.elevation8,\n      borderRadius: calloutOpenBorderRadius,\n      selectors: (_j = {}, _j['.ms-Callout-main'] = {\n        borderRadius: calloutOpenBorderRadius\n      }, _j)\n    }, calloutClassName],\n    dropdownItemsWrapper: {\n      selectors: {\n        '&:focus': {\n          outline: 0\n        }\n      }\n    },\n    dropdownItems: [globalClassnames.dropdownItems, {\n      display: 'block'\n    }],\n    dropdownItem: __spreadArrays(dropdownItemStyle, [itemSelectors()]),\n    dropdownItemSelected: dropdownItemSelected,\n    dropdownItemDisabled: dropdownItemDisabled,\n    dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, {\n      backgroundColor: 'transparent'\n    }],\n    dropdownItemHidden: __spreadArrays(dropdownItemStyle, [{\n      display: 'none'\n    }]),\n    dropdownDivider: [globalClassnames.dropdownDivider, {\n      height: 1,\n      backgroundColor: semanticColors.bodyDivider\n    }],\n    dropdownOptionText: [globalClassnames.dropdownOptionText, {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: 0,\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      margin: '1px'\n    }],\n    dropdownItemHeader: [globalClassnames.dropdownItemHeader, __assign(__assign({}, fonts.medium), {\n      fontWeight: FontWeights.semibold,\n      color: semanticColors.menuHeader,\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      height: DROPDOWN_ITEM_HEIGHT,\n      lineHeight: DROPDOWN_ITEM_HEIGHT,\n      cursor: 'default',\n      padding: '0 8px',\n      userSelect: 'none',\n      textAlign: 'left',\n      selectors: __assign((_k = {}, _k[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _k), getEdgeChromiumNoHighContrastAdjustSelector())\n    })],\n    subComponentStyles: {\n      label: {\n        root: {\n          display: 'inline-block'\n        }\n      },\n      multiSelectItem: {\n        root: {\n          padding: 0\n        },\n        label: {\n          alignSelf: 'stretch',\n          padding: '0 8px',\n          width: '100%'\n        }\n      },\n      panel: {\n        root: [panelClassName],\n        main: {\n          selectors: (_l = {}, // In case of extra small screen sizes\n          _l[MinimumScreenSelector] = {\n            // panelWidth xs\n            width: 272\n          }, _l)\n        },\n        contentInner: {\n          padding: '0 0 20px'\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}