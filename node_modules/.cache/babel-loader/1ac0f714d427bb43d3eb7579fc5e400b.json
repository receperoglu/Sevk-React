{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { FocusZone, FocusZoneDirection } from '@fluentui/react-focus';\nimport { initializeComponentRef, classNamesFunction, divProperties, elementContains, focusFirstChild, getNativeProps, warnMutuallyExclusive } from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'OverflowSet';\n\nvar OverflowSetBase =\n/** @class */\nfunction (_super) {\n  __extends(OverflowSetBase, _super);\n\n  function OverflowSetBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n    _this._persistedKeytips = {};\n    _this._keytipManager = KeytipManager.getInstance();\n    _this._divContainer = React.createRef();\n\n    _this._onRenderItems = function (items) {\n      return items.map(function (item, i) {\n        return React.createElement(\"div\", {\n          key: item.key,\n          className: _this._classNames.item\n        }, _this.props.onRenderItem(item));\n      });\n    };\n\n    _this._onRenderOverflowButtonWrapper = function (items) {\n      var wrapperDivProps = {\n        className: _this._classNames.overflowButton\n      };\n      var overflowKeytipSequences = _this.props.keytipSequences;\n      var newOverflowItems = [];\n\n      if (overflowKeytipSequences) {\n        items.forEach(function (overflowItem) {\n          var keytip = overflowItem.keytipProps;\n\n          if (keytip) {\n            // Create persisted keytip\n            var persistedKeytip = {\n              content: keytip.content,\n              keySequences: keytip.keySequences,\n              disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n              hasDynamicChildren: keytip.hasDynamicChildren,\n              hasMenu: keytip.hasMenu\n            };\n\n            if (keytip.hasDynamicChildren || _this._getSubMenuForItem(overflowItem)) {\n              // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n              persistedKeytip.onExecute = _this._keytipManager.menuExecute.bind(_this._keytipManager, overflowKeytipSequences, overflowItem.keytipProps.keySequences);\n            } else {\n              // If the keytip doesn't have a submenu, just execute the original function\n              persistedKeytip.onExecute = keytip.onExecute;\n            } // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n            // uniqueID will get updated on register\n\n\n            _this._persistedKeytips[persistedKeytip.content] = persistedKeytip; // Add the overflow sequence to this item\n\n            var newOverflowItem = __assign(__assign({}, overflowItem), {\n              keytipProps: __assign(__assign({}, keytip), {\n                overflowSetSequence: overflowKeytipSequences\n              })\n            });\n\n            newOverflowItems.push(newOverflowItem);\n          } else {\n            // Nothing to change, add overflowItem to list\n            newOverflowItems.push(overflowItem);\n          }\n        });\n      } else {\n        newOverflowItems = items;\n      }\n\n      return React.createElement(\"div\", __assign({}, wrapperDivProps), _this.props.onRenderOverflowButton(newOverflowItems));\n    };\n\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      doNotContainWithinFocusZone: 'focusZoneProps'\n    });\n    return _this;\n  }\n\n  OverflowSetBase.prototype.render = function () {\n    var _a = this.props,\n        items = _a.items,\n        overflowItems = _a.overflowItems,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    focusZoneProps = _a.focusZoneProps,\n        styles = _a.styles,\n        vertical = _a.vertical,\n        // eslint-disable-next-line deprecation/deprecation\n    doNotContainWithinFocusZone = _a.doNotContainWithinFocusZone,\n        role = _a.role,\n        _b = _a.overflowSide,\n        overflowSide = _b === void 0 ? 'end' : _b;\n    this._classNames = getClassNames(styles, {\n      className: className,\n      vertical: vertical\n    });\n    var Tag;\n    var uniqueComponentProps;\n\n    if (doNotContainWithinFocusZone) {\n      Tag = 'div';\n      uniqueComponentProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n        ref: this._divContainer\n      });\n    } else {\n      Tag = FocusZone;\n      uniqueComponentProps = __assign(__assign(__assign({}, getNativeProps(this.props, divProperties)), focusZoneProps), {\n        componentRef: this._focusZone,\n        direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal\n      });\n    }\n\n    var showOverflow = overflowItems && overflowItems.length > 0;\n    return React.createElement(Tag, __assign({\n      role: role || 'group',\n      \"aria-orientation\": role === 'menubar' ? vertical === true ? 'vertical' : 'horizontal' : undefined\n    }, uniqueComponentProps, {\n      className: this._classNames.root\n    }), overflowSide === 'start' && showOverflow && this._onRenderOverflowButtonWrapper(overflowItems), items && this._onRenderItems(items), overflowSide === 'end' && showOverflow && this._onRenderOverflowButtonWrapper(overflowItems));\n  };\n  /**\n   * Sets focus to the first tabbable item in the OverflowSet.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element,\n   * even if focus is already in theOverflowSet\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  OverflowSetBase.prototype.focus = function (forceIntoFirstElement) {\n    var focusSucceeded = false; // eslint-disable-next-line deprecation/deprecation\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current) {\n        focusSucceeded = focusFirstChild(this._divContainer.current);\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return focusSucceeded;\n  };\n  /**\n   * Sets focus to a specific child element within the OverflowSet.\n   * @param childElement - The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  OverflowSetBase.prototype.focusElement = function (childElement) {\n    var focusSucceeded = false;\n\n    if (!childElement) {\n      return false;\n    } // eslint-disable-next-line deprecation/deprecation\n\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current && elementContains(this._divContainer.current, childElement)) {\n        childElement.focus();\n        focusSucceeded = document.activeElement === childElement;\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focusElement(childElement);\n    }\n\n    return focusSucceeded;\n  }; // Add keytip register/unregister handlers to lifecycle functions to correctly manage persisted keytips\n\n\n  OverflowSetBase.prototype.componentDidMount = function () {\n    this._registerPersistedKeytips();\n  };\n\n  OverflowSetBase.prototype.componentWillUnmount = function () {\n    this._unregisterPersistedKeytips();\n  };\n\n  OverflowSetBase.prototype.UNSAFE_componentWillUpdate = function () {\n    this._unregisterPersistedKeytips();\n  };\n\n  OverflowSetBase.prototype.componentDidUpdate = function () {\n    this._registerPersistedKeytips();\n  };\n\n  OverflowSetBase.prototype._registerPersistedKeytips = function () {\n    var _this = this;\n\n    Object.keys(this._persistedKeytips).forEach(function (key) {\n      var keytip = _this._persistedKeytips[key];\n\n      var uniqueID = _this._keytipManager.register(keytip, true); // Update map\n\n\n      _this._persistedKeytips[uniqueID] = keytip;\n      delete _this._persistedKeytips[key];\n    });\n  };\n\n  OverflowSetBase.prototype._unregisterPersistedKeytips = function () {\n    var _this = this; // Delete all persisted keytips saved\n\n\n    Object.keys(this._persistedKeytips).forEach(function (uniqueID) {\n      _this._keytipManager.unregister(_this._persistedKeytips[uniqueID], uniqueID, true);\n    });\n    this._persistedKeytips = {};\n  };\n  /**\n   * Gets the subMenu for an overflow item\n   * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n   */\n\n\n  OverflowSetBase.prototype._getSubMenuForItem = function (item) {\n    if (this.props.itemSubMenuProvider) {\n      return this.props.itemSubMenuProvider(item);\n    }\n\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n\n    return undefined;\n  };\n\n  return OverflowSetBase;\n}(React.Component);\n\nexport { OverflowSetBase };","map":null,"metadata":{},"sourceType":"module"}