{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","map":null,"metadata":{},"sourceType":"module"}