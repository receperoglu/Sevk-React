{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\nvar COMPONENT_NAME = 'DialogContent';\n\nvar DialogContentBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogContentBase, _super);\n\n  function DialogContentBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id'\n    });\n    return _this;\n  }\n\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n        showCloseButton = _a.showCloseButton,\n        className = _a.className,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        onDismiss = _a.onDismiss,\n        subTextId = _a.subTextId,\n        subText = _a.subText,\n        _b = _a.titleProps,\n        titleProps = _b === void 0 ? {} : _b,\n        // eslint-disable-next-line deprecation/deprecation\n    titleId = _a.titleId,\n        title = _a.title,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n\n    var groupings = this._groupChildren();\n\n    var subTextContent;\n\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"div\", __assign({\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 1\n    }, titleProps, {\n      className: css(classNames.title, titleProps.className)\n    }), title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, __assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss,\n      title: closeButtonAriaLabel\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  }; // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n\n\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = __decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(React.Component);\n\nexport { DialogContentBase };","map":null,"metadata":{},"sourceType":"module"}