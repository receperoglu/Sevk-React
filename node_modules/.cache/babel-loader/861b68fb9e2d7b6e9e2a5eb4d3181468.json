{"ast":null,"code":"import { __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getId, getRTL, getRTLSafeKeyCode, format, findIndex, find, initializeComponentRef } from '../../Utilities';\nimport { DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { FocusZone } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { addDays, addWeeks, addMonths, compareDates, compareDatePart, getDateRangeArray, isInDateRangeArray, getWeekNumber, getWeekNumbersInMonth, getMonthStart, getMonthEnd } from '../../utilities/dateMath/DateMath';\nimport * as stylesImport from './Calendar.scss';\nvar styles = stylesImport;\nvar DAYS_IN_WEEK = 7;\n\nvar CalendarDay =\n/** @class */\nfunction (_super) {\n  __extends(CalendarDay, _super);\n\n  function CalendarDay(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.days = {};\n\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        callback();\n      }\n    };\n\n    _this._onDayKeyDown = function (originalDate, weekIndex, dayIndex) {\n      return function (ev) {\n        if (ev.which === KeyCodes.enter) {\n          _this._onSelectDate(originalDate, ev);\n\n          ev.preventDefault();\n        } else {\n          _this._navigateMonthEdge(ev, originalDate, weekIndex, dayIndex);\n        }\n      };\n    };\n\n    _this._onDayMouseDown = function (originalDate, weekIndex, dayIndex, dateRangeType) {\n      return function (ev) {\n        // set the press styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (ref && day.originalDate.getMonth() === originalDate.getMonth() && day.isInBounds) {\n              ref.classList.add(styles.dayPress);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.add(styles.dayPress);\n              ref.classList.add(styles.dayIsHighlighted);\n            } else if (ref) {\n              ref.classList.remove(styles.dayIsHighlighted);\n            }\n          });\n        }\n      };\n    };\n\n    _this._onDayMouseUp = function (originalDate, weekIndex, dayIndex, dateRangeType) {\n      return function (ev) {\n        // remove press styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (ref && day.originalDate.getMonth() === originalDate.getMonth() && day.isInBounds) {\n              ref.classList.remove(styles.dayPress);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.remove(styles.dayPress);\n            }\n          });\n        }\n      };\n    };\n\n    _this._onDayMouseOver = function (originalDate, weekIndex, dayIndex, dateRangeType) {\n      return function (ev) {\n        // set the hover styling on every day in the same month\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (ref && day.originalDate.getMonth() === originalDate.getMonth() && day.isInBounds) {\n              ref.classList.add(styles.dayHover);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.add(styles.dayHover);\n            }\n          });\n        }\n      };\n    };\n\n    _this._onDayMouseLeave = function (originalDate, weekIndex, dayIndex, dateRangeType) {\n      return function (ev) {\n        // remove the hover and pressed styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (ref && day.originalDate.getMonth() === originalDate.getMonth() && day.isInBounds) {\n              ref.classList.remove(styles.dayHover);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.remove(styles.dayHover);\n            }\n          });\n        }\n      };\n    };\n\n    _this._onTableMouseLeave = function (ev) {\n      if (ev.target.contains && ev.relatedTarget && ev.relatedTarget.contains && ev.target.contains(ev.relatedTarget)) {\n        return;\n      }\n\n      _this._applyFunctionToDayRefs(function (ref, day) {\n        if (ref) {\n          ref.classList.remove(styles.dayHover);\n          ref.classList.remove(styles.dayPress);\n        }\n      });\n    };\n\n    _this._onTableMouseUp = function (ev) {\n      if (ev.target.contains && ev.relatedTarget && ev.relatedTarget.contains && ev.target.contains(ev.relatedTarget)) {\n        return;\n      }\n\n      _this._applyFunctionToDayRefs(function (ref, day) {\n        if (ref) {\n          ref.classList.remove(styles.dayPress);\n        }\n      });\n    };\n\n    _this._onSelectDate = function (selectedDate, ev) {\n      var _a = _this.props,\n          onSelectDate = _a.onSelectDate,\n          dateRangeType = _a.dateRangeType,\n          firstDayOfWeek = _a.firstDayOfWeek,\n          navigatedDate = _a.navigatedDate,\n          autoNavigateOnSelection = _a.autoNavigateOnSelection,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate,\n          workWeekDays = _a.workWeekDays;\n\n      if (ev) {\n        ev.stopPropagation();\n      }\n\n      var dateRange = getDateRangeArray(selectedDate, dateRangeType, firstDayOfWeek, workWeekDays);\n\n      if (dateRangeType !== DateRangeType.Day) {\n        dateRange = _this._getBoundedDateRange(dateRange, minDate, maxDate);\n      }\n\n      dateRange = dateRange.filter(function (d) {\n        return !_this._getIsRestrictedDate(d);\n      });\n\n      if (onSelectDate) {\n        onSelectDate(selectedDate, dateRange);\n      } // Navigate to next or previous month if needed\n\n\n      if (autoNavigateOnSelection && selectedDate.getMonth() !== navigatedDate.getMonth()) {\n        var compareResult = compareDatePart(selectedDate, navigatedDate);\n\n        if (compareResult < 0) {\n          _this._onSelectPrevMonth();\n        } else if (compareResult > 0) {\n          _this._onSelectNextMonth();\n        }\n      }\n    };\n\n    _this._onSelectNextMonth = function () {\n      _this.props.onNavigateDate(addMonths(_this.props.navigatedDate, 1), false);\n    };\n\n    _this._onSelectPrevMonth = function () {\n      _this.props.onNavigateDate(addMonths(_this.props.navigatedDate, -1), false);\n    };\n\n    _this._onClose = function () {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n\n    _this._onHeaderSelect = function () {\n      var onHeaderSelect = _this.props.onHeaderSelect;\n\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      var onHeaderSelect = _this.props.onHeaderSelect;\n\n      if (onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        onHeaderSelect(true);\n      }\n    };\n\n    _this._onPrevMonthKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevMonth, ev);\n      }\n    };\n\n    _this._onNextMonthKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextMonth, ev);\n      }\n    };\n\n    _this._onCloseButtonKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onClose, ev);\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      activeDescendantId: getId('DatePickerDay-active'),\n      weeks: _this._getWeeks(props)\n    };\n    _this._onSelectNextMonth = _this._onSelectNextMonth.bind(_this);\n    _this._onSelectPrevMonth = _this._onSelectPrevMonth.bind(_this);\n    _this._onClose = _this._onClose.bind(_this);\n    return _this;\n  }\n\n  CalendarDay.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      weeks: this._getWeeks(nextProps)\n    });\n  };\n\n  CalendarDay.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.state,\n        activeDescendantId = _c.activeDescendantId,\n        weeks = _c.weeks;\n    var _d = this.props,\n        firstDayOfWeek = _d.firstDayOfWeek,\n        strings = _d.strings,\n        navigatedDate = _d.navigatedDate,\n        selectedDate = _d.selectedDate,\n        dateRangeType = _d.dateRangeType,\n        navigationIcons = _d.navigationIcons,\n        showWeekNumbers = _d.showWeekNumbers,\n        firstWeekOfYear = _d.firstWeekOfYear,\n        dateTimeFormatter = _d.dateTimeFormatter,\n        minDate = _d.minDate,\n        maxDate = _d.maxDate,\n        showCloseButton = _d.showCloseButton,\n        allFocusable = _d.allFocusable;\n    var dayPickerId = getId('DatePickerDay-dayPicker');\n    var monthAndYearId = getId('DatePickerDay-monthAndYear');\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation;\n    var closeNavigationIcon = navigationIcons.closeIcon;\n    var weekNumbers = showWeekNumbers ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate) : null;\n    var selectedDateWeekNumber = showWeekNumbers ? getWeekNumber(selectedDate, firstDayOfWeek, firstWeekOfYear) : undefined; // When the month is highlighted get the corner dates so that styles can be added to them\n\n    var weekCorners = this._getWeekCornerStyles(weeks, dateRangeType); // determine if previous/next months are in bounds\n\n\n    var prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n    var nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-dayPicker', styles.dayPicker, showWeekNumbers && 'ms-DatePicker-showWeekNumbers' && (getRTL() ? styles.showWeekNumbersRTL : styles.showWeekNumbers)),\n      id: dayPickerId\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, React.createElement(\"div\", {\n      \"aria-live\": \"polite\",\n      \"aria-relevant\": \"text\",\n      \"aria-atomic\": \"true\",\n      id: monthAndYearId,\n      className: styles.monthAndYear\n    }, this.props.onHeaderSelect ? React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthAndYear js-showMonthPicker', styles.headerToggleView),\n      onClick: this._onHeaderSelect,\n      onKeyDown: this._onHeaderKeyDown,\n      \"aria-label\": dateTimeFormatter.formatMonthYear(navigatedDate, strings),\n      role: \"button\",\n      tabIndex: 0\n    }, dateTimeFormatter.formatMonthYear(navigatedDate, strings)) : React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthAndYear', styles.monthAndYear)\n    }, dateTimeFormatter.formatMonthYear(navigatedDate, strings))), React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthComponents', styles.monthComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevMonth js-prevMonth', styles.prevMonth, (_a = {}, _a['ms-DatePicker-prevMonth--disabled ' + styles.prevMonthIsDisabled] = !prevMonthInBounds, _a)),\n      disabled: !allFocusable && !prevMonthInBounds,\n      \"aria-disabled\": !prevMonthInBounds,\n      onClick: prevMonthInBounds ? this._onSelectPrevMonth : undefined,\n      onKeyDown: prevMonthInBounds ? this._onPrevMonthKeyDown : undefined,\n      \"aria-controls\": dayPickerId,\n      title: strings.prevMonthAriaLabel ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()] : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: leftNavigationIcon\n    })), React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextMonth js-nextMonth', styles.nextMonth, (_b = {}, _b['ms-DatePicker-nextMonth--disabled ' + styles.nextMonthIsDisabled] = !nextMonthInBounds, _b)),\n      disabled: !allFocusable && !nextMonthInBounds,\n      \"aria-disabled\": !nextMonthInBounds,\n      onClick: nextMonthInBounds ? this._onSelectNextMonth : undefined,\n      onKeyDown: nextMonthInBounds ? this._onNextMonthKeyDown : undefined,\n      \"aria-controls\": dayPickerId,\n      title: strings.nextMonthAriaLabel ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()] : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: rightNavigationIcon\n    })), showCloseButton && React.createElement(\"button\", {\n      className: css('ms-DatePicker-closeButton js-closeButton', styles.closeButton),\n      onClick: this._onClose,\n      onKeyDown: this._onCloseButtonKeyDown,\n      title: strings.closeButtonAriaLabel,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: closeNavigationIcon\n    }))))), React.createElement(FocusZone, null, React.createElement(\"table\", {\n      className: css('ms-DatePicker-table', styles.table),\n      \"aria-readonly\": \"true\",\n      \"aria-multiselectable\": \"false\",\n      \"aria-labelledby\": monthAndYearId,\n      \"aria-activedescendant\": activeDescendantId,\n      role: \"grid\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, showWeekNumbers && React.createElement(\"th\", {\n      className: css('ms-DatePicker-weekday', styles.weekday)\n    }), strings.shortDays.map(function (val, index) {\n      return React.createElement(\"th\", {\n        className: css('ms-DatePicker-weekday', styles.weekday),\n        role: \"columnheader\",\n        scope: \"col\",\n        key: index,\n        title: strings.days[(index + firstDayOfWeek) % DAYS_IN_WEEK],\n        \"aria-label\": strings.days[(index + firstDayOfWeek) % DAYS_IN_WEEK],\n        \"data-is-focusable\": allFocusable ? true : undefined\n      }, strings.shortDays[(index + firstDayOfWeek) % DAYS_IN_WEEK]);\n    }))), React.createElement(\"tbody\", {\n      onMouseLeave: dateRangeType !== DateRangeType.Day ? this._onTableMouseLeave : undefined,\n      onMouseUp: dateRangeType !== DateRangeType.Day ? this._onTableMouseUp : undefined\n    }, weeks.map(function (week, weekIndex) {\n      var _a;\n\n      return React.createElement(\"tr\", {\n        key: weekNumbers ? weekNumbers[weekIndex] : weekIndex\n      }, showWeekNumbers && weekNumbers && React.createElement(\"th\", {\n        className: css('ms-DatePicker-weekNumbers', 'ms-DatePicker-weekday', styles.weekday, styles.weekNumbers),\n        key: weekIndex,\n        title: weekNumbers && strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex]),\n        \"aria-label\": weekNumbers && strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex]),\n        scope: \"row\"\n      }, React.createElement(\"div\", {\n        className: css('ms-DatePicker-day', styles.day, (_a = {}, _a['ms-DatePicker-week--highlighted ' + styles.weekIsHighlighted] = selectedDateWeekNumber === weekNumbers[weekIndex], _a))\n      }, React.createElement(\"span\", null, weekNumbers[weekIndex]))), week.map(function (day, dayIndex) {\n        var _a, _b;\n\n        var isNavigatedDate = compareDates(navigatedDate, day.originalDate);\n        return React.createElement(\"td\", {\n          key: day.key,\n          onClick: day.isInBounds ? day.onSelected : undefined,\n          className: css(styles.dayWrapper, 'ms-DatePicker-day', _this._getHighlightedCornerStyle(weekCorners, dayIndex, weekIndex), (_a = {}, _a['ms-DatePicker-weekBackground ' + styles.weekBackground] = day.isSelected && (dateRangeType === DateRangeType.Week || dateRangeType === DateRangeType.WorkWeek), _a['ms-DatePicker-dayBackground ' + styles.dayBackground] = dateRangeType === DateRangeType.Day, _a['ms-DatePicker-day--highlighted ' + styles.dayIsHighlighted] = day.isSelected && dateRangeType === DateRangeType.Day, _a['ms-DatePicker-day--infocus ' + styles.dayIsFocused] = day.isInBounds && day.isInMonth, _a['ms-DatePicker-day--outfocus ' + styles.dayIsUnfocused] = day.isInBounds && !day.isInMonth, _a[styles.daySelection] = dateRangeType === DateRangeType.Day, _a[styles.weekSelection] = dateRangeType === DateRangeType.Week || dateRangeType === DateRangeType.WorkWeek, _a[styles.monthSelection] = dateRangeType === DateRangeType.Month, _a)),\n          ref: function ref(element) {\n            return _this._setDayCellRef(element, day, isNavigatedDate);\n          },\n          onMouseOver: dateRangeType !== DateRangeType.Day && day.isInBounds ? _this._onDayMouseOver(day.originalDate, weekIndex, dayIndex, dateRangeType) : undefined,\n          onMouseLeave: dateRangeType !== DateRangeType.Day && day.isInBounds ? _this._onDayMouseLeave(day.originalDate, weekIndex, dayIndex, dateRangeType) : undefined,\n          onMouseDown: dateRangeType !== DateRangeType.Day && day.isInBounds ? _this._onDayMouseDown(day.originalDate, weekIndex, dayIndex, dateRangeType) : undefined,\n          onMouseUp: dateRangeType !== DateRangeType.Day && day.isInBounds ? _this._onDayMouseUp(day.originalDate, weekIndex, dayIndex, dateRangeType) : undefined,\n          role: 'gridcell'\n        }, React.createElement(\"button\", {\n          key: day.key + 'button',\n          onClick: day.isInBounds ? day.onSelected : undefined,\n          className: css(styles.day, 'ms-DatePicker-day-button', (_b = {}, _b['ms-DatePicker-day--disabled ' + styles.dayIsDisabled] = !day.isInBounds, _b['ms-DatePicker-day--today ' + styles.dayIsToday] = day.isToday, _b)),\n          onKeyDown: _this._onDayKeyDown(day.originalDate, weekIndex, dayIndex),\n          \"aria-label\": dateTimeFormatter.formatMonthDayYear(day.originalDate, strings),\n          id: isNavigatedDate ? activeDescendantId : undefined,\n          \"aria-readonly\": true,\n          \"aria-current\": day.isToday ? 'date' : undefined,\n          \"aria-selected\": day.isInBounds ? day.isSelected : undefined,\n          \"data-is-focusable\": allFocusable || (day.isInBounds ? true : undefined),\n          ref: function ref(element) {\n            return _this._setDayRef(element, day, isNavigatedDate);\n          },\n          disabled: !allFocusable && !day.isInBounds,\n          \"aria-disabled\": !day.isInBounds,\n          type: \"button\"\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\"\n        }, dateTimeFormatter.formatDay(day.originalDate))));\n      }));\n    })))));\n  };\n\n  CalendarDay.prototype.focus = function () {\n    if (this.navigatedDay) {\n      this.navigatedDay.tabIndex = 0;\n      this.navigatedDay.focus();\n    }\n  };\n\n  CalendarDay.prototype._setDayRef = function (element, day, isNavigatedDate) {\n    if (isNavigatedDate) {\n      this.navigatedDay = element;\n    }\n  };\n\n  CalendarDay.prototype._setDayCellRef = function (element, day, isNavigatedDate) {\n    this.days[day.key] = element;\n  };\n\n  CalendarDay.prototype._getWeekCornerStyles = function (weeks, dateRangeType) {\n    var _this = this;\n\n    var weekCornersStyled = {};\n\n    switch (dateRangeType) {\n      case DateRangeType.Month:\n        /* need to handle setting all of the corners on arbitrarily shaped blobs\n              __\n           __|A |\n          |B |C |__\n          |D |E |F |\n                   in this case, A needs top left rounded, top right rounded\n          B needs top left rounded\n          C doesn't need any rounding\n          D needs bottom left rounded\n          E doesn't need any rounding\n          F needs top right rounding\n        */\n        // if there's an item above, lose both top corners. Item below, lose both bottom corners, etc.\n        weeks.forEach(function (week, weekIndex) {\n          week.forEach(function (day, dayIndex) {\n            var above = weeks[weekIndex - 1] && weeks[weekIndex - 1][dayIndex] && weeks[weekIndex - 1][dayIndex].originalDate.getMonth() === weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var below = weeks[weekIndex + 1] && weeks[weekIndex + 1][dayIndex] && weeks[weekIndex + 1][dayIndex].originalDate.getMonth() === weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var left = weeks[weekIndex][dayIndex - 1] && weeks[weekIndex][dayIndex - 1].originalDate.getMonth() === weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var right = weeks[weekIndex][dayIndex + 1] && weeks[weekIndex][dayIndex + 1].originalDate.getMonth() === weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var roundedTopLeft = !above && !left;\n            var roundedTopRight = !above && !right;\n            var roundedBottomLeft = !below && !left;\n            var roundedBottomRight = !below && !right;\n            var style = '';\n\n            if (roundedTopLeft) {\n              style = getRTL() ? style.concat(styles.topRightCornerDate + ' ') : style.concat(styles.topLeftCornerDate + ' ');\n            }\n\n            if (roundedTopRight) {\n              style = getRTL() ? style.concat(styles.topLeftCornerDate + ' ') : style.concat(styles.topRightCornerDate + ' ');\n            }\n\n            if (roundedBottomLeft) {\n              style = getRTL() ? style.concat(styles.bottomRightCornerDate + ' ') : style.concat(styles.bottomLeftCornerDate + ' ');\n            }\n\n            if (roundedBottomRight) {\n              style = getRTL() ? style.concat(styles.bottomLeftCornerDate + ' ') : style.concat(styles.bottomRightCornerDate + ' ');\n            }\n\n            if (!above) {\n              style = style.concat(styles.topDate + ' ');\n            }\n\n            if (!below) {\n              style = style.concat(styles.bottomDate + ' ');\n            }\n\n            if (!right) {\n              style = style.concat(styles.rightDate + ' ');\n            }\n\n            if (!left) {\n              style = style.concat(styles.leftdate + ' ');\n            }\n\n            weekCornersStyled[weekIndex + '_' + dayIndex] = style;\n          });\n        });\n        break;\n\n      case DateRangeType.Week:\n      case DateRangeType.WorkWeek:\n        weeks.forEach(function (week, weekIndex) {\n          var minIndex = findIndex(week, function (item) {\n            return item.isInBounds;\n          });\n\n          var maxIndex = _this._findLastIndex(week, function (item) {\n            return item.isInBounds;\n          });\n\n          var leftStyle = styles.topLeftCornerDate + ' ' + styles.bottomLeftCornerDate;\n          var rightStyle = styles.topRightCornerDate + ' ' + styles.bottomRightCornerDate;\n          weekCornersStyled[weekIndex + '_' + minIndex] = getRTL() ? rightStyle : leftStyle;\n          weekCornersStyled[weekIndex + '_' + maxIndex] = getRTL() ? leftStyle : rightStyle;\n        });\n        break;\n    }\n\n    return weekCornersStyled;\n  };\n\n  CalendarDay.prototype._getHighlightedCornerStyle = function (weekCorners, dayIndex, weekIndex) {\n    var cornerStyle = weekCorners[weekIndex + '_' + dayIndex] ? weekCorners[weekIndex + '_' + dayIndex] : '';\n    return cornerStyle;\n  };\n\n  CalendarDay.prototype._navigateMonthEdge = function (ev, date, weekIndex, dayIndex) {\n    var _a = this.props,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate;\n    var targetDate = undefined;\n\n    if (weekIndex === 0 && ev.which === KeyCodes.up) {\n      targetDate = addWeeks(date, -1);\n    } else if (weekIndex === this.state.weeks.length - 1 && ev.which === KeyCodes.down) {\n      targetDate = addWeeks(date, 1);\n    } else if (dayIndex === 0 && ev.which === getRTLSafeKeyCode(KeyCodes.left)) {\n      targetDate = addDays(date, -1);\n    } else if (dayIndex === DAYS_IN_WEEK - 1 && ev.which === getRTLSafeKeyCode(KeyCodes.right)) {\n      targetDate = addDays(date, 1);\n    } // Don't navigate to out-of-bounds date\n\n\n    if (targetDate && (minDate ? compareDatePart(minDate, targetDate) < 1 : true) && (maxDate ? compareDatePart(targetDate, maxDate) < 1 : true)) {\n      this.props.onNavigateDate(targetDate, true);\n      ev.preventDefault();\n    }\n  };\n\n  CalendarDay.prototype._applyFunctionToDayRefs = function (func) {\n    var _this = this;\n\n    if (this.state.weeks) {\n      this.state.weeks.forEach(function (week, weekIndex) {\n        week.forEach(function (day) {\n          var ref = _this.days[day.key];\n          func(ref, day, weekIndex);\n        });\n      });\n    }\n  };\n\n  CalendarDay.prototype._getWeeks = function (propsToUse) {\n    var navigatedDate = propsToUse.navigatedDate,\n        selectedDate = propsToUse.selectedDate,\n        dateRangeType = propsToUse.dateRangeType,\n        firstDayOfWeek = propsToUse.firstDayOfWeek,\n        today = propsToUse.today,\n        minDate = propsToUse.minDate,\n        maxDate = propsToUse.maxDate,\n        showSixWeeksByDefault = propsToUse.showSixWeeksByDefault,\n        workWeekDays = propsToUse.workWeekDays;\n    var date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n    var todaysDate = today || new Date();\n    var weeks = []; // Cycle the date backwards to get to the first day of the week.\n\n    while (date.getDay() !== firstDayOfWeek) {\n      date.setDate(date.getDate() - 1);\n    } // a flag to indicate whether all days of the week are in the month\n\n\n    var isAllDaysOfWeekOutOfMonth = false; // in work week view we want to select the whole week\n\n    var selectedDateRangeType = dateRangeType === DateRangeType.WorkWeek ? DateRangeType.Week : dateRangeType;\n    var selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays);\n\n    if (dateRangeType !== DateRangeType.Day) {\n      selectedDates = this._getBoundedDateRange(selectedDates, minDate, maxDate);\n    }\n\n    var shouldGetWeeks = true;\n\n    for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n      var week = [];\n      isAllDaysOfWeekOutOfMonth = true;\n\n      for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n        // Casting date parameter as an any to avoid [ object Object ] error.\n        var originalDate = new Date(date);\n        var dayInfo = {\n          key: date.toString(),\n          date: date.getDate().toString(),\n          originalDate: originalDate,\n          isInMonth: date.getMonth() === navigatedDate.getMonth(),\n          isToday: compareDates(todaysDate, date),\n          isSelected: isInDateRangeArray(date, selectedDates),\n          onSelected: this._onSelectDate.bind(this, originalDate),\n          isInBounds: (minDate ? compareDatePart(minDate, date) < 1 : true) && (maxDate ? compareDatePart(date, maxDate) < 1 : true) && !this._getIsRestrictedDate(date)\n        };\n        week.push(dayInfo);\n\n        if (dayInfo.isInMonth) {\n          isAllDaysOfWeekOutOfMonth = false;\n        }\n\n        date.setDate(date.getDate() + 1);\n      } // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n\n\n      shouldGetWeeks = showSixWeeksByDefault ? !isAllDaysOfWeekOutOfMonth || weekIndex <= 5 : !isAllDaysOfWeekOutOfMonth;\n\n      if (shouldGetWeeks) {\n        weeks.push(week);\n      }\n    }\n\n    return weeks;\n  };\n\n  CalendarDay.prototype._getIsRestrictedDate = function (date) {\n    var restrictedDates = this.props.restrictedDates;\n\n    if (!restrictedDates) {\n      return false;\n    }\n\n    var restrictedDate = find(restrictedDates, function (rd) {\n      return compareDates(rd, date);\n    });\n    return restrictedDate ? true : false;\n  };\n\n  CalendarDay.prototype._getBoundedDateRange = function (dateRange, minDate, maxDate) {\n    var boundedDateRange = __spreadArrays(dateRange);\n\n    if (minDate) {\n      boundedDateRange = boundedDateRange.filter(function (date) {\n        return compareDatePart(date, minDate) >= 0;\n      });\n    }\n\n    if (maxDate) {\n      boundedDateRange = boundedDateRange.filter(function (date) {\n        return compareDatePart(date, maxDate) <= 0;\n      });\n    }\n\n    return boundedDateRange;\n  };\n  /**\n   * Returns the index of the last element in the array where the predicate is true, and -1\n   * otherwise\n   * @param items Array of items to be iterated over using the predicate\n   * @param predicate find calls predicate once for each element of the array, in descending\n   * order, until it finds one where predicate returns true if such an element is found.\n   */\n\n\n  CalendarDay.prototype._findLastIndex = function (items, predicate) {\n    for (var i = items.length - 1; i >= 0; i--) {\n      var item = items[i];\n\n      if (predicate(item)) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  return CalendarDay;\n}(React.Component);\n\nexport { CalendarDay };","map":null,"metadata":{},"sourceType":"module"}