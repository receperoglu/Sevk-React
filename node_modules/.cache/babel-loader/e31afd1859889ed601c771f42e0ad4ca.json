{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { AnimationVariables, FontWeights, getGlobalClassNames, keyframes } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar globalClassNames = {\n  root: 'ms-TeachingBubble',\n  body: 'ms-TeachingBubble-body',\n  bodyContent: 'ms-TeachingBubble-bodycontent',\n  closeButton: 'ms-TeachingBubble-closebutton',\n  content: 'ms-TeachingBubble-content',\n  footer: 'ms-TeachingBubble-footer',\n  header: 'ms-TeachingBubble-header',\n  headerIsCondensed: 'ms-TeachingBubble-header--condensed',\n  headerIsSmall: 'ms-TeachingBubble-header--small',\n  headerIsLarge: 'ms-TeachingBubble-header--large',\n  headline: 'ms-TeachingBubble-headline',\n  image: 'ms-TeachingBubble-image',\n  primaryButton: 'ms-TeachingBubble-primaryButton',\n  secondaryButton: 'ms-TeachingBubble-secondaryButton',\n  subText: 'ms-TeachingBubble-subText',\n  // TODO: Button global class name usage should be converted to a styles function once\n  //        Button supports JS styling, which means these button names can be removed.\n  button: 'ms-Button',\n  buttonLabel: 'ms-Button-label'\n};\nvar opacityFadeIn = memoizeFunction(function () {\n  return keyframes({\n    '0%': {\n      opacity: 0,\n      animationTimingFunction: AnimationVariables.easeFunction1,\n      transform: 'scale3d(.90,.90,.90)'\n    },\n    '100%': {\n      opacity: 1,\n      transform: 'scale3d(1,1,1)'\n    }\n  });\n});\n\nvar rootStyle = function rootStyle(isWide, calloutProps) {\n  var _a = calloutProps || {},\n      calloutWidth = _a.calloutWidth,\n      calloutMaxWidth = _a.calloutMaxWidth;\n\n  return [{\n    display: 'block',\n    maxWidth: 364,\n    border: 0,\n    outline: 'transparent',\n    width: calloutWidth || 'calc(100% + 1px)',\n    animationName: \"\" + opacityFadeIn(),\n    animationDuration: '300ms',\n    animationTimingFunction: 'linear',\n    animationFillMode: 'both'\n  }, isWide && {\n    maxWidth: calloutMaxWidth || 456\n  }];\n};\n\nvar headerStyle = function headerStyle(classNames, hasCondensedHeadline, hasSmallHeadline) {\n  if (hasCondensedHeadline) {\n    return [classNames.headerIsCondensed, {\n      marginBottom: 14\n    }];\n  }\n\n  return [hasSmallHeadline && classNames.headerIsSmall, !hasSmallHeadline && classNames.headerIsLarge, {\n    selectors: {\n      ':not(:last-child)': {\n        marginBottom: 14\n      }\n    }\n  }];\n};\n\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c;\n\n  var hasCondensedHeadline = props.hasCondensedHeadline,\n      hasSmallHeadline = props.hasSmallHeadline,\n      hasCloseButton = props.hasCloseButton,\n      hasHeadline = props.hasHeadline,\n      isWide = props.isWide,\n      primaryButtonClassName = props.primaryButtonClassName,\n      secondaryButtonClassName = props.secondaryButtonClassName,\n      theme = props.theme,\n      _d = props.calloutProps,\n      calloutProps = _d === void 0 ? {\n    className: undefined,\n    theme: theme\n  } : _d;\n  var hasLargeHeadline = !hasCondensedHeadline && !hasSmallHeadline;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(globalClassNames, theme);\n  return {\n    root: [classNames.root, fonts.medium, calloutProps.className],\n    body: [classNames.body, hasCloseButton && !hasHeadline && {\n      marginRight: 24\n    }, {\n      selectors: {\n        ':not(:last-child)': {\n          marginBottom: 20\n        }\n      }\n    }],\n    bodyContent: [classNames.bodyContent, {\n      padding: '20px 24px 20px 24px'\n    }],\n    closeButton: [classNames.closeButton, {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      margin: '15px 15px 0 0',\n      borderRadius: 0,\n      color: palette.white,\n      fontSize: fonts.small.fontSize,\n      selectors: {\n        ':hover': {\n          background: palette.themeDarkAlt,\n          color: palette.white\n        },\n        ':active': {\n          background: palette.themeDark,\n          color: palette.white\n        },\n        ':focus': {\n          border: \"1px solid \" + semanticColors.variantBorder\n        }\n      }\n    }],\n    content: __spreadArrays([classNames.content], rootStyle(isWide), [isWide && {\n      display: 'flex'\n    }]),\n    footer: [classNames.footer, {\n      display: 'flex',\n      flex: 'auto',\n      alignItems: 'center',\n      color: palette.white,\n      selectors: (_a = {}, // TODO: global class name usage should be converted to a styles function once Button supports JS styling\n      _a[\".\" + classNames.button + \":not(:first-child)\"] = {\n        marginLeft: 10\n      }, _a)\n    }],\n    header: __spreadArrays([classNames.header], headerStyle(classNames, hasCondensedHeadline, hasSmallHeadline), [hasCloseButton && {\n      marginRight: 24\n    }, (hasCondensedHeadline || hasSmallHeadline) && [fonts.medium, {\n      fontWeight: FontWeights.semibold\n    }]]),\n    headline: [classNames.headline, {\n      margin: 0,\n      color: palette.white,\n      fontWeight: FontWeights.semibold\n    }, hasLargeHeadline && [{\n      fontSize: fonts.xLarge.fontSize\n    }]],\n    imageContent: [classNames.header, classNames.image, isWide && {\n      display: 'flex',\n      alignItems: 'center',\n      maxWidth: 154\n    }],\n    primaryButton: [classNames.primaryButton, primaryButtonClassName, {\n      backgroundColor: palette.white,\n      borderColor: palette.white,\n      color: palette.themePrimary,\n      whiteSpace: 'nowrap',\n      selectors: (_b = {}, // TODO: global class name usage should be converted to a styles function once Button supports JS styling\n      _b[\".\" + classNames.buttonLabel] = fonts.medium, _b[':hover'] = {\n        backgroundColor: palette.themeLighter,\n        borderColor: palette.themeLighter,\n        color: palette.themePrimary\n      }, _b[':focus'] = {\n        backgroundColor: palette.themeLighter,\n        borderColor: palette.white\n      }, _b[':active'] = {\n        backgroundColor: palette.white,\n        borderColor: palette.white,\n        color: palette.themePrimary\n      }, _b)\n    }],\n    secondaryButton: [classNames.secondaryButton, secondaryButtonClassName, {\n      backgroundColor: palette.themePrimary,\n      borderColor: palette.white,\n      whiteSpace: 'nowrap',\n      selectors: (_c = {}, // TODO: global class name usage should be converted to a styles function once Button supports JS styling\n      _c[\".\" + classNames.buttonLabel] = [fonts.medium, {\n        color: palette.white\n      }], _c['&:hover, &:focus'] = {\n        backgroundColor: palette.themeDarkAlt,\n        borderColor: palette.white\n      }, _c[':active'] = {\n        backgroundColor: palette.themePrimary,\n        borderColor: palette.white\n      }, _c)\n    }],\n    subText: [classNames.subText, {\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      color: palette.white,\n      fontWeight: FontWeights.regular\n    }],\n    subComponentStyles: {\n      callout: {\n        root: __spreadArrays(rootStyle(isWide, calloutProps), [fonts.medium]),\n        beak: [{\n          background: palette.themePrimary\n        }],\n        calloutMain: [{\n          background: palette.themePrimary\n        }]\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}