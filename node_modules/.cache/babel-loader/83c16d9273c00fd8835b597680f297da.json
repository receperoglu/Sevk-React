{"ast":null,"code":"import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport TimeConstants from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\n\nexport function addDays(date, days) {\n  var result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\n\nexport function addWeeks(date, weeks) {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\n\nexport function addMonths(date, months) {\n  var result = new Date(date.getTime());\n  var newMonth = result.getMonth() + months;\n  result.setMonth(newMonth); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\n\nexport function addYears(date, years) {\n  var result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\n\nexport function getMonthStart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\n\nexport function getMonthEnd(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\n\nexport function getYearStart(date) {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\n\nexport function getYearEnd(date) {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\n\nexport function setMonth(date, month) {\n  return addMonths(date, month - date.getMonth());\n}\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\n\nexport function compareDates(date1, date2) {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  }\n}\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\n\nexport function compareDatePart(date1, date2) {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\n\nexport function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView) {\n  if (daysToSelectInDayView === void 0) {\n    daysToSelectInDayView = 1;\n  }\n\n  var datesArray = new Array();\n  var startDate;\n  var endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  } // Populate the dates array with the dates in range\n\n\n  var nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\n\nexport function isInDateRangeArray(date, dateRange) {\n  for (var _i = 0, dateRange_1 = dateRange; _i < dateRange_1.length; _i++) {\n    var dateInRange = dateRange_1[_i];\n\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\n\nexport function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n  var selectedYear = navigatedDate.getFullYear();\n  var selectedMonth = navigatedDate.getMonth();\n  var dayOfMonth = 1;\n  var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  var endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n  var weeksArray = [];\n\n  for (var i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n\n  return weeksArray;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\n\nexport function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n  // First four-day week of the year - minumum days count\n  var fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getStartDateOfWeek(date, firstDayOfWeek) {\n  var daysOffset = firstDayOfWeek - date.getDay();\n\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getEndDateOfWeek(date, firstDayOfWeek) {\n  var lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  var daysOffset = lastDayOfWeek - date.getDay();\n\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\n\nfunction getDatePart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */\n\n\nexport function getDatePartHashValue(date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\n\nfunction getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n  var dayOfYear = getDayOfYear(date) - 1;\n  var num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;\n  var lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n  var num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  var num3 = dayOfYear - num2;\n\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\n\n\nfunction getFirstDayWeekOfYear(date, firstDayOfWeek) {\n  var num = getDayOfYear(date) - 1;\n  var num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;\n  var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\n\n\nfunction adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\n\n\nfunction getDayOfYear(date) {\n  var month = date.getMonth();\n  var year = date.getFullYear();\n  var daysUntilDate = 0;\n\n  for (var i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n  return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\n\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}","map":null,"metadata":{},"sourceType":"module"}