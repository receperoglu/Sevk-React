{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\n\nvar Async =\n/** @class */\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Async(parent, onError) {\n    this._timeoutIds = null;\n    this._immediateIds = null;\n    this._intervalIds = null;\n    this._animationFrameIds = null;\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n\n    this._noop = function () {\n      /* do nothing */\n    };\n  }\n  /**\n   * Dispose function, clears all async operations.\n   */\n\n\n  Async.prototype.dispose = function () {\n    var id;\n    this._isDisposed = true;\n    this._parent = null; // Clear timeouts.\n\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    } // Clear immediates.\n\n\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    } // Clear intervals.\n\n\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n\n      this._intervalIds = null;\n    } // Clear animation frames.\n\n\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  };\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setTimeout = function (callback, duration) {\n    var _this = this;\n\n    var timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._timeoutIds) {\n            delete _this._timeoutIds[timeoutId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          if (_this._onErrorHandler) {\n            _this._onErrorHandler(e);\n          }\n        }\n      }, duration);\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  };\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearTimeout = function (id) {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  };\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setImmediate = function (callback, targetElement) {\n    var _this = this;\n\n    var immediateId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      var setImmediateCallback = function setImmediateCallback() {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._immediateIds) {\n            delete _this._immediateIds[immediateId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  };\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n\n\n  Async.prototype.clearImmediate = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  };\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setInterval = function (callback, duration) {\n    var _this = this;\n\n    var intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(function () {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      }, duration);\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  };\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearInterval = function (id) {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  };\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.throttle = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      return this._noop;\n    }\n\n    var waitMS = wait || 0;\n    var leading = true;\n    var trailing = true;\n    var lastExecuteTime = 0;\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    var callback = function callback(userCall) {\n      var now = Date.now();\n      var delta = now - lastExecuteTime;\n      var waitLength = leading ? waitMS - delta : waitMS;\n\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n\n        if (timeoutId) {\n          _this.clearTimeout(timeoutId);\n\n          timeoutId = null;\n        }\n\n        lastResult = func.apply(_this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function resultFunction() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    return resultFunction;\n  };\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.debounce = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      var noOpFunction = function noOpFunction() {\n        /** Do nothing */\n      };\n\n      noOpFunction.cancel = function () {\n        return;\n      };\n\n      noOpFunction.flush = function () {\n        return null;\n      };\n\n      noOpFunction.pending = function () {\n        return false;\n      };\n\n      return noOpFunction;\n    }\n\n    var waitMS = wait || 0;\n    var leading = false;\n    var trailing = true;\n    var maxWait = null;\n    var lastCallTime = 0;\n    var lastExecuteTime = Date.now();\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    var markExecuted = function markExecuted(time) {\n      if (timeoutId) {\n        _this.clearTimeout(timeoutId);\n\n        timeoutId = null;\n      }\n\n      lastExecuteTime = time;\n    };\n\n    var invokeFunction = function invokeFunction(time) {\n      markExecuted(time);\n      lastResult = func.apply(_this._parent, lastArgs);\n    };\n\n    var callback = function callback(userCall) {\n      var now = Date.now();\n      var executeImmediately = false;\n\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n\n        lastCallTime = now;\n      }\n\n      var delta = now - lastCallTime;\n      var waitLength = waitMS - delta;\n      var maxWaitDelta = now - lastExecuteTime;\n      var maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    var pending = function pending() {\n      return !!timeoutId;\n    };\n\n    var cancel = function cancel() {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    var flush = function flush() {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function resultFunction() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n    return resultFunction;\n  };\n\n  Async.prototype.requestAnimationFrame = function (callback, targetElement) {\n    var _this = this;\n\n    var animationFrameId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      var animationFrameCallback = function animationFrameCallback() {\n        try {\n          // Now delete the record and call the callback.\n          if (_this._animationFrameIds) {\n            delete _this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame ? win.requestAnimationFrame(animationFrameCallback) : win.setTimeout(animationFrameCallback, 0);\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  };\n\n  Async.prototype.cancelAnimationFrame = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype._logError = function (e) {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  };\n\n  return Async;\n}();\n\nexport { Async };","map":null,"metadata":{},"sourceType":"module"}