{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getRTL, format } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport * as stylesImport from './Calendar.scss';\nimport { Icon } from '../../Icon';\nvar styles = stylesImport;\nvar CELL_COUNT = 12;\nvar DefaultCalendarYearStrings = {\n  prevRangeAriaLabel: undefined,\n  nextRangeAriaLabel: undefined\n};\nvar DefaultNavigationIcons = {\n  leftNavigation: 'Up',\n  rightNavigation: 'Down',\n  closeIcon: 'CalculatorMultiply'\n};\n\nvar CalendarYearGridCell =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearGridCell, _super);\n\n  function CalendarYearGridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._buttonRef = React.createRef();\n\n    _this._onRenderYear = function () {\n      var _a = _this.props,\n          year = _a.year,\n          onRenderYear = _a.onRenderYear;\n\n      if (onRenderYear) {\n        return onRenderYear(year);\n      }\n\n      return year;\n    };\n\n    _this._onClick = function () {\n      if (_this.props.onSelectYear) {\n        _this.props.onSelectYear(_this.props.year);\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (_this.props.onSelectYear && ev.which === KeyCodes.enter) {\n        _this.props.onSelectYear(_this.props.year);\n      }\n    };\n\n    return _this;\n  }\n\n  CalendarYearGridCell.prototype.focus = function () {\n    if (this._buttonRef.current) {\n      this._buttonRef.current.focus();\n    }\n  };\n\n  CalendarYearGridCell.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        year = _b.year,\n        selected = _b.selected,\n        disabled = _b.disabled,\n        onSelectYear = _b.onSelectYear;\n    return React.createElement(\"button\", {\n      className: css('ms-DatePicker-yearOption', styles.yearOption, (_a = {}, _a['ms-DatePicker-day--highlighted ' + styles.yearIsHighlighted] = selected, _a['ms-DatePicker-yearOption--disabled ' + styles.yearOptionIsDisabled] = disabled, _a)),\n      type: \"button\",\n      role: \"gridcell\",\n      onClick: !disabled && onSelectYear ? this._onClick : undefined,\n      onKeyDown: !disabled && onSelectYear ? this._onKeyDown : undefined,\n      disabled: disabled,\n      \"aria-label\": String(year),\n      \"aria-selected\": selected,\n      ref: this._buttonRef\n    }, this._onRenderYear());\n  };\n\n  return CalendarYearGridCell;\n}(React.Component);\n\nvar CalendarYearGrid =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearGrid, _super);\n\n  function CalendarYearGrid() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._selectedCellRef = React.createRef();\n    _this._currentCellRef = React.createRef();\n\n    _this._renderCell = function (year) {\n      var selected = year === _this.props.selectedYear;\n      var _a = _this.props,\n          minYear = _a.minYear,\n          maxYear = _a.maxYear,\n          onSelectYear = _a.onSelectYear;\n      var disabled = minYear !== undefined && year < minYear || maxYear !== undefined && year > maxYear;\n      var current = year === new Date().getFullYear();\n      return React.createElement(CalendarYearGridCell, {\n        key: year,\n        year: year,\n        selected: selected,\n        current: current,\n        disabled: disabled,\n        onSelectYear: onSelectYear,\n        ref: selected ? _this._selectedCellRef : current ? _this._currentCellRef : undefined\n      });\n    };\n\n    return _this;\n  }\n\n  CalendarYearGrid.prototype.focus = function () {\n    if (this._selectedCellRef.current) {\n      this._selectedCellRef.current.focus();\n    } else if (this._currentCellRef.current) {\n      this._currentCellRef.current.focus();\n    }\n  };\n\n  CalendarYearGrid.prototype.render = function () {\n    var _a = this.props,\n        fromYear = _a.fromYear,\n        toYear = _a.toYear;\n    var year = fromYear;\n    var cells = [];\n\n    while (year <= toYear) {\n      cells.push(this._renderCell(year));\n      year++;\n    }\n\n    return React.createElement(FocusZone, null, React.createElement(\"div\", {\n      className: css('ms-DatePicker-optionGrid', styles.optionGrid),\n      role: \"grid\"\n    }, React.createElement(\"div\", {\n      role: \"row\"\n    }, cells)));\n  };\n\n  return CalendarYearGrid;\n}(React.Component);\n\nvar CalendarYearNavPrev =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearNavPrev, _super);\n\n  function CalendarYearNavPrev() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onSelectPrev = function () {\n      if (!_this.isDisabled && _this.props.onSelectPrev) {\n        _this.props.onSelectPrev();\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onSelectPrev();\n      }\n    };\n\n    return _this;\n  }\n\n  CalendarYearNavPrev.prototype.render = function () {\n    var _a;\n\n    var iconStrings = this.props.navigationIcons || DefaultNavigationIcons;\n    var strings = this.props.strings || DefaultCalendarYearStrings;\n    var prevRangeAriaLabel = strings.prevRangeAriaLabel;\n    var prevRange = {\n      fromYear: this.props.fromYear - CELL_COUNT,\n      toYear: this.props.toYear - CELL_COUNT\n    };\n    var prevAriaLabel = prevRangeAriaLabel ? typeof prevRangeAriaLabel === 'string' ? prevRangeAriaLabel : prevRangeAriaLabel(prevRange) : undefined;\n    var disabled = this.isDisabled;\n    var onSelectPrev = this.props.onSelectPrev;\n    return React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevDecade', styles.prevDecade, (_a = {}, _a['ms-DatePicker-prevDecade--disabled ' + styles.prevDecadeIsDisabled] = disabled, _a)),\n      onClick: !disabled && onSelectPrev ? this._onSelectPrev : undefined,\n      onKeyDown: !disabled && onSelectPrev ? this._onKeyDown : undefined,\n      type: \"button\",\n      tabIndex: 0,\n      title: prevAriaLabel,\n      disabled: disabled\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? iconStrings.rightNavigation : iconStrings.leftNavigation\n    }));\n  };\n\n  Object.defineProperty(CalendarYearNavPrev.prototype, \"isDisabled\", {\n    get: function get() {\n      var minYear = this.props.minYear;\n      return minYear !== undefined && this.props.fromYear < minYear;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CalendarYearNavPrev;\n}(React.Component);\n\nvar CalendarYearNavNext =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearNavNext, _super);\n\n  function CalendarYearNavNext() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onSelectNext = function () {\n      if (!_this.isDisabled && _this.props.onSelectNext) {\n        _this.props.onSelectNext();\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onSelectNext();\n      }\n    };\n\n    return _this;\n  }\n\n  CalendarYearNavNext.prototype.render = function () {\n    var _a;\n\n    var iconStrings = this.props.navigationIcons || DefaultNavigationIcons;\n    var strings = this.props.strings || DefaultCalendarYearStrings;\n    var nextRangeAriaLabel = strings.nextRangeAriaLabel;\n    var nextRange = {\n      fromYear: this.props.fromYear + CELL_COUNT,\n      toYear: this.props.toYear + CELL_COUNT\n    };\n    var nextAriaLabel = nextRangeAriaLabel ? typeof nextRangeAriaLabel === 'string' ? nextRangeAriaLabel : nextRangeAriaLabel(nextRange) : undefined;\n    var onSelectNext = this.props.onSelectNext;\n    var disabled = this.isDisabled;\n    return React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextDecade', styles.nextDecade, (_a = {}, _a['ms-DatePicker-nextDecade--disabled ' + styles.nextDecadeIsDisabled] = disabled, _a)),\n      onClick: !disabled && onSelectNext ? this._onSelectNext : undefined,\n      onKeyDown: !disabled && onSelectNext ? this._onKeyDown : undefined,\n      type: \"button\",\n      tabIndex: 0,\n      title: nextAriaLabel,\n      disabled: this.isDisabled\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? iconStrings.leftNavigation : iconStrings.rightNavigation\n    }));\n  };\n\n  Object.defineProperty(CalendarYearNavNext.prototype, \"isDisabled\", {\n    get: function get() {\n      var maxYear = this.props.maxYear;\n      return maxYear !== undefined && this.props.fromYear + CELL_COUNT > maxYear;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CalendarYearNavNext;\n}(React.Component);\n\nvar CalendarYearNav =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearNav, _super);\n\n  function CalendarYearNav() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CalendarYearNav.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-decadeComponents', styles.decadeComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(CalendarYearNavPrev, __assign({}, this.props)), React.createElement(CalendarYearNavNext, __assign({}, this.props))));\n  };\n\n  return CalendarYearNav;\n}(React.Component);\n\nvar CalendarYearTitle =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearTitle, _super);\n\n  function CalendarYearTitle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onHeaderSelect = function () {\n      if (_this.props.onHeaderSelect) {\n        _this.props.onHeaderSelect(true);\n      }\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      if (_this.props.onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        _this.props.onHeaderSelect(true);\n      }\n    };\n\n    _this._onRenderYear = function (year) {\n      if (_this.props.onRenderYear) {\n        return _this.props.onRenderYear(year);\n      }\n\n      return year;\n    };\n\n    return _this;\n  }\n\n  CalendarYearTitle.prototype.render = function () {\n    var _a = this.props,\n        fromYear = _a.fromYear,\n        toYear = _a.toYear,\n        onHeaderSelect = _a.onHeaderSelect;\n\n    if (onHeaderSelect) {\n      var strings = this.props.strings || DefaultCalendarYearStrings;\n      var rangeAriaLabel = strings.rangeAriaLabel;\n      var currentDateRange = rangeAriaLabel ? typeof rangeAriaLabel === 'string' ? rangeAriaLabel : rangeAriaLabel(this.props) : undefined;\n      var ariaLabel = strings.headerAriaLabelFormatString ? format(strings.headerAriaLabelFormatString, currentDateRange) : currentDateRange;\n      return React.createElement(\"div\", {\n        className: css('ms-DatePicker-currentDecade js-showYearPicker', styles.currentDecade, styles.headerToggleView),\n        onClick: this._onHeaderSelect,\n        onKeyDown: this._onHeaderKeyDown,\n        \"aria-label\": ariaLabel,\n        role: \"button\",\n        \"aria-atomic\": true,\n        \"aria-live\": \"polite\",\n        tabIndex: 0\n      }, this._onRenderYear(fromYear), \" - \", this._onRenderYear(toYear));\n    }\n\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentDecade js-showYearPicker', styles.currentDecade)\n    }, this._onRenderYear(fromYear), \" - \", this._onRenderYear(toYear));\n  };\n\n  return CalendarYearTitle;\n}(React.Component);\n\nvar CalendarYearHeader =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYearHeader, _super);\n\n  function CalendarYearHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderTitle = function () {\n      if (_this.props.onRenderTitle) {\n        return _this.props.onRenderTitle(_this.props);\n      }\n\n      return React.createElement(CalendarYearTitle, __assign({}, _this.props));\n    };\n\n    _this._onRenderNav = function () {\n      return React.createElement(CalendarYearNav, __assign({}, _this.props));\n    };\n\n    return _this;\n  }\n\n  CalendarYearHeader.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, this._onRenderTitle(), this._onRenderNav());\n  };\n\n  return CalendarYearHeader;\n}(React.Component);\n\nvar CalendarYear =\n/** @class */\nfunction (_super) {\n  __extends(CalendarYear, _super);\n\n  function CalendarYear(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._gridRef = React.createRef();\n\n    _this._onNavNext = function () {\n      _this.setState({\n        fromYear: _this.state.fromYear + CELL_COUNT\n      });\n    };\n\n    _this._onNavPrev = function () {\n      _this.setState({\n        fromYear: _this.state.fromYear - CELL_COUNT\n      });\n    };\n\n    _this._renderHeader = function () {\n      return React.createElement(CalendarYearHeader, __assign({}, _this.props, {\n        fromYear: _this.state.fromYear,\n        toYear: _this.state.fromYear + CELL_COUNT - 1,\n        onSelectPrev: _this._onNavPrev,\n        onSelectNext: _this._onNavNext\n      }));\n    };\n\n    _this._renderGrid = function () {\n      return React.createElement(CalendarYearGrid, __assign({}, _this.props, {\n        fromYear: _this.state.fromYear,\n        toYear: _this.state.fromYear + CELL_COUNT - 1,\n        ref: _this._gridRef\n      }));\n    };\n\n    _this.state = _this._calculateInitialStateFromProps(props);\n    return _this;\n  }\n\n  CalendarYear.prototype.focus = function () {\n    if (this._gridRef.current) {\n      this._gridRef.current.focus();\n    }\n  };\n\n  CalendarYear.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-yearPicker', styles.yearPicker)\n    }, this._renderHeader(), this._renderGrid());\n  };\n\n  CalendarYear.prototype._calculateInitialStateFromProps = function (props) {\n    var selectedYear = props.selectedYear,\n        navigatedYear = props.navigatedYear;\n    var rangeYear = selectedYear || navigatedYear || new Date().getFullYear();\n    var fromYear = Math.floor(rangeYear / 10) * 10;\n    return {\n      fromYear: fromYear,\n      navigatedYear: navigatedYear,\n      selectedYear: selectedYear\n    };\n  };\n\n  return CalendarYear;\n}(React.Component);\n\nexport { CalendarYear };","map":null,"metadata":{},"sourceType":"module"}