{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { initializeComponentRef, warnDeprecations, warnMutuallyExclusive, classNamesFunction, find, getId, isControlled, getNativeProps, divProperties } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ChoiceGroup}\n */\n\nvar ChoiceGroupBase =\n/** @class */\nfunction (_super) {\n  __extends(ChoiceGroupBase, _super);\n\n  function ChoiceGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusCallbacks = {};\n    _this._changeCallbacks = {};\n\n    _this._onBlur = function (ev, option) {\n      _this.setState({\n        keyFocused: undefined\n      });\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, {\n        onChanged: 'onChange'\n      });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey'\n      });\n    }\n\n    var defaultSelectedKey = props.defaultSelectedKey,\n        _a = props.options,\n        options = _a === void 0 ? [] : _a;\n    var validDefaultSelectedKey = !_isControlled(props) && defaultSelectedKey !== undefined && options.some(function (option) {\n      return option.key === defaultSelectedKey;\n    });\n    _this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : _this._getKeyChecked(props)\n    };\n    _this._id = getId('ChoiceGroup');\n    _this._labelId = getId('ChoiceGroupLabel');\n    return _this;\n  }\n\n  Object.defineProperty(ChoiceGroupBase.prototype, \"checkedOption\", {\n    /**\n     * Gets the current checked option.\n     */\n    get: function get() {\n      var _this = this;\n\n      var _a = this.props.options,\n          options = _a === void 0 ? [] : _a;\n      return find(options, function (value) {\n        return value.key === _this.state.keyChecked;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ChoiceGroupBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      var newKeyChecked = this._getKeyChecked(this.props);\n\n      var oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked\n        });\n      }\n    }\n  };\n\n  ChoiceGroupBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.options,\n        options = _b === void 0 ? [] : _b,\n        label = _a.label,\n        required = _a.required,\n        disabled = _a.disabled,\n        name = _a.name;\n    var _c = this.state,\n        keyChecked = _c.keyChecked,\n        keyFocused = _c.keyFocused;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'className', 'required']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      optionsContainIconOrImage: options.some(function (option) {\n        return !!(option.iconProps || option.imageSrc);\n      })\n    });\n    var labelId = this._id + '-label';\n    var ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']); // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n\n    return (// eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", __assign({\n        className: classNames.applicationRole\n      }, divProps), React.createElement(\"div\", __assign({\n        className: classNames.root,\n        role: \"radiogroup\"\n      }, ariaLabelledBy && {\n        'aria-labelledby': ariaLabelledBy\n      }), label && React.createElement(Label, {\n        className: classNames.label,\n        required: required,\n        id: labelId,\n        disabled: disabled\n      }, label), React.createElement(\"div\", {\n        className: classNames.flexContainer\n      }, options.map(function (option) {\n        var innerOptionProps = __assign(__assign({}, option), {\n          focused: option.key === keyFocused,\n          checked: option.key === keyChecked,\n          disabled: option.disabled || disabled,\n          id: _this._getOptionId(option),\n          labelId: _this._getOptionLabelId(option),\n          name: name || _this._id,\n          required: required\n        });\n\n        return React.createElement(ChoiceGroupOption, __assign({\n          key: option.key,\n          onBlur: _this._onBlur,\n          onFocus: _this._onFocus(option.key),\n          onChange: _this._onChange(option.key)\n        }, innerOptionProps));\n      }))))\n    );\n  };\n\n  ChoiceGroupBase.prototype.focus = function () {\n    var _a = this.props.options,\n        options = _a === void 0 ? [] : _a;\n    var optionToFocus = this.checkedOption || options.filter(function (option) {\n      return !option.disabled;\n    })[0];\n    var elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n  };\n\n  ChoiceGroupBase.prototype._onFocus = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = function (ev, option) {\n        _this.setState({\n          keyFocused: key\n        });\n      };\n    }\n\n    return this._focusCallbacks[key];\n  };\n\n  ChoiceGroupBase.prototype._onChange = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = function (evt, option) {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = _this.props,\n            onChanged = _a.onChanged,\n            onChange = _a.onChange; // Only manage state in uncontrolled scenarios.\n\n        if (!_isControlled(_this.props)) {\n          _this.setState({\n            keyChecked: key\n          });\n        } // Get the original option without the `key` prop removed\n\n\n        var originalOption = find(_this.props.options || [], function (value) {\n          return value.key === key;\n        }); // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption, evt);\n        }\n      };\n    }\n\n    return this._changeCallbacks[key];\n  };\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n\n\n  ChoiceGroupBase.prototype._getKeyChecked = function (props) {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    var _a = props.options,\n        options = _a === void 0 ? [] : _a; // eslint-disable-next-line deprecation/deprecation\n\n    var optionsChecked = options.filter(function (option) {\n      return option.checked;\n    });\n    return optionsChecked[0] && optionsChecked[0].key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionId = function (option) {\n    return option.id || this._id + \"-\" + option.key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionLabelId = function (option) {\n    return option.labelId || this._labelId + \"-\" + option.key;\n  };\n\n  return ChoiceGroupBase;\n}(React.Component);\n\nexport { ChoiceGroupBase };\n\nfunction _isControlled(props) {\n  return isControlled(props, 'selectedKey');\n}","map":null,"metadata":{},"sourceType":"module"}