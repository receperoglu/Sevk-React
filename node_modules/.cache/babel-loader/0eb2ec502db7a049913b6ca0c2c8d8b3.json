{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties, initializeComponentRef } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\n\nvar ButtonGridBase =\n/** @class */\nfunction (_super) {\n  __extends(ButtonGridBase, _super);\n\n  function ButtonGridBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    _this._id = props.id || getId();\n    return _this;\n  }\n\n  ButtonGridBase.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var items = props.items,\n        columnCount = props.columnCount,\n        onRenderItem = props.onRenderItem,\n\n    /* eslint-disable deprecation/deprecation */\n    _a = props.ariaPosInSet,\n\n    /* eslint-disable deprecation/deprecation */\n    ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n        _b = props.ariaSetSize,\n        ariaSetSize = _b === void 0 ? props.setSize : _b,\n\n    /* eslint-enable deprecation/deprecation */\n    styles = props.styles,\n        doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n    var htmlProps = getNativeProps(this.props, htmlElementProperties, // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur']);\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme\n    }); // Array to store the cells in the correct row index\n\n    var rowsOfItems = toMatrix(items, columnCount);\n    var content = React.createElement(\"table\", __assign({\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-setsize\": ariaSetSize,\n      id: this._id,\n      role: \"grid\"\n    }, htmlProps, {\n      className: classNames.root\n    }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n      return React.createElement(\"tr\", {\n        role: 'row',\n        key: _this._id + '-' + rowIndex + '-row'\n      }, rows.map(function (cell, cellIndex) {\n        return React.createElement(\"td\", {\n          role: 'presentation',\n          key: _this._id + '-' + cellIndex + '-cell',\n          className: classNames.tableCell\n        }, onRenderItem(cell, cellIndex));\n      }));\n    }))); // Create the table/grid\n\n    return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n      isCircularNavigation: this.props.shouldFocusCircularNavigate,\n      className: classNames.focusedContainer,\n      onBlur: this.props.onBlur\n    }, content);\n  };\n\n  return ButtonGridBase;\n}(React.Component);\n\nexport { ButtonGridBase };\n/**\n * @deprecated - use ButtonGridBase instead\n */\n\nexport var GridBase = ButtonGridBase;","map":null,"metadata":{},"sourceType":"module"}