{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\nimport { assign } from '../../Utilities';\nimport { clamp } from './clamp';\nimport { getColorFromRGBA } from './getColorFromRGBA';\nimport { hsv2hsl } from './hsv2hsl';\nimport { hsv2rgb } from './hsv2rgb'; // Soften: to get closer to the background color's luminance\n// (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n// Luminance multiplier constants for generating shades of a given color\n\nvar WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\n\nvar BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\n\nvar WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\n\nvar BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\n\nvar LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\n\nvar LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\n\nvar ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\n\nvar ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\n\nvar LowLuminanceThreshold = 0.2;\nvar HighLuminanceThreshold = 0.8;\n/** Shades of a given color, from softest to strongest. */\n\nexport var Shade;\n\n(function (Shade) {\n  Shade[Shade[\"Unshaded\"] = 0] = \"Unshaded\";\n  Shade[Shade[\"Shade1\"] = 1] = \"Shade1\";\n  Shade[Shade[\"Shade2\"] = 2] = \"Shade2\";\n  Shade[Shade[\"Shade3\"] = 3] = \"Shade3\";\n  Shade[Shade[\"Shade4\"] = 4] = \"Shade4\";\n  Shade[Shade[\"Shade5\"] = 5] = \"Shade5\";\n  Shade[Shade[\"Shade6\"] = 6] = \"Shade6\";\n  Shade[Shade[\"Shade7\"] = 7] = \"Shade7\";\n  Shade[Shade[\"Shade8\"] = 8] = \"Shade8\"; // remember to update isValidShade()!\n})(Shade || (Shade = {}));\n/**\n * Returns true if the argument is a valid Shade value\n * @param shade - The Shade value to validate.\n */\n\n\nexport function isValidShade(shade) {\n  return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\n}\n\nfunction _isBlack(color) {\n  return color.r === 0 && color.g === 0 && color.b === 0;\n}\n\nfunction _isWhite(color) {\n  return color.r === MAX_COLOR_RGB && color.g === MAX_COLOR_RGB && color.b === MAX_COLOR_RGB;\n}\n\nfunction _darken(hsv, factor) {\n  return {\n    h: hsv.h,\n    s: hsv.s,\n    v: clamp(hsv.v - hsv.v * factor, 100, 0)\n  };\n}\n\nfunction _lighten(hsv, factor) {\n  return {\n    h: hsv.h,\n    s: clamp(hsv.s - hsv.s * factor, 100, 0),\n    v: clamp(hsv.v + (100 - hsv.v) * factor, 100, 0)\n  };\n}\n\nexport function isDark(color) {\n  return hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param color - The base color whose shade is to be computed\n * @param shade - The shade of the base color to compute\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\n\nexport function getShade(color, shade, isInverted) {\n  if (isInverted === void 0) {\n    isInverted = false;\n  }\n\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  var hsl = hsv2hsl(color.h, color.s, color.v);\n  var hsv = {\n    h: color.h,\n    s: color.s,\n    v: color.v\n  };\n  var tableIndex = shade - 1;\n  var _soften = _lighten;\n  var _strongen = _darken;\n\n  if (isInverted) {\n    _soften = _darken;\n    _strongen = _lighten;\n  }\n\n  if (_isWhite(color)) {\n    // white\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n  } else if (_isBlack(color)) {\n    // black\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n  } else if (hsl.l / 100 > HighLuminanceThreshold) {\n    // light\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n  } else if (hsl.l / 100 < LowLuminanceThreshold) {\n    // dark\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\n  } else {\n    // default\n    if (tableIndex < ColorTintTable.length) {\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\n    } else {\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n    }\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), {\n    a: color.a\n  }));\n} // Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\n\nexport function getBackgroundShade(color, shade, isInverted) {\n  if (isInverted === void 0) {\n    isInverted = false;\n  }\n\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  var hsv = {\n    h: color.h,\n    s: color.s,\n    v: color.v\n  };\n  var tableIndex = shade - 1;\n\n  if (!isInverted) {\n    // lightish\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n  } else {\n    // default: if (hsl.l / 100 < .5) { // darkish\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), {\n    a: color.a\n  }));\n}\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\n\nexport function getContrastRatio(color1, color2) {\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\n  /* calculate the intermediate value needed to calculating relative luminance */\n  function _getThing(x) {\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return Math.pow((x + 0.055) / 1.055, 2.4);\n    }\n  }\n\n  var r1 = _getThing(color1.r / MAX_COLOR_RGB);\n\n  var g1 = _getThing(color1.g / MAX_COLOR_RGB);\n\n  var b1 = _getThing(color1.b / MAX_COLOR_RGB);\n\n  var L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\n\n  L1 += 0.05;\n\n  var r2 = _getThing(color2.r / MAX_COLOR_RGB);\n\n  var g2 = _getThing(color2.g / MAX_COLOR_RGB);\n\n  var b2 = _getThing(color2.b / MAX_COLOR_RGB);\n\n  var L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\n\n  L2 += 0.05; // return the lighter color divided by darker\n\n  return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\n}","map":null,"metadata":{},"sourceType":"module"}