{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getId, getNativeProps, divProperties, css, initializeComponentRef } from '../../Utilities';\nimport { Calendar, DayOfWeek } from '../../Calendar';\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { TextField } from '../../TextField';\nimport { compareDates, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close date picker',\n  weekNumberFormatString: 'Week number {0}'\n};\n\nvar DatePickerBase =\n/** @class */\nfunction (_super) {\n  __extends(DatePickerBase, _super);\n\n  function DatePickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._calendar = React.createRef();\n    _this._datePickerDiv = React.createRef();\n    _this._textField = React.createRef();\n\n    _this._onSelectDate = function (date) {\n      var _a = _this.props,\n          formatDate = _a.formatDate,\n          onSelectDate = _a.onSelectDate;\n\n      if (_this.props.calendarProps && _this.props.calendarProps.onSelectDate) {\n        _this.props.calendarProps.onSelectDate(date);\n      }\n\n      _this.setState({\n        selectedDate: date,\n        formattedDate: formatDate && date ? formatDate(date) : ''\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date);\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._onCalloutPositioned = function () {\n      var shouldFocus = true; // If the user has specified that the callout shouldn't use initial focus, then respect\n      // that and don't attempt to set focus. That will default to true within the callout\n      // so we need to check if it's undefined here.\n\n      if (_this.props.calloutProps && _this.props.calloutProps.setInitialFocus !== undefined) {\n        shouldFocus = _this.props.calloutProps.setInitialFocus;\n      }\n\n      if (_this._calendar.current && shouldFocus) {\n        _this._calendar.current.focus();\n      }\n    };\n\n    _this._onTextFieldFocus = function (ev) {\n      if (_this.props.disableAutoFocus) {\n        return;\n      }\n\n      if (!_this.props.allowTextInput) {\n        if (!_this._preventFocusOpeningPicker) {\n          _this._showDatePickerPopup();\n        } else {\n          _this._preventFocusOpeningPicker = false;\n        }\n      }\n    };\n\n    _this._onTextFieldBlur = function (ev) {\n      _this._validateTextInput();\n    };\n\n    _this._onTextFieldChanged = function (ev, newValue) {\n      var _a = _this.props,\n          allowTextInput = _a.allowTextInput,\n          textField = _a.textField;\n\n      if (allowTextInput) {\n        if (_this.state.isDatePickerShown) {\n          _this._dismissDatePickerPopup();\n        }\n\n        var _b = _this.props,\n            isRequired = _b.isRequired,\n            strings = _b.strings;\n\n        _this.setState({\n          errorMessage: isRequired && !newValue ? strings.isRequiredErrorMessage || ' ' : undefined,\n          formattedDate: newValue\n        });\n      }\n\n      if (textField && textField.onChange) {\n        textField.onChange(ev, newValue);\n      }\n    };\n\n    _this._onTextFieldKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          ev.stopPropagation();\n\n          if (!_this.state.isDatePickerShown) {\n            _this._validateTextInput();\n\n            _this._showDatePickerPopup();\n          } else {\n            // When DatePicker allows input date string directly,\n            // it is expected to hit another enter to close the popup\n            if (_this.props.allowTextInput) {\n              _this._dismissDatePickerPopup();\n            }\n          }\n\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onTextFieldClick = function (ev) {\n      if (!_this.props.disableAutoFocus && !_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n\n        return;\n      }\n\n      if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._onIconClick = function (ev) {\n      ev.stopPropagation();\n\n      if (!_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n      } else if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._dismissDatePickerPopup = function () {\n      if (_this.state.isDatePickerShown) {\n        _this.setState({\n          isDatePickerShown: false\n        }, function () {\n          // setState is async, so we must call validate in a callback\n          _this._validateTextInput();\n        });\n      }\n    };\n    /**\n     * Callback for closing the calendar callout\n     */\n\n\n    _this._calendarDismissed = function () {\n      _this._preventFocusOpeningPicker = true;\n\n      _this._dismissDatePickerPopup(); // don't need to focus the text box, if necessary the focusTrapZone will do it\n\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.state.isDatePickerShown) {\n        ev.stopPropagation();\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._validateTextInput = function () {\n      var _a = _this.props,\n          isRequired = _a.isRequired,\n          allowTextInput = _a.allowTextInput,\n          strings = _a.strings,\n          parseDateFromString = _a.parseDateFromString,\n          onSelectDate = _a.onSelectDate,\n          formatDate = _a.formatDate,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate;\n      var inputValue = _this.state.formattedDate; // Do validation only if DatePicker's popup is dismissed\n\n      if (_this.state.isDatePickerShown) {\n        return;\n      }\n\n      if (allowTextInput) {\n        var date = null;\n\n        if (inputValue) {\n          // Don't parse if the selected date has the same formatted string as what we're about to parse.\n          // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n          // not be able to come up with the exact same date.\n          if (_this.state.selectedDate && !_this.state.errorMessage && formatDate && formatDate(_this.state.selectedDate) === inputValue) {\n            return;\n          }\n\n          date = parseDateFromString(inputValue); // Check if date is null, or date is Invalid Date\n\n          if (!date || isNaN(date.getTime())) {\n            // Reset invalid input field, if formatting is available\n            if (formatDate) {\n              date = _this.state.selectedDate;\n\n              _this.setState({\n                formattedDate: formatDate(date).toString()\n              });\n            }\n\n            _this.setState({\n              errorMessage: strings.invalidInputErrorMessage || ' '\n            });\n          } else {\n            // Check against optional date boundaries\n            if (_this._isDateOutOfBounds(date, minDate, maxDate)) {\n              _this.setState({\n                errorMessage: strings.isOutOfBoundsErrorMessage || ' '\n              });\n            } else {\n              _this.setState({\n                selectedDate: date,\n                errorMessage: ''\n              }); // When formatting is available:\n              // If formatted date is valid, but is different from input, update with formatted date.\n              // This occurs when an invalid date is entered twice.\n\n\n              if (formatDate && formatDate(date) !== inputValue) {\n                _this.setState({\n                  formattedDate: formatDate(date).toString()\n                });\n              }\n            }\n          }\n        } else {\n          // Only show error for empty inputValue if it is a required field\n          _this.setState({\n            errorMessage: isRequired ? strings.isRequiredErrorMessage || ' ' : ''\n          });\n        } // Execute onSelectDate callback\n\n\n        if (onSelectDate) {\n          // If no input date string or input date string is invalid\n          // date variable will be null, callback should expect null value for this case\n          onSelectDate(date);\n        }\n      } else if (isRequired && !inputValue) {\n        // Check when DatePicker is a required field but has NO input value\n        _this.setState({\n          errorMessage: strings.isRequiredErrorMessage || ' '\n        });\n      } else {\n        // Cleanup the error message\n        _this.setState({\n          errorMessage: ''\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = _this._getDefaultState();\n    _this._id = props.id || getId('DatePicker');\n    _this._preventFocusOpeningPicker = false;\n    return _this;\n  }\n\n  DatePickerBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var formatDate = nextProps.formatDate,\n        value = nextProps.value;\n\n    if (compareDates(this.props.minDate, nextProps.minDate) && compareDates(this.props.maxDate, nextProps.maxDate) && this.props.isRequired === nextProps.isRequired && compareDates(this.state.selectedDate, value) && this.props.formatDate === formatDate) {\n      // if the props we care about haven't changed, don't run validation or updates\n      return;\n    }\n\n    this._setErrorMessage(true, nextProps);\n\n    this._id = nextProps.id || this._id; // Issue# 1274: Check if the date value changed from old value, i.e., if indeed a new date is being\n    // passed in or if the formatting function was modified. We only update the selected date if either of these\n    // had a legit change. Note tha the bug will still repro when only the formatDate was passed in props and this\n    // is the result of the onSelectDate callback, but this should be a rare scenario.\n\n    var oldValue = this.state.selectedDate;\n\n    if (!compareDates(oldValue, value) || this.props.formatDate !== formatDate) {\n      this.setState({\n        selectedDate: value || undefined,\n        formattedDate: formatDate && value ? formatDate(value) : ''\n      });\n    }\n  };\n\n  DatePickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevState.isDatePickerShown && !this.state.isDatePickerShown) {\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      if (this.props.onAfterMenuDismiss) {\n        this.props.onAfterMenuDismiss();\n      }\n    }\n  };\n\n  DatePickerBase.prototype.render = function () {\n    var _a = this.props,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        strings = _a.strings,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        initialPickerDate = _a.initialPickerDate,\n        isRequired = _a.isRequired,\n        disabled = _a.disabled,\n        ariaLabel = _a.ariaLabel,\n        pickerAriaLabel = _a.pickerAriaLabel,\n        placeholder = _a.placeholder,\n        allowTextInput = _a.allowTextInput,\n        borderless = _a.borderless,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        showCloseButton = _a.showCloseButton,\n        calendarProps = _a.calendarProps,\n        calloutProps = _a.calloutProps,\n        textFieldProps = _a.textField,\n        underlined = _a.underlined,\n        allFocusable = _a.allFocusable,\n        _b = _a.calendarAs,\n        CalendarType = _b === void 0 ? Calendar : _b,\n        tabIndex = _a.tabIndex;\n    var _c = this.state,\n        isDatePickerShown = _c.isDatePickerShown,\n        formattedDate = _c.formattedDate,\n        selectedDate = _c.selectedDate;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      label: !!label,\n      isDatePickerShown: isDatePickerShown\n    });\n    var calloutId = getId('DatePicker-Callout');\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var iconProps = textFieldProps && textFieldProps.iconProps;\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      ref: this._datePickerDiv,\n      \"aria-haspopup\": \"true\",\n      \"aria-owns\": isDatePickerShown ? calloutId : undefined,\n      className: classNames.wrapper\n    }, React.createElement(TextField, __assign({\n      role: \"combobox\",\n      label: label,\n      \"aria-expanded\": isDatePickerShown,\n      ariaLabel: ariaLabel,\n      \"aria-controls\": isDatePickerShown ? calloutId : undefined,\n      required: isRequired,\n      disabled: disabled,\n      errorMessage: this._getErrorMessage(),\n      placeholder: placeholder,\n      borderless: borderless,\n      value: formattedDate,\n      componentRef: this._textField,\n      underlined: underlined,\n      tabIndex: tabIndex,\n      readOnly: !allowTextInput\n    }, textFieldProps, {\n      id: this._id + '-label',\n      className: css(classNames.textField, textFieldProps && textFieldProps.className),\n      iconProps: __assign(__assign({\n        iconName: 'Calendar'\n      }, iconProps), {\n        className: css(classNames.icon, iconProps && iconProps.className),\n        onClick: this._onIconClick\n      }),\n      onKeyDown: this._onTextFieldKeyDown,\n      onFocus: this._onTextFieldFocus,\n      onBlur: this._onTextFieldBlur,\n      onClick: this._onTextFieldClick,\n      onChange: this._onTextFieldChanged\n    }))), isDatePickerShown && React.createElement(Callout, __assign({\n      id: calloutId,\n      role: \"dialog\",\n      ariaLabel: pickerAriaLabel,\n      isBeakVisible: false,\n      gapSpace: 0,\n      doNotLayer: false,\n      target: this._datePickerDiv.current,\n      directionalHint: DirectionalHint.bottomLeftEdge\n    }, calloutProps, {\n      className: css(classNames.callout, calloutProps && calloutProps.className),\n      onDismiss: this._calendarDismissed,\n      onPositioned: this._onCalloutPositioned\n    }), React.createElement(FocusTrapZone, {\n      isClickableOutsideFocusTrap: true,\n      disableFirstFocus: this.props.disableAutoFocus,\n      forceFocusInsideTrap: false\n    }, React.createElement(CalendarType, __assign({}, calendarProps, {\n      onSelectDate: this._onSelectDate,\n      onDismiss: this._calendarDismissed,\n      isMonthPickerVisible: this.props.isMonthPickerVisible,\n      showMonthPickerAsOverlay: this.props.showMonthPickerAsOverlay,\n      today: this.props.today,\n      value: selectedDate || initialPickerDate,\n      firstDayOfWeek: firstDayOfWeek,\n      strings: strings,\n      highlightCurrentMonth: this.props.highlightCurrentMonth,\n      highlightSelectedMonth: this.props.highlightSelectedMonth,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      showGoToToday: this.props.showGoToToday,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._calendar,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    })))));\n  };\n\n  DatePickerBase.prototype.focus = function () {\n    if (this._textField.current) {\n      this._textField.current.focus();\n    }\n  };\n\n  DatePickerBase.prototype.reset = function () {\n    this.setState(this._getDefaultState());\n  };\n\n  DatePickerBase.prototype._setErrorMessage = function (setState, nextProps) {\n    var _a = nextProps || this.props,\n        isRequired = _a.isRequired,\n        strings = _a.strings,\n        value = _a.value,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        initialPickerDate = _a.initialPickerDate;\n\n    var errorMessage = !initialPickerDate && isRequired && !value ? strings.isRequiredErrorMessage || ' ' : undefined;\n\n    if (!errorMessage && value) {\n      errorMessage = this._isDateOutOfBounds(value, minDate, maxDate) ? strings.isOutOfBoundsErrorMessage || ' ' : undefined;\n    }\n\n    if (setState) {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    }\n\n    return errorMessage;\n  };\n\n  DatePickerBase.prototype._showDatePickerPopup = function () {\n    if (!this.state.isDatePickerShown) {\n      this._preventFocusOpeningPicker = true;\n      this.setState({\n        isDatePickerShown: true\n      });\n    }\n  };\n\n  DatePickerBase.prototype._getDefaultState = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return {\n      selectedDate: props.value || undefined,\n      formattedDate: props.formatDate && props.value ? props.formatDate(props.value) : '',\n      isDatePickerShown: false,\n      errorMessage: this._setErrorMessage(false)\n    };\n  };\n\n  DatePickerBase.prototype._isDateOutOfBounds = function (date, minDate, maxDate) {\n    return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;\n  };\n\n  DatePickerBase.prototype._getErrorMessage = function () {\n    if (this.state.isDatePickerShown) {\n      return undefined;\n    }\n\n    return this.state.errorMessage;\n  };\n\n  DatePickerBase.defaultProps = {\n    allowTextInput: false,\n    formatDate: function formatDate(date) {\n      if (date) {\n        return date.toDateString();\n      }\n\n      return '';\n    },\n    parseDateFromString: function parseDateFromString(dateStr) {\n      var date = Date.parse(dateStr);\n\n      if (date) {\n        return new Date(date);\n      }\n\n      return null;\n    },\n    firstDayOfWeek: DayOfWeek.Sunday,\n    initialPickerDate: new Date(),\n    isRequired: false,\n    isMonthPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    strings: DEFAULT_STRINGS,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    borderless: false,\n    pickerAriaLabel: 'Calendar',\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    showGoToToday: true,\n    dateTimeFormatter: undefined,\n    showCloseButton: false,\n    underlined: false,\n    allFocusable: false\n  };\n  return DatePickerBase;\n}(React.Component);\n\nexport { DatePickerBase };","map":null,"metadata":{},"sourceType":"module"}