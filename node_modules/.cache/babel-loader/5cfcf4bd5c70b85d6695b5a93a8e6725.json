{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, getNativeProps, divProperties, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DocumentCardType } from './DocumentCard.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'DocumentCard';\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardBase, _super);\n\n  function DocumentCardBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n\n    _this._onClick = function (ev) {\n      _this._onAction(ev);\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        _this._onAction(ev);\n      }\n    };\n\n    _this._onAction = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          onClickHref = _a.onClickHref,\n          onClickTarget = _a.onClickTarget;\n\n      if (onClick) {\n        onClick(ev);\n      } else if (!onClick && onClickHref) {\n        // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n        if (onClickTarget) {\n          window.open(onClickHref, onClickTarget, 'noreferrer noopener nofollow');\n        } else {\n          window.location.href = onClickHref;\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      accentColor: undefined\n    });\n    return _this;\n  }\n\n  DocumentCardBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onClick = _a.onClick,\n        onClickHref = _a.onClickHref,\n        children = _a.children,\n        type = _a.type,\n        accentColor = _a.accentColor,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var nativeProps = getNativeProps(this.props, divProperties, ['className', 'onClick', 'type', 'role']);\n    var actionable = onClick || onClickHref ? true : false;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      actionable: actionable,\n      compact: type === DocumentCardType.compact ? true : false\n    }); // Override the border color if an accent color was provided (compact card only)\n\n    var style;\n\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor\n      };\n    } // if this element is actionable it should have an aria role\n\n\n    var role = this.props.role || (actionable ? onClick ? 'button' : 'link' : undefined);\n    var tabIndex = actionable ? 0 : undefined;\n    return React.createElement(\"div\", __assign({\n      ref: this._rootElement,\n      tabIndex: tabIndex,\n      \"data-is-focusable\": actionable,\n      role: role,\n      className: this._classNames.root,\n      onKeyDown: actionable ? this._onKeyDown : undefined,\n      onClick: actionable ? this._onClick : undefined,\n      style: style\n    }, nativeProps), children);\n  };\n\n  DocumentCardBase.prototype.focus = function () {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  };\n\n  DocumentCardBase.defaultProps = {\n    type: DocumentCardType.normal\n  };\n  return DocumentCardBase;\n}(React.Component);\n\nexport { DocumentCardBase };","map":null,"metadata":{},"sourceType":"module"}