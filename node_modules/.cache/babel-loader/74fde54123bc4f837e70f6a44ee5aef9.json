{"ast":null,"code":"/**\n * The possible methods that can be used to fit the image.\n * {@docCategory Image}\n */\nexport var ImageFit;\n\n(function (ImageFit) {\n  /**\n   * The image is not scaled. The image is centered and cropped within the content box.\n   */\n  ImageFit[ImageFit[\"center\"] = 0] = \"center\";\n  /**\n   * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\n   * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\n   * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n   */\n\n  ImageFit[ImageFit[\"contain\"] = 1] = \"contain\";\n  /**\n   * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped\n   * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\n   */\n\n  ImageFit[ImageFit[\"cover\"] = 2] = \"cover\";\n  /**\n   * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\n   * frame will have empty space.\n   */\n\n  ImageFit[ImageFit[\"none\"] = 3] = \"none\";\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,\n   * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n   */\n\n  ImageFit[ImageFit[\"centerCover\"] = 4] = \"centerCover\";\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,\n   * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\n   */\n\n  ImageFit[ImageFit[\"centerContain\"] = 5] = \"centerContain\";\n})(ImageFit || (ImageFit = {}));\n/**\n * The cover style to be used on the image\n * {@docCategory Image}\n */\n\n\nexport var ImageCoverStyle;\n\n(function (ImageCoverStyle) {\n  /**\n   * The image will be shown at 100% height of container and the width will be scaled accordingly\n   */\n  ImageCoverStyle[ImageCoverStyle[\"landscape\"] = 0] = \"landscape\";\n  /**\n   * The image will be shown at 100% width of container and the height will be scaled accordingly\n   */\n\n  ImageCoverStyle[ImageCoverStyle[\"portrait\"] = 1] = \"portrait\";\n})(ImageCoverStyle || (ImageCoverStyle = {}));\n/**\n * {@docCategory Image}\n */\n\n\nexport var ImageLoadState;\n\n(function (ImageLoadState) {\n  /**\n   * The image has not yet been loaded, and there is no error yet.\n   */\n  ImageLoadState[ImageLoadState[\"notLoaded\"] = 0] = \"notLoaded\";\n  /**\n   * The image has been loaded successfully.\n   */\n\n  ImageLoadState[ImageLoadState[\"loaded\"] = 1] = \"loaded\";\n  /**\n   * An error has been encountered while loading the image.\n   */\n\n  ImageLoadState[ImageLoadState[\"error\"] = 2] = \"error\";\n  /**\n   * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead\n   * and rerender the Image with a difference src.\n   * @deprecated Use `onLoadingStateChange` instead\n   * and rerender the Image with a difference src.\n   */\n\n  ImageLoadState[ImageLoadState[\"errorLoaded\"] = 3] = \"errorLoaded\";\n})(ImageLoadState || (ImageLoadState = {}));","map":null,"metadata":{},"sourceType":"module"}