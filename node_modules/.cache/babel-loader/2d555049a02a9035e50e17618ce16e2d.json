{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\n\nexport function useBoolean(initialState) {\n  var _a = React.useState(initialState),\n      value = _a[0],\n      setValue = _a[1]; // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n\n\n  var valueRef = React.useRef(value);\n  var setTrue = useConst(function () {\n    return function () {\n      setValue(true);\n      valueRef.current = true;\n    };\n  });\n  var setFalse = useConst(function () {\n    return function () {\n      setValue(false);\n      valueRef.current = false;\n    };\n  });\n  var toggle = useConst(function () {\n    return function () {\n      return valueRef.current ? setFalse() : setTrue();\n    };\n  });\n  return [value, {\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}