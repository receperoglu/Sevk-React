{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { hoistMethods, unhoistMethods } from '../../Utilities';\n\nvar BaseDecorator =\n/** @class */\nfunction (_super) {\n  __extends(BaseDecorator, _super);\n\n  function BaseDecorator(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n    return _this;\n  }\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n\n\n  BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {\n    this._composedComponentInstance = composedComponentInstance;\n\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  };\n\n  return BaseDecorator;\n}(React.Component);\n\nexport { BaseDecorator };","map":null,"metadata":{},"sourceType":"module"}