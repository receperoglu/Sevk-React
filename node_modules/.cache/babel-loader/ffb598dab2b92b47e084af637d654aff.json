{"ast":null,"code":"import { HighContrastSelector, AnimationVariables, normalize, getPlaceholderStyles, getGlobalClassNames, getInputFocusStyle } from '../../Styling';\nimport { getRTL } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-SearchBox',\n  iconContainer: 'ms-SearchBox-iconContainer',\n  icon: 'ms-SearchBox-icon',\n  clearButton: 'ms-SearchBox-clearButton',\n  field: 'ms-SearchBox-field'\n};\nexport function getStyles(props) {\n  var _a, _b, _c, _d;\n\n  var theme = props.theme,\n      underlined = props.underlined,\n      disabled = props.disabled,\n      hasFocus = props.hasFocus,\n      className = props.className,\n      hasInput = props.hasInput,\n      disableAnimation = props.disableAnimation;\n  var palette = theme.palette,\n      fonts = theme.fonts,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // placeholder style constants\n\n  var placeholderStyles = {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1\n  };\n  var inputIconAlt = palette.neutralSecondary;\n  var inputIconAltHovered = palette.neutralPrimary;\n  var inputBorderDisabled = palette.neutralLighter;\n  var inputBackgroundHovered = palette.neutralLighter;\n  var inputBackgroundDisabled = palette.neutralLighter;\n  return {\n    root: [classNames.root, fonts.medium, normalize, {\n      color: semanticColors.inputText,\n      backgroundColor: semanticColors.inputBackground,\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'nowrap',\n      alignItems: 'stretch',\n      // The 1px top and bottom padding ensure the input field does not overlap the border\n      padding: '1px 0 1px 4px',\n      borderRadius: effects.roundedCorner2,\n      border: \"1px solid \" + semanticColors.inputBorder,\n      height: 32,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderColor: 'WindowText'\n      }, _a[':hover'] = {\n        borderColor: semanticColors.inputBorderHovered,\n        selectors: (_b = {}, _b[HighContrastSelector] = {\n          borderColor: 'Highlight'\n        }, _b)\n      }, _a[\":hover .\" + classNames.iconContainer] = {\n        color: semanticColors.inputIconHovered\n      }, _a)\n    }, !hasFocus && hasInput && {\n      selectors: (_c = {}, _c[\":hover .\" + classNames.iconContainer] = {\n        width: 4\n      }, _c[\":hover .\" + classNames.icon] = {\n        opacity: 0\n      }, _c)\n    }, hasFocus && ['is-active', {\n      position: 'relative'\n    }, getInputFocusStyle(semanticColors.inputFocusBorderAlt, underlined ? 0 : effects.roundedCorner2, underlined ? 'borderBottom' : 'border')], disabled && ['is-disabled', {\n      borderColor: inputBorderDisabled,\n      backgroundColor: inputBackgroundDisabled,\n      pointerEvents: 'none',\n      cursor: 'default',\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        borderColor: 'GrayText'\n      }, _d)\n    }], underlined && ['is-underlined', {\n      borderWidth: '0 0 1px 0',\n      borderRadius: 0,\n      // Underlined SearchBox has a larger padding left to vertically align with the waffle in product\n      padding: '1px 0 1px 8px'\n    }], underlined && disabled && {\n      backgroundColor: 'transparent'\n    }, hasInput && 'can-clear', className],\n    iconContainer: [classNames.iconContainer, {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      flexShrink: 0,\n      fontSize: 16,\n      width: 32,\n      textAlign: 'center',\n      color: semanticColors.inputIcon,\n      cursor: 'text'\n    }, hasFocus && {\n      width: 4\n    }, disabled && {\n      color: semanticColors.inputIconDisabled\n    }, !disableAnimation && {\n      transition: \"width \" + AnimationVariables.durationValue1\n    }],\n    icon: [classNames.icon, {\n      opacity: 1\n    }, hasFocus && {\n      opacity: 0\n    }, !disableAnimation && {\n      transition: \"opacity \" + AnimationVariables.durationValue1 + \" 0s\"\n    }],\n    clearButton: [classNames.clearButton, {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'stretch',\n      cursor: 'pointer',\n      flexBasis: '32px',\n      flexShrink: 0,\n      padding: 0,\n      margin: '-1px 0px',\n      selectors: {\n        '&:hover .ms-Button': {\n          backgroundColor: inputBackgroundHovered\n        },\n        '&:hover .ms-Button-icon': {\n          color: inputIconAltHovered\n        },\n        '.ms-Button': {\n          borderRadius: getRTL(theme) ? '1px 0 0 1px' : '0 1px 1px 0'\n        },\n        '.ms-Button-icon': {\n          color: inputIconAlt\n        }\n      }\n    }],\n    field: [classNames.field, normalize, getPlaceholderStyles(placeholderStyles), {\n      backgroundColor: 'transparent',\n      border: 'none',\n      outline: 'none',\n      fontWeight: 'inherit',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      color: semanticColors.inputText,\n      flex: '1 1 0px',\n      // The default implicit value of 'auto' prevents the input from shrinking. Setting min-width to\n      // 0px allows the input element to shrink to fit the container.\n      minWidth: '0px',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      // This padding forces the text placement to round up.\n      paddingBottom: 0.5,\n      // This removes the IE specific clear button in the input since we implimented our own\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, disabled && {\n      color: semanticColors.disabledText\n    }]\n  };\n}","map":null,"metadata":{},"sourceType":"module"}