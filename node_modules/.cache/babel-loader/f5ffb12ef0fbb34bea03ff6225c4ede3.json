{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar CheckboxBase =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n\n\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this._checkBox = React.createRef();\n\n    _this._renderContent = function (checked, indeterminate, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          inputProps = _a.inputProps,\n          name = _a.name,\n          ariaLabel = _a.ariaLabel,\n          ariaLabelledBy = _a.ariaLabelledBy,\n          ariaDescribedBy = _a.ariaDescribedBy,\n          _b = _a.onRenderLabel,\n          onRenderLabel = _b === void 0 ? _this._onRenderLabel : _b,\n          checkmarkIconProps = _a.checkmarkIconProps,\n          ariaPositionInSet = _a.ariaPositionInSet,\n          ariaSetSize = _a.ariaSetSize,\n          title = _a.title,\n          label = _a.label;\n      return React.createElement(\"div\", {\n        className: _this._classNames.root,\n        title: title\n      }, React.createElement(FocusRects, null), React.createElement(\"input\", __assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        checked: checked,\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": indeterminate ? 'mixed' : checked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon, __assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    };\n\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n\n    _this._onChange = function (ev) {\n      var onChange = _this.props.onChange;\n      var _a = _this.state,\n          isChecked = _a.isChecked,\n          isIndeterminate = _a.isIndeterminate;\n\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n\n        if (_this.props.checked === undefined) {\n          _this.setState({\n            isChecked: !isChecked\n          });\n        }\n      } else {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n\n        if (_this.props.indeterminate === undefined) {\n          _this.setState({\n            isIndeterminate: false\n          });\n        }\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          title = props.title;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text,\n        title: title\n      }, label) : null;\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    _this._id = _this.props.id || getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n\n  CheckboxBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var stateUpdate = {};\n\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n\n\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        boxSide = _a.boxSide,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n        keytipProps = _a.keytipProps;\n    var _c = this.state,\n        isChecked = _c.isChecked,\n        isIndeterminate = _c.isIndeterminate;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(isChecked, isIndeterminate, keytipAttributes);\n      });\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  };\n\n  Object.defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function get() {\n      return !!this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function get() {\n      return !!this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\n\nexport { CheckboxBase };","map":null,"metadata":{},"sourceType":"module"}