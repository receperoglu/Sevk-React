{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerElementsGroupBase = function ShimmerElementsGroupBase(props) {\n  var styles = props.styles,\n      _a = props.width,\n      width = _a === void 0 ? 'auto' : _a,\n      shimmerElements = props.shimmerElements,\n      _b = props.rowHeight,\n      rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n      _c = props.flexWrap,\n      flexWrap = _c === void 0 ? false : _c,\n      theme = props.theme,\n      backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\n\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map( // false positive\n  // eslint-disable-next-line array-callback-return\n  function (element, index) {\n    var type = element.type,\n        filteredElem = __rest(element, [\"type\"]);\n\n    var verticalAlign = filteredElem.verticalAlign,\n        height = filteredElem.height;\n    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.gap:\n        return React.createElement(ShimmerGap, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.line:\n        return React.createElement(ShimmerLine, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n    }\n  }) : React.createElement(ShimmerLine, {\n    height: ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\n\nvar getElementStyles = memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: dif + \"px\",\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: dif + \"px\"\n    };\n  }\n\n  if (backgroundColor) {\n    switch (elementType) {\n      case ShimmerElementType.circle:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n\n      case ShimmerElementType.gap:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n\n      case ShimmerElementType.line:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\n\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.circle;\n        }\n\n        break;\n\n      case ShimmerElementType.line:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.line;\n        }\n\n        break;\n\n      case ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.gap;\n        }\n\n        break;\n    }\n\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":null,"metadata":{},"sourceType":"module"}