{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction({\n  // Label is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Label.\n  // Therefore setting a larger cache size.\n  cacheSize: 100\n});\n\nvar LabelBase =\n/** @class */\nfunction (_super) {\n  __extends(LabelBase, _super);\n\n  function LabelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LabelBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.as,\n        RootType = _b === void 0 ? 'label' : _b,\n        children = _a.children,\n        className = _a.className,\n        disabled = _a.disabled,\n        styles = _a.styles,\n        required = _a.required,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      className: className,\n      disabled: disabled,\n      required: required,\n      theme: theme\n    });\n    return React.createElement(RootType, __assign({}, getNativeProps(this.props, divProperties), {\n      className: classNames.root\n    }), children);\n  };\n\n  return LabelBase;\n}(React.Component);\n\nexport { LabelBase };","map":null,"metadata":{},"sourceType":"module"}