{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, on, KeyCodes, getWindow, warnDeprecations, warn } from '../../../Utilities';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\n\nvar ColorSliderBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorSliderBase, _super);\n\n  function ColorSliderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._disposables = [];\n    _this._root = React.createRef();\n\n    _this._onKeyDown = function (ev) {\n      var currentValue = _this.value;\n      var maxValue = _this._maxValue;\n      var increment = ev.shiftKey ? 10 : 1; // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n\n      switch (ev.which) {\n        case KeyCodes.left:\n          {\n            currentValue -= increment;\n            break;\n          }\n\n        case KeyCodes.right:\n          {\n            currentValue += increment;\n            break;\n          }\n\n        case KeyCodes.home:\n          {\n            currentValue = 0;\n            break;\n          }\n\n        case KeyCodes.end:\n          {\n            currentValue = maxValue;\n            break;\n          }\n\n        default:\n          {\n            return;\n          }\n      }\n\n      _this._updateValue(ev, clamp(currentValue, maxValue));\n    };\n\n    _this._onMouseDown = function (ev) {\n      var win = getWindow(_this);\n\n      if (win) {\n        _this._disposables.push(on(win, 'mousemove', _this._onMouseMove, true), on(win, 'mouseup', _this._disposeListeners, true));\n      }\n\n      _this._onMouseMove(ev);\n    };\n\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n\n      var maxValue = _this._maxValue;\n\n      var rectSize = _this._root.current.getBoundingClientRect();\n\n      var currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n      var newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n      _this._updateValue(ev, newValue);\n    };\n\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n\n      _this._disposables = [];\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type'\n    }); // eslint-disable-next-line deprecation/deprecation\n\n    if (_this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(\"ColorSlider: 'overlayColor' is required when 'type' is \\\"alpha\\\" or \\\"transparency\\\"\");\n    }\n\n    _this.state = {\n      currentValue: props.value || 0\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ColorSliderBase.prototype, \"value\", {\n    get: function get() {\n      return this.state.currentValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorSliderBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({\n        currentValue: this.props.value\n      });\n    }\n  };\n\n  ColorSliderBase.prototype.componentWillUnmount = function () {\n    this._disposeListeners();\n  };\n\n  ColorSliderBase.prototype.render = function () {\n    var type = this._type;\n    var maxValue = this._maxValue;\n    var _a = this.props,\n        // eslint-disable-next-line deprecation/deprecation\n    overlayStyle = _a.overlayStyle,\n        overlayColor = _a.overlayColor,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        _b = _a.ariaLabel,\n        ariaLabel = _b === void 0 ? type : _b;\n    var currentValue = this.value;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      type: type\n    });\n    var currentPercentage = 100 * currentValue / maxValue;\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      tabIndex: 0,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      role: \"slider\",\n      \"aria-valuenow\": currentValue,\n      \"aria-valuetext\": String(currentValue),\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": maxValue,\n      \"aria-label\": ariaLabel,\n      \"data-is-focusable\": true\n    }, !!(overlayColor || overlayStyle) && React.createElement(\"div\", {\n      className: classNames.sliderOverlay,\n      // this isn't included in getStyles because it may change frequently\n      style: overlayColor ? {\n        background: type === 'transparency' ? \"linear-gradient(to right, #\" + overlayColor + \", transparent)\" : \"linear-gradient(to right, transparent, #\" + overlayColor + \")\"\n      } : overlayStyle\n    }), React.createElement(\"div\", {\n      className: classNames.sliderThumb,\n      style: {\n        left: currentPercentage + '%'\n      }\n    }));\n  };\n\n  Object.defineProperty(ColorSliderBase.prototype, \"_type\", {\n    get: function get() {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = this.props,\n          isAlpha = _a.isAlpha,\n          _b = _a.type,\n          type = _b === void 0 ? isAlpha ? 'alpha' : 'hue' : _b;\n      return type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSliderBase.prototype, \"_maxValue\", {\n    get: function get() {\n      return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorSliderBase.prototype._updateValue = function (ev, newValue) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    var onChange = this.props.onChange;\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  };\n\n  ColorSliderBase.defaultProps = {\n    value: 0\n  };\n  return ColorSliderBase;\n}(React.Component);\n\nexport { ColorSliderBase };","map":null,"metadata":{},"sourceType":"module"}