{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport { css, elementContains, KeyCodes, getNativeProps, divProperties, initializeComponentRef, FocusRects } from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nvar styles = stylesImport;\nvar leftArrow = 'Up';\nvar rightArrow = 'Down';\nvar closeIcon = 'CalculatorMultiply';\nvar iconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon\n};\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar dateTimeFormatterCallbacks = {\n  formatMonthDayYear: function formatMonthDayYear(date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n  },\n  formatMonthYear: function formatMonthYear(date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getFullYear();\n  },\n  formatDay: function formatDay(date) {\n    return date.getDate().toString();\n  },\n  formatYear: function formatYear(date) {\n    return date.getFullYear().toString();\n  }\n};\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dayPicker = React.createRef();\n    _this._monthPicker = React.createRef();\n    _this._hasFocus = false;\n\n    _this._onBlur = function (event) {\n      if (!elementContains(event.currentTarget, event.relatedTarget)) {\n        _this._hasFocus = false;\n        _this.props.onBlur && _this.props.onBlur(event);\n      }\n    };\n\n    _this._onFocus = function (event) {\n      if (!_this._hasFocus) {\n        _this._hasFocus = true;\n        _this.props.onFocus && _this.props.onFocus(event);\n      }\n    };\n\n    _this._navigateDayPickerDay = function (date) {\n      _this.setState({\n        navigatedDayDate: date,\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._navigateMonthPickerDay = function (date) {\n      _this.setState({\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._onNavigateDayDate = function (date, focusOnNavigatedDay) {\n      _this._navigateDayPickerDay(date);\n\n      _this._focusOnUpdate = focusOnNavigatedDay;\n    };\n\n    _this._onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n      if (!focusOnNavigatedDay) {\n        _this._navigateMonthPickerDay(date);\n\n        _this._focusOnUpdate = focusOnNavigatedDay;\n        return;\n      }\n\n      var monthPickerOnly = !_this.props.showMonthPickerAsOverlay && !_this.props.isDayPickerVisible;\n\n      if (monthPickerOnly) {\n        _this._onSelectDate(date);\n      }\n\n      _this._navigateDayPickerDay(date);\n    };\n\n    _this._onSelectDate = function (date, selectedDateRangeArray) {\n      var onSelectDate = _this.props.onSelectDate;\n\n      _this.setState({\n        selectedDate: date\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date, selectedDateRangeArray);\n      }\n    };\n\n    _this._onHeaderSelect = function (focus) {\n      _this.setState({\n        isDayPickerVisible: !_this.state.isDayPickerVisible,\n        isMonthPickerVisible: !_this.state.isMonthPickerVisible\n      });\n\n      if (focus) {\n        _this._focusOnUpdate = true;\n      }\n    };\n\n    _this._onGotoToday = function () {\n      var _a = _this.props,\n          dateRangeType = _a.dateRangeType,\n          firstDayOfWeek = _a.firstDayOfWeek,\n          today = _a.today,\n          workWeekDays = _a.workWeekDays,\n          selectDateOnClick = _a.selectDateOnClick;\n\n      if (selectDateOnClick) {\n        // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n        // so we use exclamation mark as a hint to the type checker (see link below)\n        // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n        var dates = getDateRangeArray(today, dateRangeType, firstDayOfWeek, workWeekDays);\n\n        _this._onSelectDate(today, dates);\n      }\n\n      _this._navigateDayPickerDay(today);\n\n      _this._focusOnUpdate = true;\n    };\n\n    _this._onGotoTodayClick = function (ev) {\n      _this._onGotoToday();\n    };\n\n    _this._onGotoTodayKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n\n        _this._onGotoToday();\n      }\n    };\n\n    _this._onDatePickerPopupKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n\n    initializeComponentRef(_this);\n    var currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: _this.props.showMonthPickerAsOverlay ? false : _this.props.isMonthPickerVisible,\n      isDayPickerVisible: _this.props.showMonthPickerAsOverlay ? true : _this.props.isDayPickerVisible\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n\n  Calendar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var autoNavigateOnSelection = nextProps.autoNavigateOnSelection,\n        value = nextProps.value,\n        _a = nextProps.today,\n        today = _a === void 0 ? new Date() : _a; // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n\n    var overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value, this.props.value);\n\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today\n    });\n  };\n\n  Calendar.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  Calendar.prototype.render = function () {\n    var _a;\n\n    var rootClass = 'ms-DatePicker';\n    var _b = this.props,\n        firstDayOfWeek = _b.firstDayOfWeek,\n        dateRangeType = _b.dateRangeType,\n        strings = _b.strings,\n        showMonthPickerAsOverlay = _b.showMonthPickerAsOverlay,\n        autoNavigateOnSelection = _b.autoNavigateOnSelection,\n        showGoToToday = _b.showGoToToday,\n        highlightCurrentMonth = _b.highlightCurrentMonth,\n        highlightSelectedMonth = _b.highlightSelectedMonth,\n        navigationIcons = _b.navigationIcons,\n        minDate = _b.minDate,\n        maxDate = _b.maxDate,\n        restrictedDates = _b.restrictedDates,\n        className = _b.className,\n        showCloseButton = _b.showCloseButton,\n        allFocusable = _b.allFocusable,\n        yearPickerHidden = _b.yearPickerHidden,\n        today = _b.today;\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var _c = this.state,\n        selectedDate = _c.selectedDate,\n        navigatedDayDate = _c.navigatedDayDate,\n        navigatedMonthDate = _c.navigatedMonthDate,\n        isMonthPickerVisible = _c.isMonthPickerVisible,\n        isDayPickerVisible = _c.isDayPickerVisible;\n    var onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    var overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n    var goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled = navigatedDayDate.getFullYear() !== today.getFullYear() || navigatedDayDate.getMonth() !== today.getMonth() || navigatedMonthDate.getFullYear() !== today.getFullYear() || navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return React.createElement(\"div\", {\n      className: css(rootClass, styles.root, className),\n      role: \"application\"\n    }, React.createElement(\"div\", __assign({}, nativeProps, {\n      onBlur: this._onBlur,\n      onFocus: this._onFocus,\n      className: css('ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused', styles.picker, styles.pickerIsOpened, styles.pickerIsFocused, isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible, isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline, monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly, showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay)\n    }), React.createElement(\"div\", {\n      className: css('ms-DatePicker-holder ms-slideDownIn10', styles.holder, overlayedWithButton && styles.holderWithButton),\n      onKeyDown: this._onDatePickerPopupKeyDown\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-frame', styles.frame)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)\n    }, isDayPickerVisible && React.createElement(CalendarDay, {\n      selectedDate: selectedDate,\n      navigatedDate: navigatedDayDate,\n      today: this.props.today,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDayDate,\n      onDismiss: this.props.onDismiss,\n      firstDayOfWeek: firstDayOfWeek,\n      dateRangeType: dateRangeType,\n      autoNavigateOnSelection: autoNavigateOnSelection,\n      strings: strings,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      showSixWeeksByDefault: this.props.showSixWeeksByDefault,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      workWeekDays: this.props.workWeekDays,\n      componentRef: this._dayPicker,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    }), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n      className: styles.divider\n    }), isMonthPickerVisible && React.createElement(CalendarMonth, {\n      navigatedDate: navigatedMonthDate,\n      selectedDate: navigatedDayDate,\n      strings: strings,\n      onNavigateDate: this._onNavigateMonthDate,\n      today: this.props.today,\n      highlightCurrentMonth: highlightCurrentMonth,\n      highlightSelectedMonth: highlightSelectedMonth,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._monthPicker,\n      yearPickerHidden: yearPickerHidden || showMonthPickerAsOverlay\n    }), showGoToToday && React.createElement(\"button\", {\n      role: \"button\",\n      className: css('ms-DatePicker-goToday js-goToday', styles.goToday, (_a = {}, _a[styles.goTodayInlineMonth] = isMonthPickerVisible, _a[styles.goToTodayIsDisabled] = !goTodayEnabled, _a)),\n      onClick: this._onGotoTodayClick,\n      onKeyDown: this._onGotoTodayKeyDown,\n      tabIndex: 0,\n      disabled: !goTodayEnabled,\n      type: \"button\"\n    }, strings.goToToday))))), React.createElement(FocusRects, null));\n  };\n\n  Calendar.prototype.focus = function () {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  };\n\n  Calendar.defaultProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false\n  };\n  return Calendar;\n}(React.Component);\n\nexport { Calendar };","map":null,"metadata":{},"sourceType":"module"}