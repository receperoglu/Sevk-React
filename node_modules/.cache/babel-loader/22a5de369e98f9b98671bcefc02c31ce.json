{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getThemedContext } from '@uifabric/styling';\nimport { Customizer } from '@uifabric/utilities';\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n */\n\nexport var ThemeProvider = function ThemeProvider(props) {\n  var scheme = props.scheme,\n      theme = props.theme,\n      rest = __rest(props, [\"scheme\", \"theme\"]); // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n\n\n  var contextTransform = function contextTransform(context) {\n    return getThemedContext(context, scheme, theme);\n  }; // eslint-disable-next-line react/jsx-no-bind\n\n\n  return React.createElement(Customizer, __assign({}, rest, {\n    contextTransform: contextTransform\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}