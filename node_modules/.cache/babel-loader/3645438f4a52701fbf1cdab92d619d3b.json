{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, on, getWindow, elementContains } from '../../Utilities';\n/**\n * This adds accessibility to Dialog and Panel controls\n */\n\nvar Popup =\n/** @class */\nfunction (_super) {\n  __extends(Popup, _super);\n\n  function Popup(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._disposables = [];\n\n    _this._onKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.escape:\n          if (_this.props.onDismiss) {\n            _this.props.onDismiss(ev);\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n      }\n    };\n\n    _this._onFocus = function () {\n      _this._containsFocus = true;\n    };\n\n    _this._onBlur = function (ev) {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occured and focus didn't change\n       */\n      if (_this._root.current && ev.relatedTarget && !elementContains(_this._root.current, ev.relatedTarget)) {\n        _this._containsFocus = false;\n      }\n    };\n\n    _this._async = new Async(_this);\n    _this.state = {\n      needsVerticalScrollBar: false\n    };\n    return _this;\n  }\n\n  Popup.prototype.UNSAFE_componentWillMount = function () {\n    this._originalFocusedElement = getDocument().activeElement;\n  };\n\n  Popup.prototype.componentDidMount = function () {\n    if (this._root.current) {\n      this._disposables.push(on(this._root.current, 'focus', this._onFocus, true), on(this._root.current, 'blur', this._onBlur, true));\n\n      var currentWindow = getWindow(this._root.current);\n\n      if (currentWindow) {\n        this._disposables.push(on(currentWindow, 'keydown', this._onKeyDown));\n      }\n\n      if (doesElementContainFocus(this._root.current)) {\n        this._containsFocus = true;\n      }\n    }\n\n    this._updateScrollBarAsync();\n  };\n\n  Popup.prototype.componentDidUpdate = function () {\n    this._updateScrollBarAsync();\n\n    this._async.dispose();\n  };\n\n  Popup.prototype.componentWillUnmount = function () {\n    var _a;\n\n    this._disposables.forEach(function (dispose) {\n      return dispose();\n    }); // eslint-disable-next-line deprecation/deprecation\n\n\n    if (this.props.shouldRestoreFocus) {\n      var _b = this.props.onRestoreFocus,\n          onRestoreFocus = _b === void 0 ? defaultFocusRestorer : _b;\n      onRestoreFocus({\n        originalElement: this._originalFocusedElement,\n        containsFocus: this._containsFocus,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      });\n    } // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n\n\n    delete this._originalFocusedElement;\n  };\n\n  Popup.prototype.render = function () {\n    var _a = this.props,\n        role = _a.role,\n        className = _a.className,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        style = _a.style;\n    return React.createElement(\"div\", __assign({\n      ref: this._root\n    }, getNativeProps(this.props, divProperties), {\n      className: className,\n      role: role,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy,\n      onKeyDown: this._onKeyDown,\n      style: __assign({\n        overflowY: this.state.needsVerticalScrollBar ? 'scroll' : undefined,\n        outline: 'none'\n      }, style)\n    }), this.props.children);\n  };\n\n  Popup.prototype._updateScrollBarAsync = function () {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      _this._getScrollBar();\n    });\n  };\n\n  Popup.prototype._getScrollBar = function () {\n    // If overflowY is overriden, don't waste time calculating whether the scrollbar is necessary.\n    if (this.props.style && this.props.style.overflowY) {\n      return;\n    }\n\n    var needsVerticalScrollBar = false;\n\n    if (this._root && this._root.current && this._root.current.firstElementChild) {\n      // ClientHeight returns the client height of an element rounded to an\n      // integer. On some browsers at different zoom levels this rounding\n      // can generate different results for the root container and child even\n      // though they are the same height. This causes us to show a scroll bar\n      // when not needed. Ideally we would use BoundingClientRect().height\n      // instead however seems that the API is 90% slower than using ClientHeight.\n      // Therefore instead we will calculate the difference between heights and\n      // allow for a 1px difference to still be considered ok and not show the\n      // scroll bar.\n      var rootHeight = this._root.current.clientHeight;\n      var firstChildHeight = this._root.current.firstElementChild.clientHeight;\n\n      if (rootHeight > 0 && firstChildHeight > rootHeight) {\n        needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n      }\n    }\n\n    if (this.state.needsVerticalScrollBar !== needsVerticalScrollBar) {\n      this.setState({\n        needsVerticalScrollBar: needsVerticalScrollBar\n      });\n    }\n  };\n\n  Popup.defaultProps = {\n    shouldRestoreFocus: true\n  };\n  return Popup;\n}(React.Component);\n\nexport { Popup };\n\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n      containsFocus = options.containsFocus;\n\n  if (originalElement && containsFocus && originalElement !== window) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    if (originalElement.focus) {\n      originalElement.focus();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}