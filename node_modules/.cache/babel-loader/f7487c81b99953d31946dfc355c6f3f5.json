{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\n\nexport function buildKeytipConfigMap(config) {\n  var configMap = {};\n\n  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {\n    var keytip = _a[_i];\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\n\nexport function constructKeytip(configMap, parentSequence, keytip) {\n  // Compute full key sequence\n  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  var keytipSequence = parentSequence.concat(sequence); // Save props in configMap\n\n  var keytipProps = __assign(__assign({}, keytip.optionalProps), {\n    keySequences: keytipSequence,\n    content: keytip.content\n  });\n\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {\n      var child = _a[_i]; // Create keytips for all children\n\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}