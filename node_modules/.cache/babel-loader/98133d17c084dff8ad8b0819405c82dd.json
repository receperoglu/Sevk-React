{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\n\nvar BaseSelectedItemsList =\n/** @class */\nfunction (_super) {\n  __extends(BaseSelectedItemsList, _super);\n\n  function BaseSelectedItemsList(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.addItems = function (items) {\n      var processedItems = _this.props.onItemSelected ? _this.props.onItemSelected(items) : items;\n      var processedItemObjects = processedItems;\n      var processedItemPromiseLikes = processedItems;\n\n      if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n        processedItemPromiseLikes.then(function (resolvedProcessedItems) {\n          var newItems = _this.state.items.concat(resolvedProcessedItems);\n\n          _this.updateItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat(processedItemObjects);\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItemAt = function (index) {\n      var items = _this.state.items;\n\n      if (_this._canRemoveItem(items[index])) {\n        if (index > -1) {\n          if (_this.props.onItemsDeleted) {\n            _this.props.onItemsDeleted([items[index]]);\n          }\n\n          var newItems = items.slice(0, index).concat(items.slice(index + 1));\n\n          _this.updateItems(newItems);\n        }\n      }\n    };\n\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n\n      _this.removeItemAt(index);\n    };\n\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var itemsCanRemove = itemsToRemove.filter(function (item) {\n        return _this._canRemoveItem(item);\n      });\n      var newItems = items.filter(function (item) {\n        return itemsCanRemove.indexOf(item) === -1;\n      });\n      var firstItemToRemove = itemsCanRemove[0];\n      var index = items.indexOf(firstItemToRemove);\n\n      if (_this.props.onItemsDeleted) {\n        _this.props.onItemsDeleted(itemsCanRemove);\n      }\n\n      _this.updateItems(newItems, index);\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.props.onCopyItems && _this.selection.getSelectedCount() > 0) {\n        var selectedItems = _this.selection.getSelection();\n\n        _this.copyItems(selectedItems);\n      }\n    };\n\n    _this.renderItems = function () {\n      var removeButtonAriaLabel = _this.props.removeButtonAriaLabel;\n      var onRenderItem = _this.props.onRenderItem;\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return onRenderItem({\n          item: item,\n          index: index,\n          key: item.key ? item.key : index,\n          selected: _this.selection.isIndexSelected(index),\n          onRemoveItem: function onRemoveItem() {\n            return _this.removeItem(item);\n          },\n          onItemChange: _this.onItemChange,\n          removeButtonAriaLabel: removeButtonAriaLabel,\n          onCopyItem: function onCopyItem(itemToCopy) {\n            return _this.copyItems([itemToCopy]);\n          }\n        });\n      });\n    };\n\n    _this.onSelectionChanged = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    initializeComponentRef(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this.state = {\n      items: items\n    }; // Create a new selection if one is not specified\n\n    _this.selection = _this.props.selection ? _this.props.selection : new Selection({\n      onSelectionChanged: _this.onSelectionChanged\n    });\n    return _this;\n  }\n\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"items\", {\n    get: function get() {\n      return this.state.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseSelectedItemsList.prototype.removeSelectedItems = function () {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n\n\n  BaseSelectedItemsList.prototype.updateItems = function (items, focusIndex) {\n    var _this = this;\n\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  };\n\n  BaseSelectedItemsList.prototype.hasSelectedItems = function () {\n    return this.selection.getSelectedCount() > 0;\n  };\n\n  BaseSelectedItemsList.prototype.unselectAll = function () {\n    this.selection.setAllSelected(false);\n  };\n\n  BaseSelectedItemsList.prototype.highlightedItems = function () {\n    return this.selection.getSelection();\n  };\n\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillUpdate = function (newProps, newState) {\n    if (newState.items && newState.items !== this.state.items) {\n      this.selection.setItems(newState.items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n  };\n\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    var newItems = newProps.selectedItems;\n\n    if (newItems) {\n      this.setState({\n        items: newItems\n      });\n    }\n\n    if (newProps.selection) {\n      this.selection = newProps.selection;\n    }\n  };\n\n  BaseSelectedItemsList.prototype.render = function () {\n    return this.renderItems();\n  };\n\n  BaseSelectedItemsList.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.copyItems = function (items) {\n    if (this.props.onCopyItems) {\n      var copyText = this.props.onCopyItems(items);\n      var copyInput = document.createElement('input');\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {// no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  };\n\n  BaseSelectedItemsList.prototype._onSelectedItemsUpdated = function (items, focusIndex) {\n    this.onChange(items);\n  };\n\n  BaseSelectedItemsList.prototype._canRemoveItem = function (item) {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  };\n\n  return BaseSelectedItemsList;\n}(React.Component);\n\nexport { BaseSelectedItemsList };","map":null,"metadata":{},"sourceType":"module"}