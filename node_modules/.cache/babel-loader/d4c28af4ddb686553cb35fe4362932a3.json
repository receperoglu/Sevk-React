{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, getId, classNamesFunction, getNativeProps, htmlElementProperties, css, initializeComponentRef } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nvar getClassNames = classNamesFunction();\n\nvar MessageBarBase =\n/** @class */\nfunction (_super) {\n  __extends(MessageBarBase, _super);\n\n  function MessageBarBase(props) {\n    var _a;\n\n    var _this = _super.call(this, props) || this;\n\n    _this.ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\n\n    _this._getRegionProps = function () {\n      var hasActions = !!_this._getActionsDiv() || !!_this._getDismissDiv();\n      var regionProps = {\n        'aria-describedby': _this.state.labelId,\n        role: 'region'\n      };\n      return hasActions ? regionProps : {};\n    };\n\n    _this._onClick = function (ev) {\n      _this.setState({\n        expandSingleLine: !_this.state.expandSingleLine\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false\n    };\n    return _this;\n  }\n\n  MessageBarBase.prototype.render = function () {\n    var isMultiline = this.props.isMultiline;\n    this._classNames = this._getClassNames();\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  };\n\n  MessageBarBase.prototype._getActionsDiv = function () {\n    if (this.props.actions) {\n      return React.createElement(\"div\", {\n        className: this._classNames.actions\n      }, this.props.actions);\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissDiv = function () {\n    var _a = this.props,\n        onDismiss = _a.onDismiss,\n        dismissIconProps = _a.dismissIconProps;\n\n    if (onDismiss) {\n      return React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.dismissal,\n        onClick: onDismiss,\n        iconProps: dismissIconProps ? dismissIconProps : {\n          iconName: 'Clear'\n        },\n        title: this.props.dismissButtonAriaLabel,\n        ariaLabel: this.props.dismissButtonAriaLabel\n      });\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissSingleLine = function () {\n    if (this.props.onDismiss) {\n      return React.createElement(\"div\", {\n        className: this._classNames.dismissSingleLine\n      }, this._getDismissDiv());\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getExpandSingleLine = function () {\n    if (!this.props.actions && this.props.truncated) {\n      return React.createElement(\"div\", {\n        className: this._classNames.expandSingleLine\n      }, React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.expand,\n        onClick: this._onClick,\n        iconProps: {\n          iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n        },\n        ariaLabel: this.props.overflowButtonAriaLabel,\n        \"aria-expanded\": this.state.expandSingleLine\n      }));\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getIconSpan = function () {\n    var messageBarIconProps = this.props.messageBarIconProps;\n    return React.createElement(\"div\", {\n      className: this._classNames.iconContainer,\n      \"aria-hidden\": true\n    }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n      className: css(this._classNames.icon, messageBarIconProps.className)\n    })) : React.createElement(Icon, {\n      iconName: this.ICON_MAP[this.props.messageBarType],\n      className: this._classNames.icon\n    }));\n  };\n\n  MessageBarBase.prototype._renderMultiLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getDismissDiv()), this._getActionsDiv());\n  };\n\n  MessageBarBase.prototype._renderSingleLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getExpandSingleLine(), this._getActionsDiv(), this._getDismissSingleLine()));\n  };\n\n  MessageBarBase.prototype._renderInnerText = function () {\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\n    return React.createElement(\"div\", {\n      className: this._classNames.text,\n      id: this.state.labelId,\n      role: \"status\",\n      \"aria-live\": this._getAnnouncementPriority()\n    }, React.createElement(\"span\", __assign({\n      className: this._classNames.innerText\n    }, nativeProps), React.createElement(DelayedRender, null, React.createElement(\"span\", null, this.props.children))));\n  };\n\n  MessageBarBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        theme = _a.theme,\n        className = _a.className,\n        messageBarType = _a.messageBarType,\n        onDismiss = _a.onDismiss,\n        actions = _a.actions,\n        truncated = _a.truncated,\n        isMultiline = _a.isMultiline;\n    var expandSingleLine = this.state.expandSingleLine;\n    return getClassNames(this.props.styles, {\n      theme: theme,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className: className\n    });\n  };\n\n  MessageBarBase.prototype._getAnnouncementPriority = function () {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n\n    return 'polite';\n  };\n\n  MessageBarBase.defaultProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true\n  };\n  return MessageBarBase;\n}(React.Component);\n\nexport { MessageBarBase };","map":null,"metadata":{},"sourceType":"module"}