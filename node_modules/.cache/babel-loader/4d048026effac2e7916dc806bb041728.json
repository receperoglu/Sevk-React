{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, getId, inputProperties, getNativeProps, warnDeprecations, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\n\nvar ToggleBase =\n/** @class */\nfunction (_super) {\n  __extends(ToggleBase, _super);\n\n  function ToggleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleButton = React.createRef();\n\n    _this._onClick = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          disabled = _a.disabled,\n          checkedProp = _a.checked,\n          onChange = _a.onChange,\n          onChanged = _a.onChanged,\n          onClick = _a.onClick;\n      var checked = _this.state.checked;\n\n      if (!disabled) {\n        // Only update the state if the user hasn't provided it.\n        if (checkedProp === undefined) {\n          _this.setState({\n            checked: !checked\n          });\n        }\n\n        if (onChange) {\n          onChange(ev, !checked);\n        }\n\n        if (onChanged) {\n          onChanged(!checked);\n        }\n\n        if (onClick) {\n          onClick(ev);\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked'\n    });\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n    _this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    _this._id = props.id || getId('Toggle');\n    return _this;\n  }\n\n  ToggleBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked\n    };\n  };\n\n  Object.defineProperty(ToggleBase.prototype, \"checked\", {\n    /**\n     * Gets the current checked state of the toggle.\n     */\n    get: function get() {\n      return this.state.checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToggleBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.as,\n        RootType = _b === void 0 ? 'div' : _b,\n        className = _a.className,\n        theme = _a.theme,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps,\n        label = _a.label,\n        ariaLabel = _a.ariaLabel,\n\n    /* eslint-disable deprecation/deprecation */\n    onAriaLabel = _a.onAriaLabel,\n        offAriaLabel = _a.offAriaLabel,\n\n    /* eslint-enable deprecation/deprecation */\n    offText = _a.offText,\n        onText = _a.onText,\n        styles = _a.styles,\n        inlineLabel = _a.inlineLabel;\n    var checked = this.state.checked;\n    var stateText = checked ? onText : offText;\n    var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    var toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      checked: checked,\n      inlineLabel: inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n    var labelId = this._id + \"-label\";\n    var stateTextId = this._id + \"-stateText\"; // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    var labelledById = undefined;\n\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n\n      if (stateText) {\n        labelledById = labelledById ? labelledById + \" \" + stateTextId : stateTextId;\n      }\n    }\n\n    var ariaRole = this.props.role ? this.props.role : 'switch';\n\n    var renderPill = function renderPill(keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      return React.createElement(\"button\", __assign({}, toggleNativeProps, keytipAttributes, {\n        className: classNames.pill,\n        disabled: disabled,\n        id: _this._id,\n        type: \"button\",\n        role: ariaRole,\n        ref: _this._toggleButton,\n        \"aria-disabled\": disabled,\n        \"aria-checked\": checked,\n        \"aria-label\": ariaLabel ? ariaLabel : badAriaLabel,\n        \"data-is-focusable\": true,\n        onChange: _this._noop,\n        onClick: _this._onClick,\n        \"aria-labelledby\": labelledById\n      }), React.createElement(\"span\", {\n        className: classNames.thumb\n      }));\n    };\n\n    var pillContent = keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: toggleNativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return renderPill(keytipAttributes);\n    }) : renderPill();\n    return React.createElement(RootType, {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    }, label && React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.label,\n      id: labelId\n    }, label), React.createElement(\"div\", {\n      className: classNames.container\n    }, pillContent, stateText && // This second \"htmlFor\" property is needed to allow the\n    // toggle's stateText to also trigger a state change when clicked.\n    React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.text,\n      id: stateTextId\n    }, stateText)), React.createElement(FocusRects, null));\n  };\n\n  ToggleBase.prototype.focus = function () {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  };\n\n  ToggleBase.prototype._noop = function () {\n    /* no-op */\n  };\n\n  return ToggleBase;\n}(React.Component);\n\nexport { ToggleBase };","map":null,"metadata":{},"sourceType":"module"}