{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport { classNamesFunction, getNativeProps, inputProperties, css, initializeComponentRef } from '../../../Utilities';\nimport { composeRenderFunction } from '@uifabric/utilities';\nvar getClassNames = classNamesFunction();\nvar LARGE_IMAGE_SIZE = 71;\n/**\n * {@docCategory ChoiceGroup}\n */\n\nvar ChoiceGroupOptionBase =\n/** @class */\nfunction (_super) {\n  __extends(ChoiceGroupOptionBase, _super);\n\n  function ChoiceGroupOptionBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onChange = function (evt) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(evt, _this.props);\n      }\n    };\n\n    _this._onBlur = function (evt) {\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur(evt, _this.props);\n      }\n    };\n\n    _this._onFocus = function (evt) {\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(evt, _this.props);\n      }\n    };\n\n    _this._onRenderField = function (props) {\n      var id = props.id,\n          imageSrc = props.imageSrc,\n          _a = props.imageAlt,\n          imageAlt = _a === void 0 ? '' : _a,\n          selectedImageSrc = props.selectedImageSrc,\n          iconProps = props.iconProps;\n      var imageSize = props.imageSize ? props.imageSize : {\n        width: 32,\n        height: 32\n      };\n      var onRenderLabel = props.onRenderLabel ? composeRenderFunction(props.onRenderLabel, _this._onRenderLabel) : _this._onRenderLabel;\n      var label = onRenderLabel(props);\n      return React.createElement(\"label\", {\n        htmlFor: id,\n        className: _this._classNames.field\n      }, imageSrc && React.createElement(\"div\", {\n        className: _this._classNames.innerField\n      }, React.createElement(\"div\", {\n        className: _this._classNames.imageWrapper\n      }, React.createElement(Image, {\n        src: imageSrc,\n        alt: imageAlt,\n        width: imageSize.width,\n        height: imageSize.height\n      })), React.createElement(\"div\", {\n        className: _this._classNames.selectedImageWrapper\n      }, React.createElement(Image, {\n        src: selectedImageSrc,\n        alt: imageAlt,\n        width: imageSize.width,\n        height: imageSize.height\n      }))), iconProps && React.createElement(\"div\", {\n        className: _this._classNames.innerField\n      }, React.createElement(\"div\", {\n        className: _this._classNames.iconWrapper\n      }, React.createElement(Icon, __assign({}, iconProps)))), imageSrc || iconProps ? React.createElement(\"div\", {\n        className: _this._classNames.labelWrapper\n      }, label) : label);\n    };\n\n    _this._onRenderLabel = function (props) {\n      return React.createElement(\"span\", {\n        id: props.labelId,\n        className: \"ms-ChoiceFieldLabel\"\n      }, props.text);\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  ChoiceGroupOptionBase.prototype.render = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        focused = _a.focused,\n        required = _a.required,\n        theme = _a.theme,\n        iconProps = _a.iconProps,\n        imageSrc = _a.imageSrc,\n        imageSize = _a.imageSize,\n        disabled = _a.disabled,\n        // eslint-disable-next-line deprecation/deprecation\n    checked = _a.checked,\n        id = _a.id,\n        styles = _a.styles,\n        name = _a.name,\n        _b = _a.onRenderField,\n        onRenderField = _b === void 0 ? this._onRenderField : _b,\n        rest = __rest(_a, [\"ariaLabel\", \"focused\", \"required\", \"theme\", \"iconProps\", \"imageSrc\", \"imageSize\", \"disabled\", \"checked\", \"id\", \"styles\", \"name\", \"onRenderField\"]);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      hasIcon: !!iconProps,\n      hasImage: !!imageSrc,\n      checked: checked,\n      disabled: disabled,\n      imageIsLarge: !!imageSrc && (imageSize.width > LARGE_IMAGE_SIZE || imageSize.height > LARGE_IMAGE_SIZE),\n      imageSize: imageSize,\n      focused: focused\n    });\n\n    var _c = getNativeProps(rest, inputProperties),\n        className = _c.className,\n        nativeProps = __rest(_c, [\"className\"]);\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root\n    }, React.createElement(\"div\", {\n      className: this._classNames.choiceFieldWrapper\n    }, React.createElement(\"input\", __assign({\n      \"aria-label\": ariaLabel,\n      id: id,\n      className: css(this._classNames.input, className),\n      type: \"radio\",\n      name: name,\n      disabled: disabled,\n      checked: checked,\n      required: required\n    }, nativeProps, {\n      onChange: this._onChange,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    })), onRenderField(this.props, this._onRenderField)));\n  };\n\n  ChoiceGroupOptionBase.defaultProps = {\n    // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.\n    imageSize: {\n      width: 32,\n      height: 32\n    }\n  };\n  return ChoiceGroupOptionBase;\n}(React.Component);\n\nexport { ChoiceGroupOptionBase };","map":null,"metadata":{},"sourceType":"module"}