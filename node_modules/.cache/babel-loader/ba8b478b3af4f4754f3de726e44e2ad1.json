{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties, Async, initializeComponentRef } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nvar ShimmerBase =\n/** @class */\nfunction (_super) {\n  __extends(ShimmerBase, _super);\n\n  function ShimmerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    _this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n    _this._async = new Async(_this);\n    return _this;\n  }\n\n  ShimmerBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    var isDataLoaded = this.props.isDataLoaded;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId); // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n\n\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(function () {\n          _this.setState({\n            contentLoaded: isDataLoaded\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n      }\n    }\n  };\n\n  ShimmerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  ShimmerBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        shimmerElements = _a.shimmerElements,\n        children = _a.children,\n        isDataLoaded = _a.isDataLoaded,\n        width = _a.width,\n        className = _a.className,\n        customElementsGroup = _a.customElementsGroup,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel,\n        shimmerColors = _a.shimmerColors;\n    var contentLoaded = this.state.contentLoaded;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isDataLoaded: isDataLoaded,\n      className: className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n    });\n    var divProps = getNativeProps(this.props, divProperties);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: this._classNames.root\n    }), !contentLoaded && React.createElement(\"div\", {\n      style: {\n        width: width ? width : '100%'\n      },\n      className: this._classNames.shimmerWrapper\n    }, React.createElement(\"div\", {\n      className: this._classNames.shimmerGradient\n    }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n      shimmerElements: shimmerElements,\n      backgroundColor: shimmerColors && shimmerColors.background\n    })), children && React.createElement(\"div\", {\n      className: this._classNames.dataWrapper\n    }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: this._classNames.screenReaderText\n    }, ariaLabel))));\n  };\n\n  ShimmerBase.defaultProps = {\n    isDataLoaded: false\n  };\n  return ShimmerBase;\n}(React.Component);\n\nexport { ShimmerBase };","map":null,"metadata":{},"sourceType":"module"}