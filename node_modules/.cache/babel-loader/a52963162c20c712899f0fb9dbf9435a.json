{"ast":null,"code":"import { getDividerClassNames } from '../Divider/VerticalDivider.classNames';\nimport { getMenuItemStyles } from './ContextualMenu.cnstyles';\nimport { mergeStyleSets, getGlobalClassNames, getScreenSelector, ScreenWidthMaxMedium, hiddenContentStyle } from '../../Styling';\nimport { memoizeFunction, IsFocusVisibleClassName } from '../../Utilities';\nvar CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';\nvar MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\nexport var getSplitButtonVerticalDividerClassNames = memoizeFunction(\n/* eslint-disable deprecation/deprecation */\nfunction (theme) {\n  var _a;\n\n  return mergeStyleSets(getDividerClassNames(theme), {\n    /* eslint-enable deprecation/deprecation */\n    wrapper: {\n      position: 'absolute',\n      right: 28,\n      selectors: (_a = {}, _a[MediumScreenSelector] = {\n        right: 32\n      }, _a)\n    },\n    divider: {\n      height: 16,\n      width: 1\n    }\n  });\n});\nvar GlobalClassNames = {\n  item: 'ms-ContextualMenu-item',\n  divider: 'ms-ContextualMenu-divider',\n  root: 'ms-ContextualMenu-link',\n  isChecked: 'is-checked',\n  isExpanded: 'is-expanded',\n  isDisabled: 'is-disabled',\n  linkContent: 'ms-ContextualMenu-linkContent',\n  linkContentMenu: 'ms-ContextualMenu-linkContent',\n  icon: 'ms-ContextualMenu-icon',\n  iconColor: 'ms-ContextualMenu-iconColor',\n  checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',\n  subMenuIcon: 'ms-ContextualMenu-submenuIcon',\n  label: 'ms-ContextualMenu-itemText',\n  secondaryText: 'ms-ContextualMenu-secondaryText',\n  splitMenu: 'ms-ContextualMenu-splitMenu',\n  screenReaderText: 'ms-ContextualMenu-screenReaderText'\n};\n/**\n * @deprecated To be removed in 7.0.\n * @internal\n * This is a package-internal method that has been depended on.\n * It is being kept in this form for backwards compatibility.\n * It should be cleaned up in 7.0.\n *\n * TODO: Audit perf. impact of and potentially remove memoizeFunction.\n * https://github.com/microsoft/fluentui/issues/5534\n */\n\nexport var getItemClassNames = memoizeFunction(function (theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {\n  var _a, _b, _c, _d;\n\n  var styles = getMenuItemStyles(theme);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return mergeStyleSets({\n    item: [classNames.item, styles.item, itemClassName],\n    divider: [classNames.divider, styles.divider, dividerClassName],\n    root: [classNames.root, styles.root, checked && [classNames.isChecked, styles.rootChecked], isAnchorLink && styles.anchorLink, expanded && [classNames.isExpanded, styles.rootExpanded], disabled && [classNames.isDisabled, styles.rootDisabled], !disabled && !expanded && [{\n      selectors: (_a = {\n        ':hover': styles.rootHovered,\n        ':active': styles.rootPressed\n      }, _a[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _a[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _a)\n    }], className],\n    splitPrimary: [styles.root, {\n      width: \"calc(100% - \" + CONTEXTUAL_SPLIT_MENU_MINWIDTH + \")\"\n    }, checked && ['is-checked', styles.rootChecked], (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled], !(disabled || primaryDisabled) && !checked && [{\n      selectors: (_b = {\n        ':hover': styles.rootHovered\n      }, // when hovering over the splitPrimary also affect the splitMenu\n      _b[\":hover ~ .\" + classNames.splitMenu] = styles.rootHovered, _b[':active'] = styles.rootPressed, _b[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _b[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _b)\n    }]],\n    splitMenu: [classNames.splitMenu, styles.root, {\n      flexBasis: '0',\n      padding: '0 8px',\n      minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH\n    }, expanded && ['is-expanded', styles.rootExpanded], disabled && ['is-disabled', styles.rootDisabled], !disabled && !expanded && [{\n      selectors: (_c = {\n        ':hover': styles.rootHovered,\n        ':active': styles.rootPressed\n      }, _c[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _c[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _c)\n    }]],\n    anchorLink: styles.anchorLink,\n    linkContent: [classNames.linkContent, styles.linkContent],\n    linkContentMenu: [classNames.linkContentMenu, styles.linkContent, {\n      justifyContent: 'center'\n    }],\n    icon: [classNames.icon, knownIcon && styles.iconColor, styles.icon, iconClassName, disabled && [classNames.isDisabled, styles.iconDisabled]],\n    iconColor: styles.iconColor,\n    checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],\n    subMenuIcon: [classNames.subMenuIcon, styles.subMenuIcon, subMenuClassName, expanded && {\n      color: theme.palette.neutralPrimary\n    }, disabled && [styles.iconDisabled]],\n    label: [classNames.label, styles.label],\n    secondaryText: [classNames.secondaryText, styles.secondaryText],\n    splitContainer: [styles.splitButtonFlexContainer, !disabled && !checked && [{\n      selectors: (_d = {}, _d[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _d)\n    }]],\n    screenReaderText: [classNames.screenReaderText, styles.screenReaderText, hiddenContentStyle, {\n      visibility: 'hidden'\n    }]\n  });\n});\n/**\n * Wrapper function for generating ContextualMenuItem classNames which adheres to\n * the getStyles API, but invokes memoized className generator function with\n * primitive values.\n *\n * @param props - the ContextualMenuItem style props used to generate its styles.\n */\n\nexport var getItemStyles = function getItemStyles(props) {\n  var theme = props.theme,\n      disabled = props.disabled,\n      expanded = props.expanded,\n      checked = props.checked,\n      isAnchorLink = props.isAnchorLink,\n      knownIcon = props.knownIcon,\n      itemClassName = props.itemClassName,\n      dividerClassName = props.dividerClassName,\n      iconClassName = props.iconClassName,\n      subMenuClassName = props.subMenuClassName,\n      primaryDisabled = props.primaryDisabled,\n      className = props.className; // eslint-disable-next-line deprecation/deprecation\n\n  return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);\n};","map":null,"metadata":{},"sourceType":"module"}