{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getTheme } from '@uifabric/styling';\nimport { KeyCodes, css, elementContains, getDocument, getElementIndexPath, getFocusableByIndexPath, getId, getNativeProps, getNextElement, getParent, getPreviousElement, getRTL, htmlElementProperties, initializeComponentRef, isElementFocusSubZone, isElementFocusZone, isElementTabbable, raiseClick, shouldWrapFocus, warnDeprecations, portalContainsElement, getWindow, findScrollableParent, createMergedRef } from '@uifabric/utilities';\nimport { FocusZoneDirection, FocusZoneTabbableElements } from './FocusZone.types';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar focusZoneStyles;\nvar focusZoneClass = 'ms-FocusZone'; // Helper function that will return a class for when the root is focused\n\nfunction getRootClass() {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles({\n      selectors: {\n        ':focus': {\n          outline: 'none'\n        }\n      }\n    }, focusZoneClass);\n  }\n\n  return focusZoneStyles;\n}\n\nvar _allInstances = {};\n\nvar _outerZones = new Set();\n\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\n\nvar FocusZone =\n/** @class */\nfunction (_super) {\n  __extends(FocusZone, _super);\n\n  function FocusZone(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._mergedRef = createMergedRef();\n\n    _this._onFocus = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var _a = _this.props,\n          onActiveElementChanged = _a.onActiveElementChanged,\n          // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate,\n          stopFocusPropagation = _a.stopFocusPropagation,\n          // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification = _a.onFocusNotification,\n          onFocus = _a.onFocus,\n          shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus,\n          defaultTabbableElement = _a.defaultTabbableElement;\n\n      var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);\n\n      var newActiveElement;\n\n      if (isImmediateDescendant) {\n        newActiveElement = ev.target;\n      } else {\n        var parentElement = ev.target;\n\n        while (parentElement && parentElement !== _this._root.current) {\n          if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {\n            newActiveElement = parentElement;\n            break;\n          }\n\n          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n      } // If an inner focusable element should be focused when FocusZone container receives focus\n\n\n      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && defaultTabbableElement(_this._root.current); // try to focus defaultTabbable element\n\n        if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n          newActiveElement = maybeElementToFocus;\n          maybeElementToFocus.focus();\n        } else {\n          // force focus on first focusable element\n          _this.focus(true);\n\n          if (_this._activeElement) {\n            // set to null as new active element was handled in method above\n            newActiveElement = null;\n          }\n        }\n      }\n\n      var initialElementFocused = !_this._activeElement; // If the new active element is a child of this zone and received focus,\n      // update alignment an immediate descendant\n\n      if (newActiveElement && newActiveElement !== _this._activeElement) {\n        if (isImmediateDescendant || initialElementFocused) {\n          _this._setFocusAlignment(newActiveElement, true, true);\n        }\n\n        _this._activeElement = newActiveElement;\n\n        if (initialElementFocused) {\n          _this._updateTabIndexes();\n        }\n      }\n\n      if (onActiveElementChanged) {\n        onActiveElementChanged(_this._activeElement, ev);\n      }\n\n      if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n        ev.stopPropagation();\n      }\n\n      if (onFocus) {\n        onFocus(ev);\n      } else if (onFocusNotification) {\n        onFocusNotification();\n      }\n    };\n\n    _this._onBlur = function () {\n      _this._setParkedFocus(false);\n    };\n\n    _this._onMouseDown = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var target = ev.target;\n      var path = [];\n\n      while (target && target !== _this._root.current) {\n        path.push(target);\n        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      while (path.length) {\n        target = path.pop();\n\n        if (target && isElementTabbable(target)) {\n          _this._setActiveElement(target, true);\n        }\n\n        if (isElementFocusZone(target)) {\n          // Stop here since the focus zone will take care of its own children.\n          break;\n        }\n      }\n    };\n    /**\n     * Handle the keystrokes.\n     */\n\n\n    _this._onKeyDown = function (ev, theme) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var _a = _this.props,\n          direction = _a.direction,\n          disabled = _a.disabled,\n          isInnerZoneKeystroke = _a.isInnerZoneKeystroke,\n          pagingSupportDisabled = _a.pagingSupportDisabled,\n          shouldEnterInnerZone = _a.shouldEnterInnerZone;\n\n      if (disabled) {\n        return;\n      }\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      } // If the default has been prevented, do not process keyboard events.\n\n\n      if (ev.isDefaultPrevented()) {\n        return;\n      }\n\n      if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {\n        // If this element has focus, it is being controlled by a parent.\n        // Ignore the keystroke.\n        return;\n      }\n\n      if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {\n        // Try to focus\n        var innerZone = _this._getFirstInnerZone();\n\n        if (innerZone) {\n          if (!innerZone.focus(true)) {\n            return;\n          }\n        } else if (isElementFocusSubZone(ev.target)) {\n          if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n            return;\n          }\n        } else {\n          return;\n        }\n      } else if (ev.altKey) {\n        return;\n      } else {\n        // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n        switch (ev.which) {\n          case KeyCodes.space:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.left:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusLeft(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.right:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusRight(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.up:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusUp()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.down:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusDown()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.pageDown:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.pageUp:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.tab:\n            if ( // eslint-disable-next-line deprecation/deprecation\n            _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {\n              var focusChanged = false;\n              _this._processingTabKey = true;\n\n              if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();\n              } else {\n                var tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n                focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);\n              }\n\n              _this._processingTabKey = false;\n\n              if (focusChanged) {\n                break;\n              } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n                _this._activeElement = null;\n              }\n            }\n\n            return;\n\n          case KeyCodes.home:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n\n            var firstChild = _this._root.current && _this._root.current.firstChild;\n\n            if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.end:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {\n              return false;\n            }\n\n            var lastChild = _this._root.current && _this._root.current.lastChild;\n\n            if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.enter:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return;\n\n          default:\n            return;\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {\n      // eslint-disable-next-line deprecation/deprecation\n      var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var activeRectTop = Math.floor(activeRect.top);\n      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          return 0;\n        }\n\n        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n      }\n\n      if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return LARGE_DISTANCE_FROM_CENTER;\n    }; // Manage componentRef resolution.\n\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby'\n      });\n    }\n\n    _this._id = getId('FocusZone');\n    _this._focusAlignment = {\n      left: 0,\n      top: 0\n    };\n    _this._processingTabKey = false;\n    return _this;\n  }\n  /** Used for testing purposes only. */\n\n\n  FocusZone.getOuterZones = function () {\n    return _outerZones.size;\n  };\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n\n\n  FocusZone._onKeyDownCapture = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach(function (zone) {\n        return zone._updateTabIndexes();\n      });\n    }\n  };\n\n  FocusZone.prototype.componentDidMount = function () {\n    var root = this._root.current;\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true); // Assign initial tab indexes so that we can set initial focus as appropriate.\n\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement); // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  };\n\n  FocusZone.prototype.componentDidUpdate = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument();\n\n    if (doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || !this.props.preventFocusRestoration && doc.activeElement === root)) {\n      // The element has been removed after the render, attempt to restore focus.\n      var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n\n        elementToFocus.focus();\n\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  };\n\n  FocusZone.prototype.componentWillUnmount = function () {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this); // If this is the last outer zone, remove the keydown listener.\n\n\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  };\n\n  FocusZone.prototype.render = function () {\n    var _this = this; // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = this.props,\n        tag = _a.as,\n        elementType = _a.elementType,\n        rootProps = _a.rootProps,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        className = _a.className;\n    var divProps = getNativeProps(this.props, htmlElementProperties);\n    var Tag = tag || elementType || 'div'; // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n\n    this._evaluateFocusBeforeRender(); // Only support RTL defined in global theme, not contextual theme/RTL.\n\n\n    var theme = getTheme();\n    return React.createElement(Tag, __assign({\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy\n    }, divProps, rootProps, {\n      // Once the getClassName correctly memoizes inputs this should\n      // be replaced so that className is passed to getRootClass and is included there so\n      // the class names will always be in the same order.\n      className: css(getRootClass(), className),\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._root),\n      \"data-focuszone-id\": this._id,\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function onKeyDown(ev) {\n        return _this._onKeyDown(ev, theme);\n      },\n      onFocus: this._onFocus,\n      onMouseDownCapture: this._onMouseDown\n    }), this.props.children);\n  };\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._root.current) {\n      if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {\n        var ownerZoneElement = this._getOwnerZone(this._root.current);\n\n        if (ownerZoneElement !== this._root.current) {\n          var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement)) {\n        this._activeElement.focus();\n\n        return true;\n      } else {\n        var firstChild = this._root.current.firstChild;\n        return this.focusElement(getNextElement(this._root.current, firstChild, true));\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusLast = function () {\n    if (this._root.current) {\n      var lastChild = this._root.current && this._root.current.lastChild;\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusElement = function (element, forceAlignment) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onBeforeFocus = _a.onBeforeFocus,\n        shouldReceiveFocus = _a.shouldReceiveFocus;\n\n    if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n\n\n  FocusZone.prototype.setFocusAlignment = function (point) {\n    this._focusAlignment = point;\n  };\n\n  FocusZone.prototype._evaluateFocusBeforeRender = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument();\n\n    if (doc) {\n      var focusedElement = doc.activeElement; // Only update the index path if we are not parked on the root.\n\n      if (focusedElement !== root) {\n        var shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;\n      }\n    }\n  };\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n\n\n  FocusZone.prototype._setParkedFocus = function (isParked) {\n    var root = this._root.current;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  };\n\n  FocusZone.prototype._setActiveElement = function (element, forceAlignment) {\n    var previousActiveElement = this._activeElement;\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  };\n\n  FocusZone.prototype._preventDefaultWhenHandled = function (ev) {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  };\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n\n\n  FocusZone.prototype._tryInvokeClickForFocusable = function (target) {\n    if (target === this._root.current || !this.props.shouldRaiseClicks) {\n      return false;\n    }\n\n    do {\n      if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n        return false;\n      }\n\n      if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {\n        raiseClick(target);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n    } while (target !== this._root.current);\n\n    return false;\n  };\n  /**\n   * Traverse to find first child zone.\n   */\n\n\n  FocusZone.prototype._getFirstInnerZone = function (rootElement) {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n    }\n\n    var child = rootElement.firstElementChild;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n      }\n\n      var match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling;\n    }\n\n    return null;\n  };\n\n  FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var changedFocus = false;\n    var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (isBidirectional) {\n        if (element) {\n          var targetRect = element.getBoundingClientRect();\n          var elementDistance = getDistanceFromCenter(activeRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element); // Focus the closest candidate\n\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      } else {\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._moveFocusDown = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(true, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n\n      if (targetRectTop < activeRectBottom) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusUp = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(false, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectTop = Math.floor(activeRect.top);\n\n      if (targetRectBottom > activeRectTop) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusLeft = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n        // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n        // This is important, because we want to be comparing the top of the target rect\n        // with the bottom of the active rect.\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = activeRect.right - targetRect.right;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusRight = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(!getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n        // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n        // This is important, because we want to be comparing the bottom of the target rect\n        // with the top of the active rect.\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = targetRect.left - activeRect.left;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var scrollableParent = findScrollableParent(element);\n\n    if (!scrollableParent) {\n      return false;\n    }\n\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var targetTop = -1;\n    var targetBottom = -1;\n    var pagesize = scrollableParent.clientHeight;\n    var activeRect = element.getBoundingClientRect();\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (element) {\n        var targetRect = element.getBoundingClientRect();\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectBottom = Math.floor(activeRect.bottom);\n        var targetRectBottom = Math.floor(targetRect.bottom);\n        var activeRectTop = Math.floor(activeRect.top);\n\n        var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n\n        var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    var changedFocus = false; // Focus the closest candidate\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n\n      this._setFocusAlignment(candidateElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      }\n\n      return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {\n    if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {\n      var rect = element.getBoundingClientRect();\n      var left = rect.left + rect.width / 2;\n      var top_1 = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = {\n          left: left,\n          top: top_1\n        };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top_1;\n      }\n    }\n  };\n\n  FocusZone.prototype._isImmediateDescendantOfZone = function (element) {\n    return this._getOwnerZone(element) === this._root.current;\n  };\n\n  FocusZone.prototype._getOwnerZone = function (element) {\n    var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  };\n\n  FocusZone.prototype._updateTabIndexes = function (element) {\n    if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    } // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n\n\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    var childNodes = element && element.children;\n\n    for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      var child = childNodes[childIndex];\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n            this._defaultFocusElement = child;\n\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n          this._defaultFocusElement = child;\n\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  };\n\n  FocusZone.prototype._isContentEditableElement = function (element) {\n    return element && element.getAttribute('contenteditable') === 'true';\n  };\n\n  FocusZone.prototype._isElementInput = function (element) {\n    if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {\n    // If a tab was used, we want to focus on the next element.\n    if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n      var isRangeSelected = selectionStart !== selectionEnd;\n      var inputValue = element.value;\n      var isReadonly = element.readOnly; // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n\n      if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  };\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n\n\n  FocusZone.prototype._portalContainsElement = function (element) {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  };\n\n  FocusZone.prototype._getDocument = function () {\n    return getDocument(this._root.current);\n  };\n\n  FocusZone.defaultProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true\n  };\n  return FocusZone;\n}(React.Component);\n\nexport { FocusZone };","map":null,"metadata":{},"sourceType":"module"}