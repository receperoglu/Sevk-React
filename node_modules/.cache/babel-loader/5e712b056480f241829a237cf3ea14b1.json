{"ast":null,"code":"import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone'\n};\n\nfunction _getColorWithHighContrast(color, highContrastColor) {\n  var _a;\n\n  return {\n    color: color,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: highContrastColor\n    }, _a)\n  };\n}\n\nexport function getStyles(props) {\n  var disabled = props.disabled,\n      readOnly = props.readOnly,\n      theme = props.theme;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var ratingSmallIconSize = 16;\n  var ratingLargeIconSize = 20;\n  var ratingVerticalPadding = 8;\n  var ratingHorizontalPadding = 2;\n  var ratingStarUncheckedColor = palette.neutralSecondary;\n  var ratingStarUncheckedHoverColor = palette.themePrimary;\n  var ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  var ratingStarCheckedColor = palette.neutralPrimary;\n  var ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n  return {\n    root: [classNames.root, theme.fonts.medium, !disabled && !readOnly && {\n      selectors: {\n        // This is part 1 of highlighting all stars up to the one the user is hovering over\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')\n          }\n        }\n      }\n    }],\n    rootIsSmall: [classNames.rootIsSmall, {\n      height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    rootIsLarge: [classNames.rootIsLarge, {\n      height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    ratingStar: [classNames.ratingStar, {\n      display: 'inline-block',\n      position: 'relative',\n      height: 'inherit'\n    }],\n    ratingStarBack: [classNames.ratingStarBack, {\n      // TODO: Use a proper semantic color for this\n      color: ratingStarUncheckedColor,\n      width: '100%'\n    }, disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText')],\n    ratingStarFront: [classNames.ratingStarFront, {\n      position: 'absolute',\n      height: '100 %',\n      left: '0',\n      top: '0',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      overflow: 'hidden'\n    }, _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')],\n    ratingButton: [getFocusStyle(theme), classNames.ratingButton, {\n      backgroundColor: 'transparent',\n      padding: ratingVerticalPadding + \"px \" + ratingHorizontalPadding + \"px\",\n      boxSizing: 'content-box',\n      margin: '0px',\n      border: 'none',\n      cursor: 'pointer',\n      selectors: {\n        '&:disabled': {\n          cursor: 'default'\n        },\n        '&[disabled]': {\n          cursor: 'default'\n        }\n      }\n    }, !disabled && !readOnly && {\n      selectors: {\n        // This is part 2 of highlighting all stars up to the one the user is hovering over\n        '&:hover ~ .ms-Rating-button': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n            '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText')\n          }\n        },\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': {\n              color: ratingStarUncheckedHoverColor\n            },\n            '.ms-RatingStar-front': {\n              color: ratingStarUncheckedHoverSelectedColor\n            }\n          }\n        }\n      }\n    }, disabled && {\n      cursor: 'default'\n    }],\n    ratingStarIsSmall: [classNames.ratingStarIsSmall, {\n      fontSize: ratingSmallIconSize + 'px',\n      lineHeight: ratingSmallIconSize + 'px',\n      height: ratingSmallIconSize + 'px'\n    }],\n    ratingStarIsLarge: [classNames.ratingStartIsLarge, {\n      fontSize: ratingLargeIconSize + 'px',\n      lineHeight: ratingLargeIconSize + 'px',\n      height: ratingLargeIconSize + 'px'\n    }],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [getFocusStyle(theme), classNames.ratingFocusZone, {\n      display: 'inline-block'\n    }]\n  };\n}","map":null,"metadata":{},"sourceType":"module"}