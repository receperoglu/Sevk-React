{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as stylesImport from './BaseFloatingPicker.scss';\nimport { Async, initializeComponentRef, css, KeyCodes } from '../../Utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { SuggestionsControl } from './Suggestions/SuggestionsControl';\nvar styles = stylesImport;\n\nvar BaseFloatingPicker =\n/** @class */\nfunction (_super) {\n  __extends(BaseFloatingPicker, _super);\n\n  function BaseFloatingPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.root = React.createRef();\n    _this.suggestionsControl = React.createRef();\n    _this.SuggestionsControlOfProperType = SuggestionsControl;\n    _this.isComponentMounted = false;\n\n    _this.onQueryStringChanged = function (queryString) {\n      if (queryString !== _this.state.queryString) {\n        _this.setState({\n          queryString: queryString\n        });\n\n        if (_this.props.onInputChanged) {\n          _this.props.onInputChanged(queryString);\n        }\n\n        _this.updateValue(queryString);\n      }\n    };\n\n    _this.hidePicker = function () {\n      var wasShownBeforeUpdate = _this.isSuggestionsShown;\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n\n      if (_this.props.onSuggestionsHidden && wasShownBeforeUpdate) {\n        _this.props.onSuggestionsHidden();\n      }\n    };\n\n    _this.showPicker = function (updateValue) {\n      if (updateValue === void 0) {\n        updateValue = false;\n      }\n\n      var wasShownBeforeUpdate = _this.isSuggestionsShown;\n\n      _this.setState({\n        suggestionsVisible: true\n      }); // Update the suggestions if updateValue == true\n\n\n      var value = _this.props.inputElement ? _this.props.inputElement.value : '';\n\n      if (updateValue) {\n        _this.updateValue(value);\n      }\n\n      if (_this.props.onSuggestionsShown && !wasShownBeforeUpdate) {\n        _this.props.onSuggestionsShown();\n      }\n    };\n\n    _this.completeSuggestion = function () {\n      if (_this.suggestionsControl.current && _this.suggestionsControl.current.hasSuggestionSelected()) {\n        _this.onChange(_this.suggestionsControl.current.currentSuggestion.item);\n      }\n    };\n\n    _this.onSuggestionClick = function (ev, item, index) {\n      _this.onChange(item);\n\n      _this._updateSuggestionsVisible(false\n      /*shouldShow*/\n      );\n    };\n\n    _this.onSuggestionRemove = function (ev, item, index) {\n      if (_this.props.onRemoveSuggestion) {\n        _this.props.onRemoveSuggestion(item);\n      }\n\n      if (_this.suggestionsControl.current) {\n        _this.suggestionsControl.current.removeSuggestion(index);\n      }\n    };\n\n    _this.onKeyDown = function (ev) {\n      if (!_this.state.suggestionsVisible || _this.props.inputElement && !_this.props.inputElement.contains(ev.target)) {\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var keyCode = ev.which;\n\n      switch (keyCode) {\n        case KeyCodes.escape:\n          _this.hidePicker();\n\n          ev.preventDefault();\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.tab:\n        case KeyCodes.enter:\n          if (!ev.shiftKey && !ev.ctrlKey && _this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n          } else {\n            _this._onValidateInput();\n          }\n\n          break;\n\n        case KeyCodes.del:\n          if (_this.props.onRemoveSuggestion && _this.suggestionsControl.current && _this.suggestionsControl.current.hasSuggestionSelected && _this.suggestionsControl.current.currentSuggestion && ev.shiftKey) {\n            _this.props.onRemoveSuggestion(_this.suggestionsControl.current.currentSuggestion.item);\n\n            _this.suggestionsControl.current.removeSuggestion();\n\n            _this.forceUpdate();\n\n            ev.stopPropagation();\n          }\n\n          break;\n\n        case KeyCodes.up:\n          if (_this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            _this._updateActiveDescendant();\n          }\n\n          break;\n\n        case KeyCodes.down:\n          if (_this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            _this._updateActiveDescendant();\n          }\n\n          break;\n      }\n    };\n\n    _this._onValidateInput = function () {\n      if (_this.state.queryString && _this.props.onValidateInput && _this.props.createGenericItem) {\n        var itemToConvert = _this.props.createGenericItem(_this.state.queryString, _this.props.onValidateInput(_this.state.queryString));\n\n        var convertedItems = _this.suggestionStore.convertSuggestionsToSuggestionItems([itemToConvert]);\n\n        _this.onChange(convertedItems[0].item);\n      }\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    _this.suggestionStore = basePickerProps.suggestionsStore;\n    _this.state = {\n      queryString: '',\n      didBind: false\n    };\n    return _this;\n  }\n\n  Object.defineProperty(BaseFloatingPicker.prototype, \"inputText\", {\n    get: function get() {\n      return this.state.queryString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseFloatingPicker.prototype, \"suggestions\", {\n    get: function get() {\n      return this.suggestionStore.suggestions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseFloatingPicker.prototype.forceResolveSuggestion = function () {\n    if (this.suggestionsControl.current && this.suggestionsControl.current.hasSuggestionSelected()) {\n      this.completeSuggestion();\n    } else {\n      this._onValidateInput();\n    }\n  };\n\n  Object.defineProperty(BaseFloatingPicker.prototype, \"currentSelectedSuggestionIndex\", {\n    get: function get() {\n      return this.suggestionsControl.current ? this.suggestionsControl.current.currentSuggestionIndex : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseFloatingPicker.prototype, \"isSuggestionsShown\", {\n    get: function get() {\n      return this.state.suggestionsVisible === undefined ? false : this.state.suggestionsVisible;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseFloatingPicker.prototype.componentDidMount = function () {\n    this._bindToInputElement();\n\n    this.isComponentMounted = true;\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  };\n\n  BaseFloatingPicker.prototype.componentDidUpdate = function () {\n    this._bindToInputElement();\n  };\n\n  BaseFloatingPicker.prototype.componentWillUnmount = function () {\n    this._unbindFromInputElement();\n\n    this.isComponentMounted = false;\n  };\n\n  BaseFloatingPicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.suggestionItems) {\n      this.updateSuggestions(newProps.suggestionItems);\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestions = function (suggestions, forceUpdate) {\n    if (forceUpdate === void 0) {\n      forceUpdate = false;\n    }\n\n    this.suggestionStore.updateSuggestions(suggestions);\n\n    if (forceUpdate) {\n      this.forceUpdate();\n    }\n  };\n\n  BaseFloatingPicker.prototype.render = function () {\n    var className = this.props.className;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseFloatingPicker', className ? className : '')\n    }, this.renderSuggestions());\n  };\n\n  BaseFloatingPicker.prototype.renderSuggestions = function () {\n    var TypedSuggestionsControl = this.SuggestionsControlOfProperType;\n    return this.state.suggestionsVisible ? React.createElement(Callout, __assign({\n      className: styles.callout,\n      isBeakVisible: false,\n      gapSpace: 5,\n      target: this.props.inputElement,\n      onDismiss: this.hidePicker,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      directionalHintForRTL: DirectionalHint.bottomRightEdge,\n      calloutWidth: this.props.calloutWidth ? this.props.calloutWidth : 0\n    }, this.props.pickerCalloutProps), React.createElement(TypedSuggestionsControl, __assign({\n      onRenderSuggestion: this.props.onRenderSuggestionsItem,\n      onSuggestionClick: this.onSuggestionClick,\n      onSuggestionRemove: this.onSuggestionRemove,\n      suggestions: this.suggestionStore.getSuggestions(),\n      componentRef: this.suggestionsControl,\n      completeSuggestion: this.completeSuggestion,\n      shouldLoopSelection: false\n    }, this.props.pickerSuggestionsProps))) : null;\n  };\n\n  BaseFloatingPicker.prototype.onSelectionChange = function () {\n    this.forceUpdate();\n  };\n\n  BaseFloatingPicker.prototype.updateValue = function (updatedValue) {\n    if (updatedValue === '') {\n      this.updateSuggestionWithZeroState();\n    } else {\n      this._onResolveSuggestions(updatedValue);\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestionWithZeroState = function () {\n    if (this.props.onZeroQuerySuggestion) {\n      var onEmptyInputFocus = this.props.onZeroQuerySuggestion;\n      var suggestions = onEmptyInputFocus(this.props.selectedItems);\n      this.updateSuggestionsList(suggestions);\n    } else {\n      this.hidePicker();\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestionsList = function (suggestions) {\n    var _this = this;\n\n    var suggestionsArray = suggestions;\n    var suggestionsPromiseLike = suggestions; // Check to see if the returned value is an array, if it is then just pass it into the next function.\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n\n    if (Array.isArray(suggestionsArray)) {\n      this.updateSuggestions(suggestionsArray, true\n      /*forceUpdate*/\n      );\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      var promise_1 = this.currentPromise = suggestionsPromiseLike;\n      promise_1.then(function (newSuggestions) {\n        // Only update if the next promise has not yet resolved and\n        // the floating picker is still mounted.\n        if (promise_1 === _this.currentPromise && _this.isComponentMounted) {\n          _this.updateSuggestions(newSuggestions, true\n          /*forceUpdate*/\n          );\n        }\n      });\n    }\n  };\n\n  BaseFloatingPicker.prototype.onChange = function (item) {\n    if (this.props.onChange) {\n      this.props.onChange(item);\n    }\n  };\n\n  BaseFloatingPicker.prototype._updateActiveDescendant = function () {\n    if (this.props.inputElement && this.suggestionsControl.current && this.suggestionsControl.current.selectedElement) {\n      var selectedElId = this.suggestionsControl.current.selectedElement.getAttribute('id');\n\n      if (selectedElId) {\n        this.props.inputElement.setAttribute('aria-activedescendant', selectedElId);\n      }\n    }\n  };\n\n  BaseFloatingPicker.prototype._onResolveSuggestions = function (updatedValue) {\n    var suggestions = this.props.onResolveSuggestions(updatedValue, this.props.selectedItems);\n\n    this._updateSuggestionsVisible(true\n    /*shouldShow*/\n    );\n\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions);\n    }\n  };\n\n  BaseFloatingPicker.prototype._updateSuggestionsVisible = function (shouldShow) {\n    if (shouldShow) {\n      this.showPicker();\n    } else {\n      this.hidePicker();\n    }\n  };\n\n  BaseFloatingPicker.prototype._bindToInputElement = function () {\n    if (this.props.inputElement && !this.state.didBind) {\n      this.props.inputElement.addEventListener('keydown', this.onKeyDown);\n      this.setState({\n        didBind: true\n      });\n    }\n  };\n\n  BaseFloatingPicker.prototype._unbindFromInputElement = function () {\n    if (this.props.inputElement && this.state.didBind) {\n      this.props.inputElement.removeEventListener('keydown', this.onKeyDown);\n      this.setState({\n        didBind: false\n      });\n    }\n  };\n\n  return BaseFloatingPicker;\n}(React.Component);\n\nexport { BaseFloatingPicker };","map":null,"metadata":{},"sourceType":"module"}