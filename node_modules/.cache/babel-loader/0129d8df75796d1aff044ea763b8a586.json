{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\n\nvar Sticky =\n/** @class */\nfunction (_super) {\n  __extends(Sticky, _super);\n\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    }; // eslint-disable-next-line deprecation/deprecation\n\n\n    _this._getContext = function () {\n      return _this.context;\n    };\n\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n\n        var isStickyTop = false;\n        var isStickyBottom = false;\n\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n\n          isStickyTop = distanceToStickTop < container.scrollTop;\n        } // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n\n\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - Math.floor(container.scrollTop) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n\n      return distance;\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    return _this;\n  }\n\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function get() {\n      return this._root.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function get() {\n      return this._placeHolder.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function get() {\n      return this._stickyContentTop.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function get() {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function get() {\n      return this._nonStickyContent.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    var _a = this.state,\n        isStickyBottom = _a.isStickyBottom,\n        isStickyTop = _a.isStickyTop,\n        distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true\n      /*sortAgain*/\n      );\n      syncScroll = true;\n    }\n\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom,\n        distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n        stickyClassName = _b.stickyClassName,\n        children = _b.children; // eslint-disable-next-line deprecation/deprecation\n\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      \"aria-hidden\": !isStickyTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      \"aria-hidden\": !isStickyBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      \"aria-hidden\": isStickyTop || isStickyBottom,\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0; // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight; // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  }; // Gets background of nearest parent element that has a declared background-color attribute\n\n\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n\n    var curr = this.root;\n\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\n\nexport { Sticky };\n\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","map":null,"metadata":{},"sourceType":"module"}