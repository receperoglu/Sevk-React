{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { hoistStatics } from '../hoistStatics';\nimport { CustomizerContext } from './CustomizerContext';\nimport { concatStyleSets } from '@uifabric/merge-styles';\nexport function customizable(scope, fields, concatStyles) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function customizableFactory(ComposedComponent) {\n    var _a;\n\n    var resultClass = (_a =\n    /** @class */\n    function (_super) {\n      __extends(ComponentWithInjectedProps, _super);\n\n      function ComponentWithInjectedProps(props) {\n        var _this = _super.call(this, props) || this; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        _this._styleCache = {};\n        _this._onSettingChanged = _this._onSettingChanged.bind(_this);\n        return _this;\n      }\n\n      ComponentWithInjectedProps.prototype.componentDidMount = function () {\n        Customizations.observe(this._onSettingChanged);\n      };\n\n      ComponentWithInjectedProps.prototype.componentWillUnmount = function () {\n        Customizations.unobserve(this._onSettingChanged);\n      };\n\n      ComponentWithInjectedProps.prototype.render = function () {\n        var _this = this;\n\n        return React.createElement(CustomizerContext.Consumer, null, function (context) {\n          var defaultProps = Customizations.getSettings(fields, scope, context.customizations); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          var componentProps = _this.props; // If defaultProps.styles is a function, evaluate it before calling concatStyleSets\n\n          if (defaultProps.styles && typeof defaultProps.styles === 'function') {\n            defaultProps.styles = defaultProps.styles(__assign(__assign({}, defaultProps), componentProps));\n          } // If concatStyles is true and custom styles have been defined compute those styles\n\n\n          if (concatStyles && defaultProps.styles) {\n            if (_this._styleCache.default !== defaultProps.styles || _this._styleCache.component !== componentProps.styles) {\n              var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);\n              _this._styleCache.default = defaultProps.styles;\n              _this._styleCache.component = componentProps.styles;\n              _this._styleCache.merged = mergedStyles;\n            }\n\n            return React.createElement(ComposedComponent, __assign({}, defaultProps, componentProps, {\n              styles: _this._styleCache.merged\n            }));\n          }\n\n          return React.createElement(ComposedComponent, __assign({}, defaultProps, componentProps));\n        });\n      };\n\n      ComponentWithInjectedProps.prototype._onSettingChanged = function () {\n        this.forceUpdate();\n      };\n\n      return ComponentWithInjectedProps;\n    }(React.Component), _a.displayName = 'Customized' + scope, _a);\n    return hoistStatics(ComposedComponent, resultClass);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}