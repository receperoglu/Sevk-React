{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { mergeCss } from '@uifabric/merge-styles';\nimport { getRTL, memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\n\nexport function withSlots(type, props) {\n  var children = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    children[_i - 2] = arguments[_i];\n  }\n\n  var slotType = type;\n\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children); // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n\n    if (children.length === 0) {\n      return slotType(props);\n    }\n\n    return slotType(__assign(__assign({}, props), {\n      children: children\n    }));\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement.apply(React, __spreadArrays([type, props], children));\n  }\n}\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\n\nexport function createFactory(DefaultComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.defaultProp,\n      defaultProp = _a === void 0 ? 'children' : _a;\n\n  var result = function result(componentProps, userProps, userSlotOptions, defaultStyles, theme) {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    var flattenedUserProps = _translateShorthand(defaultProp, userProps);\n\n    var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        var UserComponent = userSlotOptions.component;\n        return React.createElement(UserComponent, __assign({}, finalProps));\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return React.createElement(DefaultComponent, __assign({}, finalProps));\n  };\n\n  return result;\n}\n/**\n * Default factory for components without explicit factories.\n */\n\nvar defaultFactory = memoizeFunction(function (type) {\n  return createFactory(type);\n});\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\n\nexport function getSlots(userProps, slots) {\n  var result = {}; // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n\n  var mixedProps = userProps;\n\n  var _loop_1 = function _loop_1(name_1) {\n    if (slots.hasOwnProperty(name_1)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      var slot = function slot(componentProps) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        } // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n\n\n        return _renderSlot(slots[name_1], // TODO: this cast to any is hiding a relationship issue between the first two args\n        componentProps, mixedProps[name_1], mixedProps.slots && mixedProps.slots[name_1], // _defaultStyles should always be present, but a check for existence is added to make view tests\n        // easier to use.\n        mixedProps._defaultStyles && mixedProps._defaultStyles[name_1], mixedProps.theme);\n      };\n\n      slot.isSlot = true;\n      result[name_1] = slot;\n    }\n  };\n\n  for (var name_1 in slots) {\n    _loop_1(name_1);\n  }\n\n  return result;\n}\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\n\nfunction _translateShorthand(defaultProp, slotProps) {\n  var _a;\n\n  var transformedProps;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = (_a = {}, _a[defaultProp] = slotProps, _a);\n  } else {\n    transformedProps = slotProps;\n  }\n\n  return transformedProps;\n}\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\n\n\nfunction _constructFinalProps(defaultStyles, theme) {\n  var allProps = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    allProps[_i - 2] = arguments[_i];\n  }\n\n  var finalProps = {};\n  var classNames = [];\n\n  for (var _a = 0, allProps_1 = allProps; _a < allProps_1.length; _a++) {\n    var props = allProps_1[_a];\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], {\n    rtl: getRTL(theme)\n  });\n  return finalProps;\n}\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\n\n\nfunction _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}