{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps, getId, KeyCodes, getDocument, classNamesFunction, initializeComponentRef, EventGroup, Async } from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nvar getClassNames = classNamesFunction();\n\nvar HoverCardBase =\n/** @class */\nfunction (_super) {\n  __extends(HoverCardBase, _super); // Constructor\n\n\n  function HoverCardBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._hoverCard = React.createRef();\n\n    _this.dismiss = function (withTimeOut) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (!withTimeOut) {\n        _this._setDismissedState();\n      } else {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._setDismissedState();\n        }, _this.props.cardDismissDelay);\n      }\n    }; // Show HoverCard\n\n\n    _this._cardOpen = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this._shouldBlockHoverCard() || ev.type === 'keydown' && !(ev.which === _this.props.openHotKey)) {\n        return;\n      }\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (ev.type === 'mouseenter') {\n        _this._currentMouseTarget = ev.currentTarget;\n      }\n\n      _this._executeCardOpen(ev);\n    };\n\n    _this._executeCardOpen = function (ev) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._openTimerId = _this._async.setTimeout(function () {\n        _this.setState(function (prevState) {\n          if (!prevState.isHoverCardVisible) {\n            return {\n              isHoverCardVisible: true,\n              mode: ExpandingCardMode.compact,\n              openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover\n            };\n          }\n\n          return prevState;\n        });\n      }, _this.props.cardOpenDelay);\n    };\n    /**\n     * Hide HoverCard\n     * How we dismiss the card depends on where the callback is coming from.\n     * This is provided by the `isNativeEvent` argument.\n     *  true: Event is coming from event listeners set up in componentDidMount.\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n     */\n\n\n    _this._cardDismiss = function (isNativeEvent, ev) {\n      if (isNativeEvent) {\n        // We expect these to be MouseEvents, If not, return.\n        if (!(ev instanceof MouseEvent)) {\n          return;\n        } // eslint-disable-next-line deprecation/deprecation\n\n\n        if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n          return;\n        } // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n        // eslint-disable-next-line deprecation/deprecation\n\n\n        if (!_this.props.sticky && (_this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n          _this.dismiss(true);\n        }\n      } else {\n        // If this is a mouseleave event and the component is sticky, do not dismiss.\n        if (_this.props.sticky && !(ev instanceof MouseEvent) && ev.nativeEvent instanceof MouseEvent && ev.type === 'mouseleave') {\n          return;\n        }\n\n        _this.dismiss(true);\n      }\n    };\n\n    _this._setDismissedState = function () {\n      _this.setState({\n        isHoverCardVisible: false,\n        mode: ExpandingCardMode.compact,\n        openMode: OpenCardMode.hover\n      });\n    };\n\n    _this._instantOpenAsExpanded = function (ev) {\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      _this.setState(function (prevState) {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.expanded\n          };\n        }\n\n        return prevState;\n      });\n    };\n\n    _this._setEventListeners = function () {\n      var _a = _this.props,\n          trapFocus = _a.trapFocus,\n          instantOpenOnClick = _a.instantOpenOnClick,\n          eventListenerTarget = _a.eventListenerTarget;\n      var target = eventListenerTarget ? _this._getTargetElement(eventListenerTarget) : _this._getTargetElement(_this.props.target);\n      var nativeEventDismiss = _this._nativeDismissEvent; // target can be undefined if ref isn't available, only assign\n      // events when defined to avoid throwing exception.\n\n      if (target) {\n        _this._events.on(target, 'mouseenter', _this._cardOpen);\n\n        _this._events.on(target, 'mouseleave', nativeEventDismiss);\n\n        if (trapFocus) {\n          _this._events.on(target, 'keydown', _this._cardOpen);\n        } else {\n          _this._events.on(target, 'focus', _this._cardOpen);\n\n          _this._events.on(target, 'blur', nativeEventDismiss);\n        }\n\n        if (instantOpenOnClick) {\n          _this._events.on(target, 'click', _this._instantOpenAsExpanded);\n        } else {\n          _this._events.on(target, 'mousedown', nativeEventDismiss);\n\n          _this._events.on(target, 'keydown', nativeEventDismiss);\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._nativeDismissEvent = _this._cardDismiss.bind(_this, true);\n    _this._childDismissEvent = _this._cardDismiss.bind(_this, false);\n    _this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover\n    };\n    return _this;\n  }\n\n  HoverCardBase.prototype.componentDidMount = function () {\n    this._setEventListeners();\n  };\n\n  HoverCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  HoverCardBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(function () {\n          _this.setState({\n            mode: ExpandingCardMode.expanded\n          }, function () {\n            _this.props.onCardExpand && _this.props.onCardExpand();\n          });\n        }, this.props.expandedCardOpenDelay);\n\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }; // Render\n\n\n  HoverCardBase.prototype.render = function () {\n    var _a = this.props,\n        expandingCardProps = _a.expandingCardProps,\n        children = _a.children,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        customStyles = _a.styles,\n        theme = _a.theme,\n        className = _a.className,\n        type = _a.type,\n        plainCardProps = _a.plainCardProps,\n        trapFocus = _a.trapFocus,\n        setInitialFocus = _a.setInitialFocus;\n    var _c = this.state,\n        isHoverCardVisible = _c.isHoverCardVisible,\n        mode = _c.mode,\n        openMode = _c.openMode;\n    var hoverCardId = id || getId('hoverCard');\n    this._classNames = getClassNames(customStyles, {\n      theme: theme,\n      className: className\n    }); // Common props for both card types.\n\n    var commonCardProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent\n    });\n\n    var finalExpandedCardProps = __assign(__assign(__assign({}, expandingCardProps), commonCardProps), {\n      mode: mode\n    });\n\n    var finalPlainCardProps = __assign(__assign({}, plainCardProps), commonCardProps);\n\n    return React.createElement(\"div\", {\n      className: this._classNames.host,\n      ref: this._hoverCard,\n      \"aria-describedby\": setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined,\n      \"data-is-focusable\": !this.props.target\n    }, children, isHoverCardVisible && (type === HoverCardType.expanding ? React.createElement(ExpandingCard, __assign({}, finalExpandedCardProps)) : React.createElement(PlainCard, __assign({}, finalPlainCardProps))));\n  };\n\n  HoverCardBase.prototype._getTargetElement = function (target) {\n    switch (typeof target) {\n      case 'string':\n        return getDocument().querySelector(target);\n\n      case 'object':\n        return target;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  };\n\n  HoverCardBase.prototype._shouldBlockHoverCard = function () {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  };\n\n  HoverCardBase.defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c,\n    type: HoverCardType.expanding\n  };\n  return HoverCardBase;\n}(React.Component);\n\nexport { HoverCardBase };","map":null,"metadata":{},"sourceType":"module"}