{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxMedium, ScreenWidthMaxSmall, ScreenWidthMinMedium, getFocusStyle, getScreenSelector, getGlobalClassNames, FontWeights } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item'\n};\nvar SingleLineTextStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n};\nvar overflowButtonFontSize = 16;\nvar chevronSmallFontSize = 8;\nvar itemLineHeight = 36;\nvar itemFontSize = 18;\nvar MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nvar MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d;\n\n  var className = props.className,\n      theme = props.theme;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // Tokens\n\n  var itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  var itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  var itemTextColor = palette.neutralSecondary;\n  var itemTextFontWeight = FontWeights.regular;\n  var itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  var itemLastChildTextColor = palette.neutralPrimary;\n  var itemLastChildTextFontWeight = FontWeights.semibold;\n  var chevronButtonColor = palette.neutralSecondary;\n  var overflowButtonColor = palette.neutralSecondary;\n  var lastChildItemStyles = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor\n  };\n  var itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        color: 'Highlight'\n      }, _a)\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none'\n    }\n  };\n  var commonItemStyles = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight\n  };\n  return {\n    root: [classNames.root, fonts.medium, {\n      margin: '11px 0 1px'\n    }, className],\n    list: [classNames.list, {\n      whiteSpace: 'nowrap',\n      padding: 0,\n      margin: 0,\n      display: 'flex',\n      alignItems: 'stretch'\n    }],\n    listItem: [classNames.listItem, {\n      listStyleType: 'none',\n      margin: '0',\n      padding: '0',\n      display: 'flex',\n      position: 'relative',\n      alignItems: 'center',\n      selectors: {\n        '&:last-child .ms-Breadcrumb-itemLink': lastChildItemStyles,\n        '&:last-child .ms-Breadcrumb-item': lastChildItemStyles\n      }\n    }],\n    chevron: [classNames.chevron, {\n      color: chevronButtonColor,\n      fontSize: fonts.small.fontSize,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'WindowText',\n        MsHighContrastAdjust: 'none'\n      }, _b[MediumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _b[MinimumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _b)\n    }],\n    overflow: [classNames.overflow, {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center'\n    }],\n    overflowButton: [classNames.overflowButton, getFocusStyle(theme), SingleLineTextStyle, {\n      fontSize: overflowButtonFontSize,\n      color: overflowButtonColor,\n      height: '100%',\n      cursor: 'pointer',\n      selectors: __assign(__assign({}, itemStateSelectors), (_c = {}, _c[MinimumScreenSelector] = {\n        padding: '4px 6px'\n      }, _c[MediumScreenSelector] = {\n        fontSize: fonts.mediumPlus.fontSize\n      }, _c))\n    }],\n    itemLink: [classNames.itemLink, getFocusStyle(theme), SingleLineTextStyle, __assign(__assign({}, commonItemStyles), {\n      selectors: __assign((_d = {\n        ':focus': {\n          color: palette.neutralDark\n        }\n      }, _d[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n        outline: \"none\"\n      }, _d), itemStateSelectors)\n    })],\n    item: [classNames.item, __assign(__assign({}, commonItemStyles), {\n      selectors: {\n        ':hover': {\n          cursor: 'default'\n        }\n      }\n    })]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}