{"ast":null,"code":"import { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\n\nexport function useKeytipRef(options) {\n  var _a = useKeytipData(options),\n      keytipId = _a.keytipId,\n      ariaDescribedBy = _a.ariaDescribedBy;\n\n  var contentRef = function contentRef(contentElement) {\n    if (!contentElement) {\n      return;\n    }\n\n    var targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    var executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    var ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  };\n\n  return contentRef;\n}\nexport function setAttribute(element, attributeName, attributeValue, append) {\n  if (append === void 0) {\n    append = false;\n  }\n\n  if (element && attributeValue) {\n    var value = attributeValue;\n\n    if (append) {\n      var currentValue = element.getAttribute(attributeName);\n\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = currentValue + \" \" + attributeValue;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement, dataAttribute) {\n  return rootElement.querySelector(\"[\" + dataAttribute + \"]\");\n}","map":null,"metadata":{},"sourceType":"module"}